<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:dummy="http://www.srcML.org/srcML/dummy" revision="0.9.5" language="DUMMY">

<unit xmlns="http://www.srcML.org/srcML/src" xmlns:java="http://www.srcML.org/srcML/java" revision="0.9.5" language="JAVA" filename="Users/yy66/Documents/github.com/yijunyu/demo-concodese/fast/src/main/java/fast_/Bugs.java"><comment>// automatically generated by the FlatBuffers compiler, do not modify</comment>

<package>package <name>fast_</name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>flatbuffers</name><operator>.</operator><name>*</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal>"unused"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> <specifier>final</specifier> class <name>Bugs</name> <super><extends>extends <name>Table</name></extends></super> <block>{
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Bugs</name></type> <name>getRootAsBugs</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>getRootAsBugs</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Bugs</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Bugs</name></type> <name>getRootAsBugs</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>, <parameter><decl><type><name>Bugs</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>_bb</name><operator>.</operator><name>order</name></name><argument_list>(<argument><expr><name><name>ByteOrder</name><operator>.</operator><name>LITTLE_ENDIAN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><operator>(</operator><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>__init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>bb_pos</name> <operator>=</operator> <name>_i</name></expr>;</expr_stmt> <expr_stmt><expr><name>bb</name> <operator>=</operator> <name>_bb</name></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <type><name>Bugs</name></type> <name>__assign</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>__init</name><argument_list>(<argument><expr><name>_i</name></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <type><name>String</name></type> <name>repository</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__string</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>repositoryAsByteBuffer</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>__vector_as_bytebuffer</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>repositoryInByteBuffer</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>__vector_in_bytebuffer</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Bugs_</name><operator>.</operator><name>Bug</name></name></type> <name>bug</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>bug</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>fast_</name><operator>.</operator><name>Bugs_</name><operator>.</operator><name>Bug</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Bugs_</name><operator>.</operator><name>Bug</name></name></type> <name>bug</name><parameter_list>(<parameter><decl><type><name><name>fast_</name><operator>.</operator><name>Bugs_</name><operator>.</operator><name>Bug</name></name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><call><name>__vector</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>j</name> <operator>*</operator> <literal>4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>bugLength</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__vector_len</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createBugs</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>repositoryOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>bugOffset</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Bugs</name><operator>.</operator><name>addBug</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>bugOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Bugs</name><operator>.</operator><name>addRepository</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>repositoryOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>Bugs</name><operator>.</operator><name>endBugs</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startBugs</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addRepository</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>repositoryOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>0</literal></expr></argument>, <argument><expr><name>repositoryOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addBug</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bugOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>1</literal></expr></argument>, <argument><expr><name>bugOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createBugVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>data</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal>1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal>0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block><expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for> <return>return <expr><call><name><name>builder</name><operator>.</operator><name>endVector</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startBugVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numElems</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name>numElems</name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>endBugs</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>endObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>o</name></expr>;</return>
  }</block></function>
}</block></class>

</unit>

<unit xmlns="http://www.srcML.org/srcML/src" xmlns:java="http://www.srcML.org/srcML/java" revision="0.9.5" language="JAVA" filename="Users/yy66/Documents/github.com/yijunyu/demo-concodese/fast/src/main/java/fast_/Bugs_/Bug.java"><comment>// automatically generated by the FlatBuffers compiler, do not modify</comment>

<package>package <name><name>fast_</name><operator>.</operator><name>Bugs_</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>flatbuffers</name><operator>.</operator><name>*</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal>"unused"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> <specifier>final</specifier> class <name>Bug</name> <super><extends>extends <name>Table</name></extends></super> <block>{
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Bug</name></type> <name>getRootAsBug</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>getRootAsBug</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Bug</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Bug</name></type> <name>getRootAsBug</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>, <parameter><decl><type><name>Bug</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>_bb</name><operator>.</operator><name>order</name></name><argument_list>(<argument><expr><name><name>ByteOrder</name><operator>.</operator><name>LITTLE_ENDIAN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><operator>(</operator><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>__init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>bb_pos</name> <operator>=</operator> <name>_i</name></expr>;</expr_stmt> <expr_stmt><expr><name>bb</name> <operator>=</operator> <name>_bb</name></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <type><name>Bug</name></type> <name>__assign</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>__init</name><argument_list>(<argument><expr><name>_i</name></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <type><name>String</name></type> <name>id</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__string</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>idAsByteBuffer</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>__vector_as_bytebuffer</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>idInByteBuffer</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>__vector_in_bytebuffer</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>String</name></type> <name>opendate</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__string</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>opendateAsByteBuffer</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>__vector_as_bytebuffer</name><argument_list>(<argument><expr><literal>6</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>opendateInByteBuffer</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>__vector_in_bytebuffer</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><literal>6</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>String</name></type> <name>fixdate</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__string</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>fixdateAsByteBuffer</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>__vector_as_bytebuffer</name><argument_list>(<argument><expr><literal>8</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>fixdateInByteBuffer</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>__vector_in_bytebuffer</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><literal>8</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Bugs_</name><operator>.</operator><name>Bug_</name><operator>.</operator><name>Info</name></name></type> <name>buginfo</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>buginfo</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>fast_</name><operator>.</operator><name>Bugs_</name><operator>.</operator><name>Bug_</name><operator>.</operator><name>Info</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Bugs_</name><operator>.</operator><name>Bug_</name><operator>.</operator><name>Info</name></name></type> <name>buginfo</name><parameter_list>(<parameter><decl><type><name><name>fast_</name><operator>.</operator><name>Bugs_</name><operator>.</operator><name>Bug_</name><operator>.</operator><name>Info</name></name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>String</name></type> <name>fixedFile</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__string</name><argument_list>(<argument><expr><call><name>__vector</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>j</name> <operator>*</operator> <literal>4</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>fixedFileLength</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__vector_len</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createBug</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>idOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>opendateOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>fixdateOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>buginfoOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>fixed_fileOffset</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Bug</name><operator>.</operator><name>addFixedFile</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>fixed_fileOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Bug</name><operator>.</operator><name>addBuginfo</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>buginfoOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Bug</name><operator>.</operator><name>addFixdate</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>fixdateOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Bug</name><operator>.</operator><name>addOpendate</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>opendateOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Bug</name><operator>.</operator><name>addId</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>idOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>Bug</name><operator>.</operator><name>endBug</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startBug</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addId</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>0</literal></expr></argument>, <argument><expr><name>idOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addOpendate</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opendateOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>1</literal></expr></argument>, <argument><expr><name>opendateOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addFixdate</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fixdateOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>2</literal></expr></argument>, <argument><expr><name>fixdateOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addBuginfo</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buginfoOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>3</literal></expr></argument>, <argument><expr><name>buginfoOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addFixedFile</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fixedFileOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name>fixedFileOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createFixedFileVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>data</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal>1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal>0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block><expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for> <return>return <expr><call><name><name>builder</name><operator>.</operator><name>endVector</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startFixedFileVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numElems</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name>numElems</name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>endBug</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>endObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>o</name></expr>;</return>
  }</block></function>
}</block></class>

</unit>

<unit xmlns="http://www.srcML.org/srcML/src" xmlns:java="http://www.srcML.org/srcML/java" revision="0.9.5" language="JAVA" filename="Users/yy66/Documents/github.com/yijunyu/demo-concodese/fast/src/main/java/fast_/Bugs_/Bug_/Info.java"><comment>// automatically generated by the FlatBuffers compiler, do not modify</comment>

<package>package <name><name>fast_</name><operator>.</operator><name>Bugs_</name><operator>.</operator><name>Bug_</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>flatbuffers</name><operator>.</operator><name>*</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal>"unused"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> <specifier>final</specifier> class <name>Info</name> <super><extends>extends <name>Table</name></extends></super> <block>{
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Info</name></type> <name>getRootAsInfo</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>getRootAsInfo</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Info</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Info</name></type> <name>getRootAsInfo</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>, <parameter><decl><type><name>Info</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>_bb</name><operator>.</operator><name>order</name></name><argument_list>(<argument><expr><name><name>ByteOrder</name><operator>.</operator><name>LITTLE_ENDIAN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><operator>(</operator><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>__init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>bb_pos</name> <operator>=</operator> <name>_i</name></expr>;</expr_stmt> <expr_stmt><expr><name>bb</name> <operator>=</operator> <name>_bb</name></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <type><name>Info</name></type> <name>__assign</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>__init</name><argument_list>(<argument><expr><name>_i</name></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <type><name>String</name></type> <name>summary</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__string</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>summaryAsByteBuffer</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>__vector_as_bytebuffer</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>summaryInByteBuffer</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>__vector_in_bytebuffer</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>String</name></type> <name>description</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__string</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>descriptionAsByteBuffer</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>__vector_as_bytebuffer</name><argument_list>(<argument><expr><literal>6</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>descriptionInByteBuffer</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>__vector_in_bytebuffer</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><literal>6</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createInfo</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>summaryOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>descriptionOffset</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Info</name><operator>.</operator><name>addDescription</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>descriptionOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Info</name><operator>.</operator><name>addSummary</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>summaryOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>Info</name><operator>.</operator><name>endInfo</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startInfo</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addSummary</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>summaryOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>0</literal></expr></argument>, <argument><expr><name>summaryOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addDescription</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>descriptionOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>1</literal></expr></argument>, <argument><expr><name>descriptionOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>endInfo</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>endObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>o</name></expr>;</return>
  }</block></function>
}</block></class>

</unit>

<unit xmlns="http://www.srcML.org/srcML/src" xmlns:java="http://www.srcML.org/srcML/java" revision="0.9.5" language="JAVA" filename="Users/yy66/Documents/github.com/yijunyu/demo-concodese/fast/src/main/java/fast_/Data.java"><comment>// automatically generated by the FlatBuffers compiler, do not modify</comment>

<package>package <name>fast_</name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>flatbuffers</name><operator>.</operator><name>*</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal>"unused"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> <specifier>final</specifier> class <name>Data</name> <super><extends>extends <name>Table</name></extends></super> <block>{
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Data</name></type> <name>getRootAsData</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>getRootAsData</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Data</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Data</name></type> <name>getRootAsData</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>, <parameter><decl><type><name>Data</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>_bb</name><operator>.</operator><name>order</name></name><argument_list>(<argument><expr><name><name>ByteOrder</name><operator>.</operator><name>LITTLE_ENDIAN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><operator>(</operator><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>__init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>bb_pos</name> <operator>=</operator> <name>_i</name></expr>;</expr_stmt> <expr_stmt><expr><name>bb</name> <operator>=</operator> <name>_bb</name></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <type><name>Data</name></type> <name>__assign</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>__init</name><argument_list>(<argument><expr><name>_i</name></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Data_</name><operator>.</operator><name>Anonymous3</name></name></type> <name>RecordType</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>RecordType</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>fast_</name><operator>.</operator><name>Data_</name><operator>.</operator><name>Anonymous3</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Data_</name><operator>.</operator><name>Anonymous3</name></name></type> <name>RecordType</name><parameter_list>(<parameter><decl><type><name><name>fast_</name><operator>.</operator><name>Data_</name><operator>.</operator><name>Anonymous3</name></name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createData</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>RecordTypeOffset</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Data</name><operator>.</operator><name>addRecordType</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>RecordTypeOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>Data</name><operator>.</operator><name>endData</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startData</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addRecordType</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>RecordTypeOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>0</literal></expr></argument>, <argument><expr><name>RecordTypeOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>endData</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>endObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>o</name></expr>;</return>
  }</block></function>
}</block></class>

</unit>

<unit xmlns="http://www.srcML.org/srcML/src" xmlns:java="http://www.srcML.org/srcML/java" revision="0.9.5" language="JAVA" filename="Users/yy66/Documents/github.com/yijunyu/demo-concodese/fast/src/main/java/fast_/Data_/Anonymous3.java"><comment>// automatically generated by the FlatBuffers compiler, do not modify</comment>

<package>package <name><name>fast_</name><operator>.</operator><name>Data_</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>flatbuffers</name><operator>.</operator><name>*</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal>"unused"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> <specifier>final</specifier> class <name>Anonymous3</name> <super><extends>extends <name>Table</name></extends></super> <block>{
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Anonymous3</name></type> <name>getRootAsAnonymous3</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>getRootAsAnonymous3</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Anonymous3</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Anonymous3</name></type> <name>getRootAsAnonymous3</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>, <parameter><decl><type><name>Anonymous3</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>_bb</name><operator>.</operator><name>order</name></name><argument_list>(<argument><expr><name><name>ByteOrder</name><operator>.</operator><name>LITTLE_ENDIAN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><operator>(</operator><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>__init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>bb_pos</name> <operator>=</operator> <name>_i</name></expr>;</expr_stmt> <expr_stmt><expr><name>bb</name> <operator>=</operator> <name>_bb</name></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <type><name>Anonymous3</name></type> <name>__assign</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>__init</name><argument_list>(<argument><expr><name>_i</name></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Element</name></name></type> <name>element</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>element</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>fast_</name><operator>.</operator><name>Element</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Element</name></name></type> <name>element</name><parameter_list>(<parameter><decl><type><name><name>fast_</name><operator>.</operator><name>Element</name></name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Log</name></name></type> <name>log</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>log</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>fast_</name><operator>.</operator><name>Log</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Log</name></name></type> <name>log</name><parameter_list>(<parameter><decl><type><name><name>fast_</name><operator>.</operator><name>Log</name></name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Delta</name></name></type> <name>delta</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>delta</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>fast_</name><operator>.</operator><name>Delta</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Delta</name></name></type> <name>delta</name><parameter_list>(<parameter><decl><type><name><name>fast_</name><operator>.</operator><name>Delta</name></name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Pairs</name></name></type> <name>pairs</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>pairs</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>fast_</name><operator>.</operator><name>Pairs</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Pairs</name></name></type> <name>pairs</name><parameter_list>(<parameter><decl><type><name><name>fast_</name><operator>.</operator><name>Pairs</name></name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Slices</name></name></type> <name>slices</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>slices</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>fast_</name><operator>.</operator><name>Slices</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Slices</name></name></type> <name>slices</name><parameter_list>(<parameter><decl><type><name><name>fast_</name><operator>.</operator><name>Slices</name></name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Bugs</name></name></type> <name>bugs</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>bugs</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>fast_</name><operator>.</operator><name>Bugs</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Bugs</name></name></type> <name>bugs</name><parameter_list>(<parameter><decl><type><name><name>fast_</name><operator>.</operator><name>Bugs</name></name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>14</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Graph</name></name></type> <name>graph</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>graph</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>fast_</name><operator>.</operator><name>Graph</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Graph</name></name></type> <name>graph</name><parameter_list>(<parameter><decl><type><name><name>fast_</name><operator>.</operator><name>Graph</name></name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createAnonymous3</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>elementOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>logOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>deltaOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>pairsOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>slicesOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>bugsOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>graphOffset</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Anonymous3</name><operator>.</operator><name>addGraph</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>graphOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Anonymous3</name><operator>.</operator><name>addBugs</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>bugsOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Anonymous3</name><operator>.</operator><name>addSlices</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>slicesOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Anonymous3</name><operator>.</operator><name>addPairs</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>pairsOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Anonymous3</name><operator>.</operator><name>addDelta</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>deltaOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Anonymous3</name><operator>.</operator><name>addLog</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>logOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Anonymous3</name><operator>.</operator><name>addElement</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>elementOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>Anonymous3</name><operator>.</operator><name>endAnonymous3</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startAnonymous3</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addElement</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>elementOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>0</literal></expr></argument>, <argument><expr><name>elementOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addLog</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>logOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>1</literal></expr></argument>, <argument><expr><name>logOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addDelta</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>deltaOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>2</literal></expr></argument>, <argument><expr><name>deltaOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addPairs</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pairsOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>3</literal></expr></argument>, <argument><expr><name>pairsOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addSlices</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slicesOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name>slicesOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addBugs</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bugsOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>5</literal></expr></argument>, <argument><expr><name>bugsOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addGraph</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>graphOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>6</literal></expr></argument>, <argument><expr><name>graphOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>endAnonymous3</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>endObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>o</name></expr>;</return>
  }</block></function>
}</block></class>

</unit>

<unit xmlns="http://www.srcML.org/srcML/src" xmlns:java="http://www.srcML.org/srcML/java" revision="0.9.5" language="JAVA" filename="Users/yy66/Documents/github.com/yijunyu/demo-concodese/fast/src/main/java/fast_/Delta.java"><comment>// automatically generated by the FlatBuffers compiler, do not modify</comment>

<package>package <name>fast_</name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>flatbuffers</name><operator>.</operator><name>*</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal>"unused"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> <specifier>final</specifier> class <name>Delta</name> <super><extends>extends <name>Table</name></extends></super> <block>{
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Delta</name></type> <name>getRootAsDelta</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>getRootAsDelta</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Delta</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Delta</name></type> <name>getRootAsDelta</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>, <parameter><decl><type><name>Delta</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>_bb</name><operator>.</operator><name>order</name></name><argument_list>(<argument><expr><name><name>ByteOrder</name><operator>.</operator><name>LITTLE_ENDIAN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><operator>(</operator><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>__init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>bb_pos</name> <operator>=</operator> <name>_i</name></expr>;</expr_stmt> <expr_stmt><expr><name>bb</name> <operator>=</operator> <name>_bb</name></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <type><name>Delta</name></type> <name>__assign</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>__init</name><argument_list>(<argument><expr><name>_i</name></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <type><name>String</name></type> <name>src</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__string</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>srcAsByteBuffer</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>__vector_as_bytebuffer</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>srcInByteBuffer</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>__vector_in_bytebuffer</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>String</name></type> <name>dst</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__string</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>dstAsByteBuffer</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>__vector_as_bytebuffer</name><argument_list>(<argument><expr><literal>6</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>dstInByteBuffer</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>__vector_in_bytebuffer</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><literal>6</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Delta_</name><operator>.</operator><name>Diff</name></name></type> <name>diff</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>diff</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>fast_</name><operator>.</operator><name>Delta_</name><operator>.</operator><name>Diff</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Delta_</name><operator>.</operator><name>Diff</name></name></type> <name>diff</name><parameter_list>(<parameter><decl><type><name><name>fast_</name><operator>.</operator><name>Delta_</name><operator>.</operator><name>Diff</name></name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><call><name>__vector</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>j</name> <operator>*</operator> <literal>4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>diffLength</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__vector_len</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createDelta</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>srcOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>dstOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>diffOffset</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Delta</name><operator>.</operator><name>addDiff</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>diffOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Delta</name><operator>.</operator><name>addDst</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>dstOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Delta</name><operator>.</operator><name>addSrc</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>srcOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>Delta</name><operator>.</operator><name>endDelta</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startDelta</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addSrc</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>0</literal></expr></argument>, <argument><expr><name>srcOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addDst</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>1</literal></expr></argument>, <argument><expr><name>dstOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addDiff</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>diffOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>2</literal></expr></argument>, <argument><expr><name>diffOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createDiffVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>data</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal>1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal>0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block><expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for> <return>return <expr><call><name><name>builder</name><operator>.</operator><name>endVector</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startDiffVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numElems</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name>numElems</name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>endDelta</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>endObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>o</name></expr>;</return>
  }</block></function>
}</block></class>

</unit>

<unit xmlns="http://www.srcML.org/srcML/src" xmlns:java="http://www.srcML.org/srcML/java" revision="0.9.5" language="JAVA" filename="Users/yy66/Documents/github.com/yijunyu/demo-concodese/fast/src/main/java/fast_/Delta_/Diff.java"><comment>// automatically generated by the FlatBuffers compiler, do not modify</comment>

<package>package <name><name>fast_</name><operator>.</operator><name>Delta_</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>flatbuffers</name><operator>.</operator><name>*</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal>"unused"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> <specifier>final</specifier> class <name>Diff</name> <super><extends>extends <name>Table</name></extends></super> <block>{
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Diff</name></type> <name>getRootAsDiff</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>getRootAsDiff</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Diff</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Diff</name></type> <name>getRootAsDiff</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>, <parameter><decl><type><name>Diff</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>_bb</name><operator>.</operator><name>order</name></name><argument_list>(<argument><expr><name><name>ByteOrder</name><operator>.</operator><name>LITTLE_ENDIAN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><operator>(</operator><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>__init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>bb_pos</name> <operator>=</operator> <name>_i</name></expr>;</expr_stmt> <expr_stmt><expr><name>bb</name> <operator>=</operator> <name>_bb</name></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <type><name>Diff</name></type> <name>__assign</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>__init</name><argument_list>(<argument><expr><name>_i</name></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <type><name>int</name></type> <name>type</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Delta_</name><operator>.</operator><name>Diff_</name><operator>.</operator><name>Anonymous2</name></name></type> <name>delta</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>delta</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>fast_</name><operator>.</operator><name>Delta_</name><operator>.</operator><name>Diff_</name><operator>.</operator><name>Anonymous2</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Delta_</name><operator>.</operator><name>Diff_</name><operator>.</operator><name>Anonymous2</name></name></type> <name>delta</name><parameter_list>(<parameter><decl><type><name><name>fast_</name><operator>.</operator><name>Delta_</name><operator>.</operator><name>Diff_</name><operator>.</operator><name>Anonymous2</name></name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createDiff</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>deltaOffset</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Diff</name><operator>.</operator><name>addDelta</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>deltaOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Diff</name><operator>.</operator><name>addType</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>Diff</name><operator>.</operator><name>endDiff</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startDiff</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addType</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addInt</name></name><argument_list>(<argument><expr><literal>0</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addDelta</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>deltaOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>1</literal></expr></argument>, <argument><expr><name>deltaOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>endDiff</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>endObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>o</name></expr>;</return>
  }</block></function>
}</block></class>

</unit>

<unit xmlns="http://www.srcML.org/srcML/src" xmlns:java="http://www.srcML.org/srcML/java" revision="0.9.5" language="JAVA" filename="Users/yy66/Documents/github.com/yijunyu/demo-concodese/fast/src/main/java/fast_/Delta_/Diff_/Add.java"><comment>// automatically generated by the FlatBuffers compiler, do not modify</comment>

<package>package <name><name>fast_</name><operator>.</operator><name>Delta_</name><operator>.</operator><name>Diff_</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>flatbuffers</name><operator>.</operator><name>*</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal>"unused"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> <specifier>final</specifier> class <name>Add</name> <super><extends>extends <name>Table</name></extends></super> <block>{
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Add</name></type> <name>getRootAsAdd</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>getRootAsAdd</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Add</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Add</name></type> <name>getRootAsAdd</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>, <parameter><decl><type><name>Add</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>_bb</name><operator>.</operator><name>order</name></name><argument_list>(<argument><expr><name><name>ByteOrder</name><operator>.</operator><name>LITTLE_ENDIAN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><operator>(</operator><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>__init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>bb_pos</name> <operator>=</operator> <name>_i</name></expr>;</expr_stmt> <expr_stmt><expr><name>bb</name> <operator>=</operator> <name>_bb</name></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <type><name>Add</name></type> <name>__assign</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>__init</name><argument_list>(<argument><expr><name>_i</name></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <type><name>int</name></type> <name>src</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>dst</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>position</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createAdd</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>src</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>dst</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Add</name><operator>.</operator><name>addPosition</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Add</name><operator>.</operator><name>addDst</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Add</name><operator>.</operator><name>addSrc</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>Add</name><operator>.</operator><name>endAdd</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startAdd</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addSrc</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addInt</name></name><argument_list>(<argument><expr><literal>0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addDst</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addInt</name></name><argument_list>(<argument><expr><literal>1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addPosition</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addInt</name></name><argument_list>(<argument><expr><literal>2</literal></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>endAdd</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>endObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>o</name></expr>;</return>
  }</block></function>
}</block></class>

</unit>

<unit xmlns="http://www.srcML.org/srcML/src" xmlns:java="http://www.srcML.org/srcML/java" revision="0.9.5" language="JAVA" filename="Users/yy66/Documents/github.com/yijunyu/demo-concodese/fast/src/main/java/fast_/Delta_/Diff_/Anonymous2.java"><comment>// automatically generated by the FlatBuffers compiler, do not modify</comment>

<package>package <name><name>fast_</name><operator>.</operator><name>Delta_</name><operator>.</operator><name>Diff_</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>flatbuffers</name><operator>.</operator><name>*</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal>"unused"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> <specifier>final</specifier> class <name>Anonymous2</name> <super><extends>extends <name>Table</name></extends></super> <block>{
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Anonymous2</name></type> <name>getRootAsAnonymous2</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>getRootAsAnonymous2</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Anonymous2</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Anonymous2</name></type> <name>getRootAsAnonymous2</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>, <parameter><decl><type><name>Anonymous2</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>_bb</name><operator>.</operator><name>order</name></name><argument_list>(<argument><expr><name><name>ByteOrder</name><operator>.</operator><name>LITTLE_ENDIAN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><operator>(</operator><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>__init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>bb_pos</name> <operator>=</operator> <name>_i</name></expr>;</expr_stmt> <expr_stmt><expr><name>bb</name> <operator>=</operator> <name>_bb</name></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <type><name>Anonymous2</name></type> <name>__assign</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>__init</name><argument_list>(<argument><expr><name>_i</name></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <type><name>Match</name></type> <name>match</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>match</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Match</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>Match</name></type> <name>match</name><parameter_list>(<parameter><decl><type><name>Match</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>Add</name></type> <name>add</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>add</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Add</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>Add</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>Add</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>Del</name></type> <name>del</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>del</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Del</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>Del</name></type> <name>del</name><parameter_list>(<parameter><decl><type><name>Del</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>Move</name></type> <name>move</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>move</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Move</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>Move</name></type> <name>move</name><parameter_list>(<parameter><decl><type><name>Move</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>Update</name></type> <name>update</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>update</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Update</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>Update</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>Update</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createAnonymous2</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>matchOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>addOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>delOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>moveOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>updateOffset</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Anonymous2</name><operator>.</operator><name>addUpdate</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>updateOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Anonymous2</name><operator>.</operator><name>addMove</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>moveOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Anonymous2</name><operator>.</operator><name>addDel</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>delOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Anonymous2</name><operator>.</operator><name>addAdd</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>addOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Anonymous2</name><operator>.</operator><name>addMatch</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>matchOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>Anonymous2</name><operator>.</operator><name>endAnonymous2</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startAnonymous2</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addMatch</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>matchOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>0</literal></expr></argument>, <argument><expr><name>matchOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addAdd</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>addOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>1</literal></expr></argument>, <argument><expr><name>addOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addDel</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>delOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>2</literal></expr></argument>, <argument><expr><name>delOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addMove</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>moveOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>3</literal></expr></argument>, <argument><expr><name>moveOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addUpdate</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>updateOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name>updateOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>endAnonymous2</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>endObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>o</name></expr>;</return>
  }</block></function>
}</block></class>

</unit>

<unit xmlns="http://www.srcML.org/srcML/src" xmlns:java="http://www.srcML.org/srcML/java" revision="0.9.5" language="JAVA" filename="Users/yy66/Documents/github.com/yijunyu/demo-concodese/fast/src/main/java/fast_/Delta_/Diff_/Del.java"><comment>// automatically generated by the FlatBuffers compiler, do not modify</comment>

<package>package <name><name>fast_</name><operator>.</operator><name>Delta_</name><operator>.</operator><name>Diff_</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>flatbuffers</name><operator>.</operator><name>*</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal>"unused"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> <specifier>final</specifier> class <name>Del</name> <super><extends>extends <name>Table</name></extends></super> <block>{
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Del</name></type> <name>getRootAsDel</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>getRootAsDel</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Del</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Del</name></type> <name>getRootAsDel</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>, <parameter><decl><type><name>Del</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>_bb</name><operator>.</operator><name>order</name></name><argument_list>(<argument><expr><name><name>ByteOrder</name><operator>.</operator><name>LITTLE_ENDIAN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><operator>(</operator><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>__init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>bb_pos</name> <operator>=</operator> <name>_i</name></expr>;</expr_stmt> <expr_stmt><expr><name>bb</name> <operator>=</operator> <name>_bb</name></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <type><name>Del</name></type> <name>__assign</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>__init</name><argument_list>(<argument><expr><name>_i</name></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <type><name>int</name></type> <name>src</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createDel</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>src</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Del</name><operator>.</operator><name>addSrc</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>Del</name><operator>.</operator><name>endDel</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startDel</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addSrc</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addInt</name></name><argument_list>(<argument><expr><literal>0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>endDel</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>endObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>o</name></expr>;</return>
  }</block></function>
}</block></class>

</unit>

<unit xmlns="http://www.srcML.org/srcML/src" xmlns:java="http://www.srcML.org/srcML/java" revision="0.9.5" language="JAVA" filename="Users/yy66/Documents/github.com/yijunyu/demo-concodese/fast/src/main/java/fast_/Delta_/Diff_/DeltaType.java"><comment>// automatically generated by the FlatBuffers compiler, do not modify</comment>

<package>package <name><name>fast_</name><operator>.</operator><name>Delta_</name><operator>.</operator><name>Diff_</name></name>;</package>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>DeltaType</name> <block>{
  <constructor><specifier>private</specifier> <name>DeltaType</name><parameter_list>()</parameter_list> <block>{ }</block></constructor>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>MATCH</name> <init>= <expr><literal>0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ADD</name> <init>= <expr><literal>1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DEL</name> <init>= <expr><literal>2</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>MOVE</name> <init>= <expr><literal>3</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>UPDATE</name> <init>= <expr><literal>4</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>names</name> <init>= <expr><block>{ <expr><literal>"MATCH"</literal></expr>, <expr><literal>"ADD"</literal></expr>, <expr><literal>"DEL"</literal></expr>, <expr><literal>"MOVE"</literal></expr>, <expr><literal>"UPDATE"</literal></expr>, }</block></expr></init></decl>;</decl_stmt>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name><name>names</name><index>[<expr><name>e</name></expr>]</index></name></expr>;</return> }</block></function>
}</block></class>

</unit>

<unit xmlns="http://www.srcML.org/srcML/src" xmlns:java="http://www.srcML.org/srcML/java" revision="0.9.5" language="JAVA" filename="Users/yy66/Documents/github.com/yijunyu/demo-concodese/fast/src/main/java/fast_/Delta_/Diff_/Match.java"><comment>// automatically generated by the FlatBuffers compiler, do not modify</comment>

<package>package <name><name>fast_</name><operator>.</operator><name>Delta_</name><operator>.</operator><name>Diff_</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>flatbuffers</name><operator>.</operator><name>*</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal>"unused"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> <specifier>final</specifier> class <name>Match</name> <super><extends>extends <name>Table</name></extends></super> <block>{
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Match</name></type> <name>getRootAsMatch</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>getRootAsMatch</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Match</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Match</name></type> <name>getRootAsMatch</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>, <parameter><decl><type><name>Match</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>_bb</name><operator>.</operator><name>order</name></name><argument_list>(<argument><expr><name><name>ByteOrder</name><operator>.</operator><name>LITTLE_ENDIAN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><operator>(</operator><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>__init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>bb_pos</name> <operator>=</operator> <name>_i</name></expr>;</expr_stmt> <expr_stmt><expr><name>bb</name> <operator>=</operator> <name>_bb</name></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <type><name>Match</name></type> <name>__assign</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>__init</name><argument_list>(<argument><expr><name>_i</name></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <type><name>int</name></type> <name>src</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>dst</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createMatch</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>src</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>dst</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Match</name><operator>.</operator><name>addDst</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Match</name><operator>.</operator><name>addSrc</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>Match</name><operator>.</operator><name>endMatch</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startMatch</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addSrc</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addInt</name></name><argument_list>(<argument><expr><literal>0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addDst</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addInt</name></name><argument_list>(<argument><expr><literal>1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>endMatch</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>endObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>o</name></expr>;</return>
  }</block></function>
}</block></class>

</unit>

<unit xmlns="http://www.srcML.org/srcML/src" xmlns:java="http://www.srcML.org/srcML/java" revision="0.9.5" language="JAVA" filename="Users/yy66/Documents/github.com/yijunyu/demo-concodese/fast/src/main/java/fast_/Delta_/Diff_/Move.java"><comment>// automatically generated by the FlatBuffers compiler, do not modify</comment>

<package>package <name><name>fast_</name><operator>.</operator><name>Delta_</name><operator>.</operator><name>Diff_</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>flatbuffers</name><operator>.</operator><name>*</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal>"unused"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> <specifier>final</specifier> class <name>Move</name> <super><extends>extends <name>Table</name></extends></super> <block>{
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Move</name></type> <name>getRootAsMove</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>getRootAsMove</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Move</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Move</name></type> <name>getRootAsMove</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>, <parameter><decl><type><name>Move</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>_bb</name><operator>.</operator><name>order</name></name><argument_list>(<argument><expr><name><name>ByteOrder</name><operator>.</operator><name>LITTLE_ENDIAN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><operator>(</operator><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>__init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>bb_pos</name> <operator>=</operator> <name>_i</name></expr>;</expr_stmt> <expr_stmt><expr><name>bb</name> <operator>=</operator> <name>_bb</name></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <type><name>Move</name></type> <name>__assign</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>__init</name><argument_list>(<argument><expr><name>_i</name></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <type><name>int</name></type> <name>src</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>dst</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>position</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createMove</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>src</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>dst</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Move</name><operator>.</operator><name>addPosition</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Move</name><operator>.</operator><name>addDst</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Move</name><operator>.</operator><name>addSrc</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>Move</name><operator>.</operator><name>endMove</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startMove</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addSrc</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addInt</name></name><argument_list>(<argument><expr><literal>0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addDst</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addInt</name></name><argument_list>(<argument><expr><literal>1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addPosition</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addInt</name></name><argument_list>(<argument><expr><literal>2</literal></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>endMove</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>endObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>o</name></expr>;</return>
  }</block></function>
}</block></class>

</unit>

<unit xmlns="http://www.srcML.org/srcML/src" xmlns:java="http://www.srcML.org/srcML/java" revision="0.9.5" language="JAVA" filename="Users/yy66/Documents/github.com/yijunyu/demo-concodese/fast/src/main/java/fast_/Delta_/Diff_/Update.java"><comment>// automatically generated by the FlatBuffers compiler, do not modify</comment>

<package>package <name><name>fast_</name><operator>.</operator><name>Delta_</name><operator>.</operator><name>Diff_</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>flatbuffers</name><operator>.</operator><name>*</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal>"unused"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> <specifier>final</specifier> class <name>Update</name> <super><extends>extends <name>Table</name></extends></super> <block>{
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Update</name></type> <name>getRootAsUpdate</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>getRootAsUpdate</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Update</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Update</name></type> <name>getRootAsUpdate</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>, <parameter><decl><type><name>Update</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>_bb</name><operator>.</operator><name>order</name></name><argument_list>(<argument><expr><name><name>ByteOrder</name><operator>.</operator><name>LITTLE_ENDIAN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><operator>(</operator><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>__init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>bb_pos</name> <operator>=</operator> <name>_i</name></expr>;</expr_stmt> <expr_stmt><expr><name>bb</name> <operator>=</operator> <name>_bb</name></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <type><name>Update</name></type> <name>__assign</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>__init</name><argument_list>(<argument><expr><name>_i</name></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <type><name>int</name></type> <name>src</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>dst</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createUpdate</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>src</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>dst</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Update</name><operator>.</operator><name>addDst</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Update</name><operator>.</operator><name>addSrc</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>Update</name><operator>.</operator><name>endUpdate</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startUpdate</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addSrc</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addInt</name></name><argument_list>(<argument><expr><literal>0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addDst</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addInt</name></name><argument_list>(<argument><expr><literal>1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>endUpdate</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>endObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>o</name></expr>;</return>
  }</block></function>
}</block></class>

</unit>

<unit xmlns="http://www.srcML.org/srcML/src" xmlns:java="http://www.srcML.org/srcML/java" revision="0.9.5" language="JAVA" filename="Users/yy66/Documents/github.com/yijunyu/demo-concodese/fast/src/main/java/fast_/Element.java"><comment>// automatically generated by the FlatBuffers compiler, do not modify</comment>

<package>package <name>fast_</name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>flatbuffers</name><operator>.</operator><name>*</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal>"unused"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> <specifier>final</specifier> class <name>Element</name> <super><extends>extends <name>Table</name></extends></super> <block>{
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Element</name></type> <name>getRootAsElement</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>getRootAsElement</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Element</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Element</name></type> <name>getRootAsElement</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>, <parameter><decl><type><name>Element</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>_bb</name><operator>.</operator><name>order</name></name><argument_list>(<argument><expr><name><name>ByteOrder</name><operator>.</operator><name>LITTLE_ENDIAN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><operator>(</operator><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>__init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>bb_pos</name> <operator>=</operator> <name>_i</name></expr>;</expr_stmt> <expr_stmt><expr><name>bb</name> <operator>=</operator> <name>_bb</name></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <type><name>Element</name></type> <name>__assign</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>__init</name><argument_list>(<argument><expr><name>_i</name></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Element_</name><operator>.</operator><name>Anonymous0</name></name></type> <name>type</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>type</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>fast_</name><operator>.</operator><name>Element_</name><operator>.</operator><name>Anonymous0</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Element_</name><operator>.</operator><name>Anonymous0</name></name></type> <name>type</name><parameter_list>(<parameter><decl><type><name><name>fast_</name><operator>.</operator><name>Element_</name><operator>.</operator><name>Anonymous0</name></name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>String</name></type> <name>text</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__string</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>textAsByteBuffer</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>__vector_as_bytebuffer</name><argument_list>(<argument><expr><literal>6</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>textInByteBuffer</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>__vector_in_bytebuffer</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><literal>6</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>pos</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>length</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>Element</name></type> <name>child</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>child</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Element</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>Element</name></type> <name>child</name><parameter_list>(<parameter><decl><type><name>Element</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><call><name>__vector</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>j</name> <operator>*</operator> <literal>4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>childLength</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__vector_len</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>String</name></type> <name>tail</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>14</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__string</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>tailAsByteBuffer</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>__vector_as_bytebuffer</name><argument_list>(<argument><expr><literal>14</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>tailInByteBuffer</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>__vector_in_bytebuffer</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><literal>14</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Element_</name><operator>.</operator><name>Anonymous1</name></name></type> <name>extra</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>extra</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>fast_</name><operator>.</operator><name>Element_</name><operator>.</operator><name>Anonymous1</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Element_</name><operator>.</operator><name>Anonymous1</name></name></type> <name>extra</name><parameter_list>(<parameter><decl><type><name><name>fast_</name><operator>.</operator><name>Element_</name><operator>.</operator><name>Anonymous1</name></name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>line</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>18</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>column</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>float</name></type> <name>label</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>22</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>bb</name><operator>.</operator><name>getFloat</name></name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0.0f</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>change</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>24</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>keep</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>26</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><literal>0</literal><operator>!=</operator><call><name><name>bb</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>false</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>id</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>28</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createElement</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>typeOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>textOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>childOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>tailOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>extraOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>column</name></decl></parameter>,
      <parameter><decl><type><name>float</name></type> <name>label</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>change</name></decl></parameter>,
      <parameter><decl><type><name>boolean</name></type> <name>keep</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Element</name><operator>.</operator><name>addId</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Element</name><operator>.</operator><name>addChange</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>change</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Element</name><operator>.</operator><name>addLabel</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Element</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Element</name><operator>.</operator><name>addLine</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Element</name><operator>.</operator><name>addExtra</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>extraOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Element</name><operator>.</operator><name>addTail</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>tailOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Element</name><operator>.</operator><name>addChild</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>childOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Element</name><operator>.</operator><name>addLength</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Element</name><operator>.</operator><name>addPos</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Element</name><operator>.</operator><name>addText</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>textOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Element</name><operator>.</operator><name>addType</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>typeOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Element</name><operator>.</operator><name>addKeep</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>keep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>Element</name><operator>.</operator><name>endElement</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startElement</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addType</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>typeOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>0</literal></expr></argument>, <argument><expr><name>typeOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addText</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>textOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>1</literal></expr></argument>, <argument><expr><name>textOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addPos</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addInt</name></name><argument_list>(<argument><expr><literal>2</literal></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addLength</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addInt</name></name><argument_list>(<argument><expr><literal>3</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addChild</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>childOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name>childOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createChildVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>data</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal>1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal>0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block><expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for> <return>return <expr><call><name><name>builder</name><operator>.</operator><name>endVector</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startChildVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numElems</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name>numElems</name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addTail</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tailOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>5</literal></expr></argument>, <argument><expr><name>tailOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addExtra</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>extraOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>6</literal></expr></argument>, <argument><expr><name>extraOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addLine</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addInt</name></name><argument_list>(<argument><expr><literal>7</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addColumn</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>column</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addInt</name></name><argument_list>(<argument><expr><literal>8</literal></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addLabel</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>label</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addFloat</name></name><argument_list>(<argument><expr><literal>9</literal></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><literal>0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addChange</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>change</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addInt</name></name><argument_list>(<argument><expr><literal>10</literal></expr></argument>, <argument><expr><name>change</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addKeep</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>keep</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addBoolean</name></name><argument_list>(<argument><expr><literal>11</literal></expr></argument>, <argument><expr><name>keep</name></expr></argument>, <argument><expr><literal>false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addId</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addInt</name></name><argument_list>(<argument><expr><literal>12</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>endElement</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>endObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>o</name></expr>;</return>
  }</block></function>
}</block></class>

</unit>

<unit xmlns="http://www.srcML.org/srcML/src" xmlns:java="http://www.srcML.org/srcML/java" revision="0.9.5" language="JAVA" filename="Users/yy66/Documents/github.com/yijunyu/demo-concodese/fast/src/main/java/fast_/Element_/Anonymous0.java"><comment>// automatically generated by the FlatBuffers compiler, do not modify</comment>

<package>package <name><name>fast_</name><operator>.</operator><name>Element_</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>flatbuffers</name><operator>.</operator><name>*</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal>"unused"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> <specifier>final</specifier> class <name>Anonymous0</name> <super><extends>extends <name>Table</name></extends></super> <block>{
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Anonymous0</name></type> <name>getRootAsAnonymous0</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>getRootAsAnonymous0</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Anonymous0</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Anonymous0</name></type> <name>getRootAsAnonymous0</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>, <parameter><decl><type><name>Anonymous0</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>_bb</name><operator>.</operator><name>order</name></name><argument_list>(<argument><expr><name><name>ByteOrder</name><operator>.</operator><name>LITTLE_ENDIAN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><operator>(</operator><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>__init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>bb_pos</name> <operator>=</operator> <name>_i</name></expr>;</expr_stmt> <expr_stmt><expr><name>bb</name> <operator>=</operator> <name>_bb</name></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <type><name>Anonymous0</name></type> <name>__assign</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>__init</name><argument_list>(<argument><expr><name>_i</name></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <type><name>int</name></type> <name>srcmlKind</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>smaliKind</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>python3Kind</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>solidityKind</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createAnonymous0</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>srcml_kind</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>smali_kind</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>python3_kind</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>solidity_kind</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Anonymous0</name><operator>.</operator><name>addSolidityKind</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>solidity_kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Anonymous0</name><operator>.</operator><name>addPython3Kind</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>python3_kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Anonymous0</name><operator>.</operator><name>addSmaliKind</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>smali_kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Anonymous0</name><operator>.</operator><name>addSrcmlKind</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>srcml_kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>Anonymous0</name><operator>.</operator><name>endAnonymous0</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startAnonymous0</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addSrcmlKind</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcmlKind</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addInt</name></name><argument_list>(<argument><expr><literal>0</literal></expr></argument>, <argument><expr><name>srcmlKind</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addSmaliKind</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>smaliKind</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addInt</name></name><argument_list>(<argument><expr><literal>1</literal></expr></argument>, <argument><expr><name>smaliKind</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addPython3Kind</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>python3Kind</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addInt</name></name><argument_list>(<argument><expr><literal>2</literal></expr></argument>, <argument><expr><name>python3Kind</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addSolidityKind</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>solidityKind</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addInt</name></name><argument_list>(<argument><expr><literal>3</literal></expr></argument>, <argument><expr><name>solidityKind</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>endAnonymous0</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>endObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>o</name></expr>;</return>
  }</block></function>
}</block></class>

</unit>

<unit xmlns="http://www.srcML.org/srcML/src" xmlns:java="http://www.srcML.org/srcML/java" revision="0.9.5" language="JAVA" filename="Users/yy66/Documents/github.com/yijunyu/demo-concodese/fast/src/main/java/fast_/Element_/Anonymous1.java"><comment>// automatically generated by the FlatBuffers compiler, do not modify</comment>

<package>package <name><name>fast_</name><operator>.</operator><name>Element_</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>flatbuffers</name><operator>.</operator><name>*</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal>"unused"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> <specifier>final</specifier> class <name>Anonymous1</name> <super><extends>extends <name>Table</name></extends></super> <block>{
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Anonymous1</name></type> <name>getRootAsAnonymous1</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>getRootAsAnonymous1</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Anonymous1</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Anonymous1</name></type> <name>getRootAsAnonymous1</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>, <parameter><decl><type><name>Anonymous1</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>_bb</name><operator>.</operator><name>order</name></name><argument_list>(<argument><expr><name><name>ByteOrder</name><operator>.</operator><name>LITTLE_ENDIAN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><operator>(</operator><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>__init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>bb_pos</name> <operator>=</operator> <name>_i</name></expr>;</expr_stmt> <expr_stmt><expr><name>bb</name> <operator>=</operator> <name>_bb</name></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <type><name>Anonymous1</name></type> <name>__assign</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>__init</name><argument_list>(<argument><expr><name>_i</name></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <type><name>Unit</name></type> <name>unit</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>unit</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Unit</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>Unit</name></type> <name>unit</name><parameter_list>(<parameter><decl><type><name>Unit</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>Literal</name></type> <name>literal</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>literal</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Literal</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>Literal</name></type> <name>literal</name><parameter_list>(<parameter><decl><type><name>Literal</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createAnonymous1</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>unitOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>literalOffset</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Anonymous1</name><operator>.</operator><name>addLiteral</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>literalOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Anonymous1</name><operator>.</operator><name>addUnit</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>unitOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>Anonymous1</name><operator>.</operator><name>endAnonymous1</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startAnonymous1</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addUnit</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unitOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>0</literal></expr></argument>, <argument><expr><name>unitOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addLiteral</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>literalOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>1</literal></expr></argument>, <argument><expr><name>literalOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>endAnonymous1</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>endObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>o</name></expr>;</return>
  }</block></function>
}</block></class>

</unit>

<unit xmlns="http://www.srcML.org/srcML/src" xmlns:java="http://www.srcML.org/srcML/java" revision="0.9.5" language="JAVA" filename="Users/yy66/Documents/github.com/yijunyu/demo-concodese/fast/src/main/java/fast_/Element_/DiffType.java"><comment>// automatically generated by the FlatBuffers compiler, do not modify</comment>

<package>package <name><name>fast_</name><operator>.</operator><name>Element_</name></name>;</package>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>DiffType</name> <block>{
  <constructor><specifier>private</specifier> <name>DiffType</name><parameter_list>()</parameter_list> <block>{ }</block></constructor>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>MATCHED</name> <init>= <expr><literal>0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ADDED</name> <init>= <expr><literal>1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DELETED</name> <init>= <expr><literal>2</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CHANGED_FROM</name> <init>= <expr><literal>3</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CHANGED_TO</name> <init>= <expr><literal>4</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>names</name> <init>= <expr><block>{ <expr><literal>"MATCHED"</literal></expr>, <expr><literal>"ADDED"</literal></expr>, <expr><literal>"DELETED"</literal></expr>, <expr><literal>"CHANGED_FROM"</literal></expr>, <expr><literal>"CHANGED_TO"</literal></expr>, }</block></expr></init></decl>;</decl_stmt>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name><name>names</name><index>[<expr><name>e</name></expr>]</index></name></expr>;</return> }</block></function>
}</block></class>

</unit>

<unit xmlns="http://www.srcML.org/srcML/src" xmlns:java="http://www.srcML.org/srcML/java" revision="0.9.5" language="JAVA" filename="Users/yy66/Documents/github.com/yijunyu/demo-concodese/fast/src/main/java/fast_/Element_/Literal.java"><comment>// automatically generated by the FlatBuffers compiler, do not modify</comment>

<package>package <name><name>fast_</name><operator>.</operator><name>Element_</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>flatbuffers</name><operator>.</operator><name>*</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal>"unused"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> <specifier>final</specifier> class <name>Literal</name> <super><extends>extends <name>Table</name></extends></super> <block>{
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Literal</name></type> <name>getRootAsLiteral</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>getRootAsLiteral</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Literal</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Literal</name></type> <name>getRootAsLiteral</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>, <parameter><decl><type><name>Literal</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>_bb</name><operator>.</operator><name>order</name></name><argument_list>(<argument><expr><name><name>ByteOrder</name><operator>.</operator><name>LITTLE_ENDIAN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><operator>(</operator><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>__init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>bb_pos</name> <operator>=</operator> <name>_i</name></expr>;</expr_stmt> <expr_stmt><expr><name>bb</name> <operator>=</operator> <name>_bb</name></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <type><name>Literal</name></type> <name>__assign</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>__init</name><argument_list>(<argument><expr><name>_i</name></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <type><name>int</name></type> <name>type</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createLiteral</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Literal</name><operator>.</operator><name>addType</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>Literal</name><operator>.</operator><name>endLiteral</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startLiteral</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addType</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addInt</name></name><argument_list>(<argument><expr><literal>0</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>endLiteral</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>endObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>o</name></expr>;</return>
  }</block></function>
}</block></class>

</unit>

<unit xmlns="http://www.srcML.org/srcML/src" xmlns:java="http://www.srcML.org/srcML/java" revision="0.9.5" language="JAVA" filename="Users/yy66/Documents/github.com/yijunyu/demo-concodese/fast/src/main/java/fast_/Element_/Literal_/LiteralType.java"><comment>// automatically generated by the FlatBuffers compiler, do not modify</comment>

<package>package <name><name>fast_</name><operator>.</operator><name>Element_</name><operator>.</operator><name>Literal_</name></name>;</package>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>LiteralType</name> <block>{
  <constructor><specifier>private</specifier> <name>LiteralType</name><parameter_list>()</parameter_list> <block>{ }</block></constructor>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>dummy_type</name> <init>= <expr><literal>0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>number_type</name> <init>= <expr><literal>1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>char_type</name> <init>= <expr><literal>2</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>string_type</name> <init>= <expr><literal>3</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>boolean_type</name> <init>= <expr><literal>4</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>null_type</name> <init>= <expr><literal>5</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>names</name> <init>= <expr><block>{ <expr><literal>"dummy_type"</literal></expr>, <expr><literal>"number_type"</literal></expr>, <expr><literal>"char_type"</literal></expr>, <expr><literal>"string_type"</literal></expr>, <expr><literal>"boolean_type"</literal></expr>, <expr><literal>"null_type"</literal></expr>, }</block></expr></init></decl>;</decl_stmt>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name><name>names</name><index>[<expr><name>e</name></expr>]</index></name></expr>;</return> }</block></function>
}</block></class>

</unit>

<unit xmlns="http://www.srcML.org/srcML/src" xmlns:java="http://www.srcML.org/srcML/java" revision="0.9.5" language="JAVA" filename="Users/yy66/Documents/github.com/yijunyu/demo-concodese/fast/src/main/java/fast_/Element_/Unit.java"><comment>// automatically generated by the FlatBuffers compiler, do not modify</comment>

<package>package <name><name>fast_</name><operator>.</operator><name>Element_</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>flatbuffers</name><operator>.</operator><name>*</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal>"unused"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> <specifier>final</specifier> class <name>Unit</name> <super><extends>extends <name>Table</name></extends></super> <block>{
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Unit</name></type> <name>getRootAsUnit</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>getRootAsUnit</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Unit</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Unit</name></type> <name>getRootAsUnit</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>, <parameter><decl><type><name>Unit</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>_bb</name><operator>.</operator><name>order</name></name><argument_list>(<argument><expr><name><name>ByteOrder</name><operator>.</operator><name>LITTLE_ENDIAN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><operator>(</operator><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>__init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>bb_pos</name> <operator>=</operator> <name>_i</name></expr>;</expr_stmt> <expr_stmt><expr><name>bb</name> <operator>=</operator> <name>_bb</name></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <type><name>Unit</name></type> <name>__assign</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>__init</name><argument_list>(<argument><expr><name>_i</name></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <type><name>String</name></type> <name>filename</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__string</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>filenameAsByteBuffer</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>__vector_as_bytebuffer</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>filenameInByteBuffer</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>__vector_in_bytebuffer</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>String</name></type> <name>revision</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__string</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>revisionAsByteBuffer</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>__vector_as_bytebuffer</name><argument_list>(<argument><expr><literal>6</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>revisionInByteBuffer</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>__vector_in_bytebuffer</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><literal>6</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>language</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>item</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createUnit</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>filenameOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>revisionOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>language</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Unit</name><operator>.</operator><name>addItem</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Unit</name><operator>.</operator><name>addLanguage</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>language</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Unit</name><operator>.</operator><name>addRevision</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>revisionOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Unit</name><operator>.</operator><name>addFilename</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>filenameOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>Unit</name><operator>.</operator><name>endUnit</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startUnit</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addFilename</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filenameOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>0</literal></expr></argument>, <argument><expr><name>filenameOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addRevision</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>revisionOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>1</literal></expr></argument>, <argument><expr><name>revisionOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addLanguage</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>language</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addInt</name></name><argument_list>(<argument><expr><literal>2</literal></expr></argument>, <argument><expr><name>language</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addItem</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addInt</name></name><argument_list>(<argument><expr><literal>3</literal></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>endUnit</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>endObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>o</name></expr>;</return>
  }</block></function>
}</block></class>

</unit>

<unit xmlns="http://www.srcML.org/srcML/src" xmlns:java="http://www.srcML.org/srcML/java" revision="0.9.5" language="JAVA" filename="Users/yy66/Documents/github.com/yijunyu/demo-concodese/fast/src/main/java/fast_/Element_/Unit_/LanguageType.java"><comment>// automatically generated by the FlatBuffers compiler, do not modify</comment>

<package>package <name><name>fast_</name><operator>.</operator><name>Element_</name><operator>.</operator><name>Unit_</name></name>;</package>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>LanguageType</name> <block>{
  <constructor><specifier>private</specifier> <name>LanguageType</name><parameter_list>()</parameter_list> <block>{ }</block></constructor>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DUMMY</name> <init>= <expr><literal>0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ALL</name> <init>= <expr><literal>1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>OO</name> <init>= <expr><literal>2</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CXX</name> <init>= <expr><literal>3</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>C</name> <init>= <expr><literal>4</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>C_FAMILY</name> <init>= <expr><literal>5</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>JAVA</name> <init>= <expr><literal>6</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CSHARP</name> <init>= <expr><literal>7</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>OBJECTIVE_C</name> <init>= <expr><literal>8</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>names</name> <init>= <expr><block>{ <expr><literal>"DUMMY"</literal></expr>, <expr><literal>"ALL"</literal></expr>, <expr><literal>"OO"</literal></expr>, <expr><literal>"CXX"</literal></expr>, <expr><literal>"C"</literal></expr>, <expr><literal>"C_FAMILY"</literal></expr>, <expr><literal>"JAVA"</literal></expr>, <expr><literal>"CSHARP"</literal></expr>, <expr><literal>"OBJECTIVE_C"</literal></expr>, }</block></expr></init></decl>;</decl_stmt>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name><name>names</name><index>[<expr><name>e</name></expr>]</index></name></expr>;</return> }</block></function>
}</block></class>

</unit>

<unit xmlns="http://www.srcML.org/srcML/src" xmlns:java="http://www.srcML.org/srcML/java" revision="0.9.5" language="JAVA" filename="Users/yy66/Documents/github.com/yijunyu/demo-concodese/fast/src/main/java/fast_/Graph.java"><comment>// automatically generated by the FlatBuffers compiler, do not modify</comment>

<package>package <name>fast_</name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>flatbuffers</name><operator>.</operator><name>*</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal>"unused"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> <specifier>final</specifier> class <name>Graph</name> <super><extends>extends <name>Table</name></extends></super> <block>{
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Graph</name></type> <name>getRootAsGraph</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>getRootAsGraph</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Graph</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Graph</name></type> <name>getRootAsGraph</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>, <parameter><decl><type><name>Graph</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>_bb</name><operator>.</operator><name>order</name></name><argument_list>(<argument><expr><name><name>ByteOrder</name><operator>.</operator><name>LITTLE_ENDIAN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><operator>(</operator><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>__init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>bb_pos</name> <operator>=</operator> <name>_i</name></expr>;</expr_stmt> <expr_stmt><expr><name>bb</name> <operator>=</operator> <name>_bb</name></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <type><name>Graph</name></type> <name>__assign</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>__init</name><argument_list>(<argument><expr><name>_i</name></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Graph_</name><operator>.</operator><name>Unit</name></name></type> <name>unit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>unit</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>fast_</name><operator>.</operator><name>Graph_</name><operator>.</operator><name>Unit</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Graph_</name><operator>.</operator><name>Unit</name></name></type> <name>unit</name><parameter_list>(<parameter><decl><type><name><name>fast_</name><operator>.</operator><name>Graph_</name><operator>.</operator><name>Unit</name></name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><call><name>__vector</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>j</name> <operator>*</operator> <literal>4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>unitLength</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__vector_len</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createGraph</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>unitOffset</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Graph</name><operator>.</operator><name>addUnit</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>unitOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>Graph</name><operator>.</operator><name>endGraph</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startGraph</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addUnit</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unitOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>0</literal></expr></argument>, <argument><expr><name>unitOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createUnitVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>data</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal>1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal>0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block><expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for> <return>return <expr><call><name><name>builder</name><operator>.</operator><name>endVector</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startUnitVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numElems</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name>numElems</name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>endGraph</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>endObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>o</name></expr>;</return>
  }</block></function>
}</block></class>

</unit>

<unit xmlns="http://www.srcML.org/srcML/src" xmlns:java="http://www.srcML.org/srcML/java" revision="0.9.5" language="JAVA" filename="Users/yy66/Documents/github.com/yijunyu/demo-concodese/fast/src/main/java/fast_/Graph_/ContextEdges.java"><comment>// automatically generated by the FlatBuffers compiler, do not modify</comment>

<package>package <name><name>fast_</name><operator>.</operator><name>Graph_</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>flatbuffers</name><operator>.</operator><name>*</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal>"unused"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> <specifier>final</specifier> class <name>ContextEdges</name> <super><extends>extends <name>Table</name></extends></super> <block>{
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>ContextEdges</name></type> <name>getRootAsContextEdges</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>getRootAsContextEdges</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>ContextEdges</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>ContextEdges</name></type> <name>getRootAsContextEdges</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>, <parameter><decl><type><name>ContextEdges</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>_bb</name><operator>.</operator><name>order</name></name><argument_list>(<argument><expr><name><name>ByteOrder</name><operator>.</operator><name>LITTLE_ENDIAN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><operator>(</operator><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>__init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>bb_pos</name> <operator>=</operator> <name>_i</name></expr>;</expr_stmt> <expr_stmt><expr><name>bb</name> <operator>=</operator> <name>_bb</name></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <type><name>ContextEdges</name></type> <name>__assign</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>__init</name><argument_list>(<argument><expr><name>_i</name></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <type><name>Edge</name></type> <name>nextToken</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>nextToken</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Edge</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>Edge</name></type> <name>nextToken</name><parameter_list>(<parameter><decl><type><name>Edge</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><call><name>__vector</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>j</name> <operator>*</operator> <literal>4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>nextTokenLength</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__vector_len</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>Edge</name></type> <name>child</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>child</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Edge</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>Edge</name></type> <name>child</name><parameter_list>(<parameter><decl><type><name>Edge</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><call><name>__vector</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>j</name> <operator>*</operator> <literal>4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>childLength</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__vector_len</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>Edge</name></type> <name>lastLexicalUse</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>lastLexicalUse</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Edge</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>Edge</name></type> <name>lastLexicalUse</name><parameter_list>(<parameter><decl><type><name>Edge</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><call><name>__vector</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>j</name> <operator>*</operator> <literal>4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>lastLexicalUseLength</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__vector_len</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>Edge</name></type> <name>lastUse</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>lastUse</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Edge</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>Edge</name></type> <name>lastUse</name><parameter_list>(<parameter><decl><type><name>Edge</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><call><name>__vector</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>j</name> <operator>*</operator> <literal>4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>lastUseLength</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__vector_len</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>Edge</name></type> <name>lastWrite</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>lastWrite</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Edge</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>Edge</name></type> <name>lastWrite</name><parameter_list>(<parameter><decl><type><name>Edge</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><call><name>__vector</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>j</name> <operator>*</operator> <literal>4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>lastWriteLength</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__vector_len</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>Edge</name></type> <name>returnsTo</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>returnsTo</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Edge</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>Edge</name></type> <name>returnsTo</name><parameter_list>(<parameter><decl><type><name>Edge</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>14</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><call><name>__vector</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>j</name> <operator>*</operator> <literal>4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>returnsToLength</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>14</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__vector_len</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>Edge</name></type> <name>computesFrom</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>computesFrom</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Edge</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>Edge</name></type> <name>computesFrom</name><parameter_list>(<parameter><decl><type><name>Edge</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><call><name>__vector</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>j</name> <operator>*</operator> <literal>4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>computesFromLength</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__vector_len</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createContextEdges</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>nextTokenOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>childOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>lastLexicalUseOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>lastUseOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>lastWriteOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>returnsToOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>computesFromOffset</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ContextEdges</name><operator>.</operator><name>addComputesFrom</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>computesFromOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ContextEdges</name><operator>.</operator><name>addReturnsTo</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>returnsToOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ContextEdges</name><operator>.</operator><name>addLastWrite</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>lastWriteOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ContextEdges</name><operator>.</operator><name>addLastUse</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>lastUseOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ContextEdges</name><operator>.</operator><name>addLastLexicalUse</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>lastLexicalUseOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ContextEdges</name><operator>.</operator><name>addChild</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>childOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ContextEdges</name><operator>.</operator><name>addNextToken</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>nextTokenOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>ContextEdges</name><operator>.</operator><name>endContextEdges</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startContextEdges</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addNextToken</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nextTokenOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>0</literal></expr></argument>, <argument><expr><name>nextTokenOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createNextTokenVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>data</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal>1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal>0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block><expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for> <return>return <expr><call><name><name>builder</name><operator>.</operator><name>endVector</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startNextTokenVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numElems</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name>numElems</name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addChild</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>childOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>1</literal></expr></argument>, <argument><expr><name>childOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createChildVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>data</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal>1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal>0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block><expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for> <return>return <expr><call><name><name>builder</name><operator>.</operator><name>endVector</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startChildVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numElems</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name>numElems</name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addLastLexicalUse</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lastLexicalUseOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>2</literal></expr></argument>, <argument><expr><name>lastLexicalUseOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createLastLexicalUseVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>data</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal>1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal>0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block><expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for> <return>return <expr><call><name><name>builder</name><operator>.</operator><name>endVector</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startLastLexicalUseVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numElems</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name>numElems</name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addLastUse</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lastUseOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>3</literal></expr></argument>, <argument><expr><name>lastUseOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createLastUseVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>data</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal>1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal>0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block><expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for> <return>return <expr><call><name><name>builder</name><operator>.</operator><name>endVector</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startLastUseVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numElems</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name>numElems</name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addLastWrite</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lastWriteOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name>lastWriteOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createLastWriteVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>data</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal>1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal>0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block><expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for> <return>return <expr><call><name><name>builder</name><operator>.</operator><name>endVector</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startLastWriteVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numElems</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name>numElems</name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addReturnsTo</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>returnsToOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>5</literal></expr></argument>, <argument><expr><name>returnsToOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createReturnsToVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>data</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal>1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal>0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block><expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for> <return>return <expr><call><name><name>builder</name><operator>.</operator><name>endVector</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startReturnsToVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numElems</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name>numElems</name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addComputesFrom</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>computesFromOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>6</literal></expr></argument>, <argument><expr><name>computesFromOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createComputesFromVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>data</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal>1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal>0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block><expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for> <return>return <expr><call><name><name>builder</name><operator>.</operator><name>endVector</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startComputesFromVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numElems</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name>numElems</name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>endContextEdges</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>endObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>o</name></expr>;</return>
  }</block></function>
}</block></class>

</unit>

<unit xmlns="http://www.srcML.org/srcML/src" xmlns:java="http://www.srcML.org/srcML/java" revision="0.9.5" language="JAVA" filename="Users/yy66/Documents/github.com/yijunyu/demo-concodese/fast/src/main/java/fast_/Graph_/ContextGraph.java"><comment>// automatically generated by the FlatBuffers compiler, do not modify</comment>

<package>package <name><name>fast_</name><operator>.</operator><name>Graph_</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>flatbuffers</name><operator>.</operator><name>*</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal>"unused"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> <specifier>final</specifier> class <name>ContextGraph</name> <super><extends>extends <name>Table</name></extends></super> <block>{
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>ContextGraph</name></type> <name>getRootAsContextGraph</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>getRootAsContextGraph</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>ContextGraph</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>ContextGraph</name></type> <name>getRootAsContextGraph</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>, <parameter><decl><type><name>ContextGraph</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>_bb</name><operator>.</operator><name>order</name></name><argument_list>(<argument><expr><name><name>ByteOrder</name><operator>.</operator><name>LITTLE_ENDIAN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><operator>(</operator><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>__init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>bb_pos</name> <operator>=</operator> <name>_i</name></expr>;</expr_stmt> <expr_stmt><expr><name>bb</name> <operator>=</operator> <name>_bb</name></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <type><name>ContextGraph</name></type> <name>__assign</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>__init</name><argument_list>(<argument><expr><name>_i</name></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <type><name>ContextEdges</name></type> <name>edges</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>edges</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ContextEdges</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ContextEdges</name></type> <name>edges</name><parameter_list>(<parameter><decl><type><name>ContextEdges</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>NodeLabel</name></type> <name>nodeLabel</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>nodeLabel</name><argument_list>(<argument><expr><operator>new</operator> <call><name>NodeLabel</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>NodeLabel</name></type> <name>nodeLabel</name><parameter_list>(<parameter><decl><type><name>NodeLabel</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><call><name>__vector</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>j</name> <operator>*</operator> <literal>4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>nodeLabelLength</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__vector_len</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>NodeType</name></type> <name>nodeType</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>nodeType</name><argument_list>(<argument><expr><operator>new</operator> <call><name>NodeType</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>NodeType</name></type> <name>nodeType</name><parameter_list>(<parameter><decl><type><name>NodeType</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><call><name>__vector</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>j</name> <operator>*</operator> <literal>4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>nodeTypeLength</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__vector_len</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createContextGraph</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>edgesOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>nodeLabelOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>nodeTypeOffset</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ContextGraph</name><operator>.</operator><name>addNodeType</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>nodeTypeOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ContextGraph</name><operator>.</operator><name>addNodeLabel</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>nodeLabelOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ContextGraph</name><operator>.</operator><name>addEdges</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>edgesOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>ContextGraph</name><operator>.</operator><name>endContextGraph</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startContextGraph</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addEdges</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>edgesOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>0</literal></expr></argument>, <argument><expr><name>edgesOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addNodeLabel</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nodeLabelOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>1</literal></expr></argument>, <argument><expr><name>nodeLabelOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createNodeLabelVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>data</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal>1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal>0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block><expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for> <return>return <expr><call><name><name>builder</name><operator>.</operator><name>endVector</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startNodeLabelVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numElems</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name>numElems</name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addNodeType</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nodeTypeOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>2</literal></expr></argument>, <argument><expr><name>nodeTypeOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createNodeTypeVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>data</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal>1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal>0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block><expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for> <return>return <expr><call><name><name>builder</name><operator>.</operator><name>endVector</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startNodeTypeVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numElems</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name>numElems</name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>endContextGraph</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>endObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>o</name></expr>;</return>
  }</block></function>
}</block></class>

</unit>

<unit xmlns="http://www.srcML.org/srcML/src" xmlns:java="http://www.srcML.org/srcML/java" revision="0.9.5" language="JAVA" filename="Users/yy66/Documents/github.com/yijunyu/demo-concodese/fast/src/main/java/fast_/Graph_/Edge.java"><comment>// automatically generated by the FlatBuffers compiler, do not modify</comment>

<package>package <name><name>fast_</name><operator>.</operator><name>Graph_</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>flatbuffers</name><operator>.</operator><name>*</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal>"unused"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> <specifier>final</specifier> class <name>Edge</name> <super><extends>extends <name>Table</name></extends></super> <block>{
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Edge</name></type> <name>getRootAsEdge</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>getRootAsEdge</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Edge</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Edge</name></type> <name>getRootAsEdge</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>, <parameter><decl><type><name>Edge</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>_bb</name><operator>.</operator><name>order</name></name><argument_list>(<argument><expr><name><name>ByteOrder</name><operator>.</operator><name>LITTLE_ENDIAN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><operator>(</operator><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>__init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>bb_pos</name> <operator>=</operator> <name>_i</name></expr>;</expr_stmt> <expr_stmt><expr><name>bb</name> <operator>=</operator> <name>_bb</name></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <type><name>Edge</name></type> <name>__assign</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>__init</name><argument_list>(<argument><expr><name>_i</name></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <type><name>int</name></type> <name>node1</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>node2</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createEdge</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>node1</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>node2</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Edge</name><operator>.</operator><name>addNode2</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>node2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Edge</name><operator>.</operator><name>addNode1</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>node1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>Edge</name><operator>.</operator><name>endEdge</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startEdge</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addNode1</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>node1</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addInt</name></name><argument_list>(<argument><expr><literal>0</literal></expr></argument>, <argument><expr><name>node1</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addNode2</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>node2</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addInt</name></name><argument_list>(<argument><expr><literal>1</literal></expr></argument>, <argument><expr><name>node2</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>endEdge</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>endObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>o</name></expr>;</return>
  }</block></function>
}</block></class>

</unit>

<unit xmlns="http://www.srcML.org/srcML/src" xmlns:java="http://www.srcML.org/srcML/java" revision="0.9.5" language="JAVA" filename="Users/yy66/Documents/github.com/yijunyu/demo-concodese/fast/src/main/java/fast_/Graph_/NodeLabel.java"><comment>// automatically generated by the FlatBuffers compiler, do not modify</comment>

<package>package <name><name>fast_</name><operator>.</operator><name>Graph_</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>flatbuffers</name><operator>.</operator><name>*</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal>"unused"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> <specifier>final</specifier> class <name>NodeLabel</name> <super><extends>extends <name>Table</name></extends></super> <block>{
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>NodeLabel</name></type> <name>getRootAsNodeLabel</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>getRootAsNodeLabel</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>NodeLabel</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>NodeLabel</name></type> <name>getRootAsNodeLabel</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>, <parameter><decl><type><name>NodeLabel</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>_bb</name><operator>.</operator><name>order</name></name><argument_list>(<argument><expr><name><name>ByteOrder</name><operator>.</operator><name>LITTLE_ENDIAN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><operator>(</operator><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>__init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>bb_pos</name> <operator>=</operator> <name>_i</name></expr>;</expr_stmt> <expr_stmt><expr><name>bb</name> <operator>=</operator> <name>_bb</name></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <type><name>NodeLabel</name></type> <name>__assign</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>__init</name><argument_list>(<argument><expr><name>_i</name></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <type><name>int</name></type> <name>node</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>String</name></type> <name>label</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__string</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>labelAsByteBuffer</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>__vector_as_bytebuffer</name><argument_list>(<argument><expr><literal>6</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>labelInByteBuffer</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>__vector_in_bytebuffer</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><literal>6</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createNodeLabel</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>node</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>labelOffset</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>NodeLabel</name><operator>.</operator><name>addLabel</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>labelOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>NodeLabel</name><operator>.</operator><name>addNode</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>NodeLabel</name><operator>.</operator><name>endNodeLabel</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startNodeLabel</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addNode</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>node</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addInt</name></name><argument_list>(<argument><expr><literal>0</literal></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addLabel</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>labelOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>1</literal></expr></argument>, <argument><expr><name>labelOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>endNodeLabel</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>endObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>o</name></expr>;</return>
  }</block></function>
}</block></class>

</unit>

<unit xmlns="http://www.srcML.org/srcML/src" xmlns:java="http://www.srcML.org/srcML/java" revision="0.9.5" language="JAVA" filename="Users/yy66/Documents/github.com/yijunyu/demo-concodese/fast/src/main/java/fast_/Graph_/NodeType.java"><comment>// automatically generated by the FlatBuffers compiler, do not modify</comment>

<package>package <name><name>fast_</name><operator>.</operator><name>Graph_</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>flatbuffers</name><operator>.</operator><name>*</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal>"unused"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> <specifier>final</specifier> class <name>NodeType</name> <super><extends>extends <name>Table</name></extends></super> <block>{
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>NodeType</name></type> <name>getRootAsNodeType</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>getRootAsNodeType</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>NodeType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>NodeType</name></type> <name>getRootAsNodeType</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>, <parameter><decl><type><name>NodeType</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>_bb</name><operator>.</operator><name>order</name></name><argument_list>(<argument><expr><name><name>ByteOrder</name><operator>.</operator><name>LITTLE_ENDIAN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><operator>(</operator><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>__init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>bb_pos</name> <operator>=</operator> <name>_i</name></expr>;</expr_stmt> <expr_stmt><expr><name>bb</name> <operator>=</operator> <name>_bb</name></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <type><name>NodeType</name></type> <name>__assign</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>__init</name><argument_list>(<argument><expr><name>_i</name></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <type><name>int</name></type> <name>node</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>String</name></type> <name>type</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__string</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>typeAsByteBuffer</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>__vector_as_bytebuffer</name><argument_list>(<argument><expr><literal>6</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>typeInByteBuffer</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>__vector_in_bytebuffer</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><literal>6</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createNodeType</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>node</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>typeOffset</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>NodeType</name><operator>.</operator><name>addType</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>typeOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>NodeType</name><operator>.</operator><name>addNode</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>NodeType</name><operator>.</operator><name>endNodeType</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startNodeType</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addNode</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>node</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addInt</name></name><argument_list>(<argument><expr><literal>0</literal></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addType</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>typeOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>1</literal></expr></argument>, <argument><expr><name>typeOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>endNodeType</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>endObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>o</name></expr>;</return>
  }</block></function>
}</block></class>

</unit>

<unit xmlns="http://www.srcML.org/srcML/src" xmlns:java="http://www.srcML.org/srcML/java" revision="0.9.5" language="JAVA" filename="Users/yy66/Documents/github.com/yijunyu/demo-concodese/fast/src/main/java/fast_/Graph_/SymbolCandidate.java"><comment>// automatically generated by the FlatBuffers compiler, do not modify</comment>

<package>package <name><name>fast_</name><operator>.</operator><name>Graph_</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>flatbuffers</name><operator>.</operator><name>*</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal>"unused"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> <specifier>final</specifier> class <name>SymbolCandidate</name> <super><extends>extends <name>Table</name></extends></super> <block>{
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>SymbolCandidate</name></type> <name>getRootAsSymbolCandidate</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>getRootAsSymbolCandidate</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>SymbolCandidate</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>SymbolCandidate</name></type> <name>getRootAsSymbolCandidate</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>, <parameter><decl><type><name>SymbolCandidate</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>_bb</name><operator>.</operator><name>order</name></name><argument_list>(<argument><expr><name><name>ByteOrder</name><operator>.</operator><name>LITTLE_ENDIAN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><operator>(</operator><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>__init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>bb_pos</name> <operator>=</operator> <name>_i</name></expr>;</expr_stmt> <expr_stmt><expr><name>bb</name> <operator>=</operator> <name>_bb</name></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <type><name>SymbolCandidate</name></type> <name>__assign</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>__init</name><argument_list>(<argument><expr><name>_i</name></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <type><name>int</name></type> <name>symbolDummyNode</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>String</name></type> <name>symbolName</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__string</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>symbolNameAsByteBuffer</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>__vector_as_bytebuffer</name><argument_list>(<argument><expr><literal>6</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>symbolNameInByteBuffer</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>__vector_in_bytebuffer</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><literal>6</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isCorrect</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><literal>0</literal><operator>!=</operator><call><name><name>bb</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>false</literal></expr></else></ternary></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createSymbolCandidate</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>symbolDummyNode</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>symbolNameOffset</name></decl></parameter>,
      <parameter><decl><type><name>boolean</name></type> <name>isCorrect</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>SymbolCandidate</name><operator>.</operator><name>addSymbolName</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>symbolNameOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>SymbolCandidate</name><operator>.</operator><name>addSymbolDummyNode</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>symbolDummyNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>SymbolCandidate</name><operator>.</operator><name>addIsCorrect</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>isCorrect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>SymbolCandidate</name><operator>.</operator><name>endSymbolCandidate</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startSymbolCandidate</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addSymbolDummyNode</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>symbolDummyNode</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addInt</name></name><argument_list>(<argument><expr><literal>0</literal></expr></argument>, <argument><expr><name>symbolDummyNode</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addSymbolName</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>symbolNameOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>1</literal></expr></argument>, <argument><expr><name>symbolNameOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addIsCorrect</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isCorrect</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addBoolean</name></name><argument_list>(<argument><expr><literal>2</literal></expr></argument>, <argument><expr><name>isCorrect</name></expr></argument>, <argument><expr><literal>false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>endSymbolCandidate</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>endObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>o</name></expr>;</return>
  }</block></function>
}</block></class>

</unit>

<unit xmlns="http://www.srcML.org/srcML/src" xmlns:java="http://www.srcML.org/srcML/java" revision="0.9.5" language="JAVA" filename="Users/yy66/Documents/github.com/yijunyu/demo-concodese/fast/src/main/java/fast_/Graph_/Unit.java"><comment>// automatically generated by the FlatBuffers compiler, do not modify</comment>

<package>package <name><name>fast_</name><operator>.</operator><name>Graph_</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>flatbuffers</name><operator>.</operator><name>*</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal>"unused"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> <specifier>final</specifier> class <name>Unit</name> <super><extends>extends <name>Table</name></extends></super> <block>{
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Unit</name></type> <name>getRootAsUnit</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>getRootAsUnit</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Unit</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Unit</name></type> <name>getRootAsUnit</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>, <parameter><decl><type><name>Unit</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>_bb</name><operator>.</operator><name>order</name></name><argument_list>(<argument><expr><name><name>ByteOrder</name><operator>.</operator><name>LITTLE_ENDIAN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><operator>(</operator><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>__init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>bb_pos</name> <operator>=</operator> <name>_i</name></expr>;</expr_stmt> <expr_stmt><expr><name>bb</name> <operator>=</operator> <name>_bb</name></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <type><name>Unit</name></type> <name>__assign</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>__init</name><argument_list>(<argument><expr><name>_i</name></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <type><name>String</name></type> <name>filename</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__string</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>filenameAsByteBuffer</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>__vector_as_bytebuffer</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>filenameInByteBuffer</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>__vector_in_bytebuffer</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>slotTokenIdx</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ContextGraph</name></type> <name>graph</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>graph</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ContextGraph</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ContextGraph</name></type> <name>graph</name><parameter_list>(<parameter><decl><type><name>ContextGraph</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>SlotDummyNode</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>SymbolCandidate</name></type> <name>symbolCandidate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>symbolCandidate</name><argument_list>(<argument><expr><operator>new</operator> <call><name>SymbolCandidate</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>SymbolCandidate</name></type> <name>symbolCandidate</name><parameter_list>(<parameter><decl><type><name>SymbolCandidate</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><call><name>__vector</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>j</name> <operator>*</operator> <literal>4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>symbolCandidateLength</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__vector_len</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createUnit</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>filenameOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>slotTokenIdx</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>graphOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>SlotDummyNode</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>symbolCandidateOffset</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Unit</name><operator>.</operator><name>addSymbolCandidate</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>symbolCandidateOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Unit</name><operator>.</operator><name>addSlotDummyNode</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>SlotDummyNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Unit</name><operator>.</operator><name>addGraph</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>graphOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Unit</name><operator>.</operator><name>addSlotTokenIdx</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>slotTokenIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Unit</name><operator>.</operator><name>addFilename</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>filenameOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>Unit</name><operator>.</operator><name>endUnit</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startUnit</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addFilename</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filenameOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>0</literal></expr></argument>, <argument><expr><name>filenameOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addSlotTokenIdx</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slotTokenIdx</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addInt</name></name><argument_list>(<argument><expr><literal>1</literal></expr></argument>, <argument><expr><name>slotTokenIdx</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addGraph</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>graphOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>2</literal></expr></argument>, <argument><expr><name>graphOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addSlotDummyNode</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>SlotDummyNode</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addInt</name></name><argument_list>(<argument><expr><literal>3</literal></expr></argument>, <argument><expr><name>SlotDummyNode</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addSymbolCandidate</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>symbolCandidateOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name>symbolCandidateOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createSymbolCandidateVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>data</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal>1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal>0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block><expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for> <return>return <expr><call><name><name>builder</name><operator>.</operator><name>endVector</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startSymbolCandidateVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numElems</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name>numElems</name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>endUnit</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>endObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>o</name></expr>;</return>
  }</block></function>
}</block></class>

</unit>

<unit xmlns="http://www.srcML.org/srcML/src" xmlns:java="http://www.srcML.org/srcML/java" revision="0.9.5" language="JAVA" filename="Users/yy66/Documents/github.com/yijunyu/demo-concodese/fast/src/main/java/fast_/Log.java"><comment>// automatically generated by the FlatBuffers compiler, do not modify</comment>

<package>package <name>fast_</name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>flatbuffers</name><operator>.</operator><name>*</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal>"unused"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> <specifier>final</specifier> class <name>Log</name> <super><extends>extends <name>Table</name></extends></super> <block>{
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Log</name></type> <name>getRootAsLog</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>getRootAsLog</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Log</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Log</name></type> <name>getRootAsLog</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>, <parameter><decl><type><name>Log</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>_bb</name><operator>.</operator><name>order</name></name><argument_list>(<argument><expr><name><name>ByteOrder</name><operator>.</operator><name>LITTLE_ENDIAN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><operator>(</operator><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>__init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>bb_pos</name> <operator>=</operator> <name>_i</name></expr>;</expr_stmt> <expr_stmt><expr><name>bb</name> <operator>=</operator> <name>_bb</name></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <type><name>Log</name></type> <name>__assign</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>__init</name><argument_list>(<argument><expr><name>_i</name></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Log_</name><operator>.</operator><name>Commit</name></name></type> <name>commit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>commit</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>fast_</name><operator>.</operator><name>Log_</name><operator>.</operator><name>Commit</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Log_</name><operator>.</operator><name>Commit</name></name></type> <name>commit</name><parameter_list>(<parameter><decl><type><name><name>fast_</name><operator>.</operator><name>Log_</name><operator>.</operator><name>Commit</name></name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><call><name>__vector</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>j</name> <operator>*</operator> <literal>4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>commitLength</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__vector_len</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Log_</name><operator>.</operator><name>Author</name></name></type> <name>author</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>author</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>fast_</name><operator>.</operator><name>Log_</name><operator>.</operator><name>Author</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Log_</name><operator>.</operator><name>Author</name></name></type> <name>author</name><parameter_list>(<parameter><decl><type><name><name>fast_</name><operator>.</operator><name>Log_</name><operator>.</operator><name>Author</name></name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><call><name>__vector</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>j</name> <operator>*</operator> <literal>4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>authorLength</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__vector_len</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createLog</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>commitOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>authorOffset</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>addAuthor</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>authorOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>addCommit</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>commitOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>Log</name><operator>.</operator><name>endLog</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startLog</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addCommit</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>commitOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>0</literal></expr></argument>, <argument><expr><name>commitOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createCommitVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>data</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal>1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal>0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block><expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for> <return>return <expr><call><name><name>builder</name><operator>.</operator><name>endVector</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startCommitVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numElems</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name>numElems</name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addAuthor</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>authorOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>1</literal></expr></argument>, <argument><expr><name>authorOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createAuthorVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>data</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal>1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal>0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block><expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for> <return>return <expr><call><name><name>builder</name><operator>.</operator><name>endVector</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startAuthorVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numElems</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name>numElems</name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>endLog</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>endObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>o</name></expr>;</return>
  }</block></function>
}</block></class>

</unit>

<unit xmlns="http://www.srcML.org/srcML/src" xmlns:java="http://www.srcML.org/srcML/java" revision="0.9.5" language="JAVA" filename="Users/yy66/Documents/github.com/yijunyu/demo-concodese/fast/src/main/java/fast_/Log_/Author.java"><comment>// automatically generated by the FlatBuffers compiler, do not modify</comment>

<package>package <name><name>fast_</name><operator>.</operator><name>Log_</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>flatbuffers</name><operator>.</operator><name>*</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal>"unused"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> <specifier>final</specifier> class <name>Author</name> <super><extends>extends <name>Table</name></extends></super> <block>{
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Author</name></type> <name>getRootAsAuthor</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>getRootAsAuthor</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Author</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Author</name></type> <name>getRootAsAuthor</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>, <parameter><decl><type><name>Author</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>_bb</name><operator>.</operator><name>order</name></name><argument_list>(<argument><expr><name><name>ByteOrder</name><operator>.</operator><name>LITTLE_ENDIAN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><operator>(</operator><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>__init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>bb_pos</name> <operator>=</operator> <name>_i</name></expr>;</expr_stmt> <expr_stmt><expr><name>bb</name> <operator>=</operator> <name>_bb</name></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <type><name>Author</name></type> <name>__assign</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>__init</name><argument_list>(<argument><expr><name>_i</name></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <type><name>int</name></type> <name>id</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>String</name></type> <name>name</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__string</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>nameAsByteBuffer</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>__vector_as_bytebuffer</name><argument_list>(<argument><expr><literal>6</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>nameInByteBuffer</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>__vector_in_bytebuffer</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><literal>6</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>String</name></type> <name>email</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__string</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>emailAsByteBuffer</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>__vector_as_bytebuffer</name><argument_list>(<argument><expr><literal>8</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>emailInByteBuffer</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>__vector_in_bytebuffer</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><literal>8</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createAuthor</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>nameOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>emailOffset</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Author</name><operator>.</operator><name>addEmail</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>emailOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Author</name><operator>.</operator><name>addName</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>nameOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Author</name><operator>.</operator><name>addId</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>Author</name><operator>.</operator><name>endAuthor</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startAuthor</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addId</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addInt</name></name><argument_list>(<argument><expr><literal>0</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addName</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nameOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>1</literal></expr></argument>, <argument><expr><name>nameOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addEmail</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>emailOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>2</literal></expr></argument>, <argument><expr><name>emailOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>endAuthor</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>endObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>o</name></expr>;</return>
  }</block></function>
}</block></class>

</unit>

<unit xmlns="http://www.srcML.org/srcML/src" xmlns:java="http://www.srcML.org/srcML/java" revision="0.9.5" language="JAVA" filename="Users/yy66/Documents/github.com/yijunyu/demo-concodese/fast/src/main/java/fast_/Log_/Commit.java"><comment>// automatically generated by the FlatBuffers compiler, do not modify</comment>

<package>package <name><name>fast_</name><operator>.</operator><name>Log_</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>flatbuffers</name><operator>.</operator><name>*</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal>"unused"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> <specifier>final</specifier> class <name>Commit</name> <super><extends>extends <name>Table</name></extends></super> <block>{
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Commit</name></type> <name>getRootAsCommit</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>getRootAsCommit</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Commit</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Commit</name></type> <name>getRootAsCommit</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>, <parameter><decl><type><name>Commit</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>_bb</name><operator>.</operator><name>order</name></name><argument_list>(<argument><expr><name><name>ByteOrder</name><operator>.</operator><name>LITTLE_ENDIAN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><operator>(</operator><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>__init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>bb_pos</name> <operator>=</operator> <name>_i</name></expr>;</expr_stmt> <expr_stmt><expr><name>bb</name> <operator>=</operator> <name>_bb</name></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <type><name>Commit</name></type> <name>__assign</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>__init</name><argument_list>(<argument><expr><name>_i</name></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <type><name>String</name></type> <name>id</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__string</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>idAsByteBuffer</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>__vector_as_bytebuffer</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>idInByteBuffer</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>__vector_in_bytebuffer</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>String</name></type> <name>msg</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__string</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>msgAsByteBuffer</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>__vector_as_bytebuffer</name><argument_list>(<argument><expr><literal>6</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>msgInByteBuffer</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>__vector_in_bytebuffer</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><literal>6</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>String</name></type> <name>authorName</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__string</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>authorNameAsByteBuffer</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>__vector_as_bytebuffer</name><argument_list>(<argument><expr><literal>8</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>authorNameInByteBuffer</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>__vector_in_bytebuffer</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><literal>8</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>String</name></type> <name>authorEmail</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__string</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>authorEmailAsByteBuffer</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>__vector_as_bytebuffer</name><argument_list>(<argument><expr><literal>10</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>authorEmailInByteBuffer</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>__vector_in_bytebuffer</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><literal>10</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>long</name></type> <name>authorTime</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>bb</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0L</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>String</name></type> <name>committerName</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>14</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__string</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>committerNameAsByteBuffer</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>__vector_as_bytebuffer</name><argument_list>(<argument><expr><literal>14</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>committerNameInByteBuffer</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>__vector_in_bytebuffer</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><literal>14</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>String</name></type> <name>committerEmail</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__string</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>committerEmailAsByteBuffer</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>__vector_as_bytebuffer</name><argument_list>(<argument><expr><literal>16</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>committerEmailInByteBuffer</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>__vector_in_bytebuffer</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><literal>16</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>long</name></type> <name>committerTime</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>18</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>bb</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0L</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Log_</name><operator>.</operator><name>Commit_</name><operator>.</operator><name>Diff</name></name></type> <name>diff</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>diff</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>fast_</name><operator>.</operator><name>Log_</name><operator>.</operator><name>Commit_</name><operator>.</operator><name>Diff</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Log_</name><operator>.</operator><name>Commit_</name><operator>.</operator><name>Diff</name></name></type> <name>diff</name><parameter_list>(<parameter><decl><type><name><name>fast_</name><operator>.</operator><name>Log_</name><operator>.</operator><name>Commit_</name><operator>.</operator><name>Diff</name></name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><call><name>__vector</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>j</name> <operator>*</operator> <literal>4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>diffLength</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__vector_len</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Slices</name></name></type> <name>slice</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>slice</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>fast_</name><operator>.</operator><name>Slices</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Slices</name></name></type> <name>slice</name><parameter_list>(<parameter><decl><type><name><name>fast_</name><operator>.</operator><name>Slices</name></name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>22</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createCommit</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>idOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>msgOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>author_nameOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>author_emailOffset</name></decl></parameter>,
      <parameter><decl><type><name>long</name></type> <name>author_time</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>committer_nameOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>committer_emailOffset</name></decl></parameter>,
      <parameter><decl><type><name>long</name></type> <name>committer_time</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>diffOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>sliceOffset</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Commit</name><operator>.</operator><name>addCommitterTime</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>committer_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Commit</name><operator>.</operator><name>addAuthorTime</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>author_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Commit</name><operator>.</operator><name>addSlice</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>sliceOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Commit</name><operator>.</operator><name>addDiff</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>diffOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Commit</name><operator>.</operator><name>addCommitterEmail</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>committer_emailOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Commit</name><operator>.</operator><name>addCommitterName</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>committer_nameOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Commit</name><operator>.</operator><name>addAuthorEmail</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>author_emailOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Commit</name><operator>.</operator><name>addAuthorName</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>author_nameOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Commit</name><operator>.</operator><name>addMsg</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>msgOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Commit</name><operator>.</operator><name>addId</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>idOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>Commit</name><operator>.</operator><name>endCommit</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startCommit</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addId</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>0</literal></expr></argument>, <argument><expr><name>idOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addMsg</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>msgOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>1</literal></expr></argument>, <argument><expr><name>msgOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addAuthorName</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>authorNameOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>2</literal></expr></argument>, <argument><expr><name>authorNameOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addAuthorEmail</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>authorEmailOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>3</literal></expr></argument>, <argument><expr><name>authorEmailOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addAuthorTime</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>authorTime</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addLong</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name>authorTime</name></expr></argument>, <argument><expr><literal>0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addCommitterName</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>committerNameOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>5</literal></expr></argument>, <argument><expr><name>committerNameOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addCommitterEmail</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>committerEmailOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>6</literal></expr></argument>, <argument><expr><name>committerEmailOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addCommitterTime</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>committerTime</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addLong</name></name><argument_list>(<argument><expr><literal>7</literal></expr></argument>, <argument><expr><name>committerTime</name></expr></argument>, <argument><expr><literal>0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addDiff</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>diffOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>8</literal></expr></argument>, <argument><expr><name>diffOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createDiffVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>data</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal>1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal>0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block><expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for> <return>return <expr><call><name><name>builder</name><operator>.</operator><name>endVector</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startDiffVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numElems</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name>numElems</name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addSlice</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sliceOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>9</literal></expr></argument>, <argument><expr><name>sliceOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>endCommit</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>endObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>o</name></expr>;</return>
  }</block></function>
}</block></class>

</unit>

<unit xmlns="http://www.srcML.org/srcML/src" xmlns:java="http://www.srcML.org/srcML/java" revision="0.9.5" language="JAVA" filename="Users/yy66/Documents/github.com/yijunyu/demo-concodese/fast/src/main/java/fast_/Log_/Commit_/Diff.java"><comment>// automatically generated by the FlatBuffers compiler, do not modify</comment>

<package>package <name><name>fast_</name><operator>.</operator><name>Log_</name><operator>.</operator><name>Commit_</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>flatbuffers</name><operator>.</operator><name>*</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal>"unused"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> <specifier>final</specifier> class <name>Diff</name> <super><extends>extends <name>Table</name></extends></super> <block>{
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Diff</name></type> <name>getRootAsDiff</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>getRootAsDiff</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Diff</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Diff</name></type> <name>getRootAsDiff</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>, <parameter><decl><type><name>Diff</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>_bb</name><operator>.</operator><name>order</name></name><argument_list>(<argument><expr><name><name>ByteOrder</name><operator>.</operator><name>LITTLE_ENDIAN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><operator>(</operator><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>__init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>bb_pos</name> <operator>=</operator> <name>_i</name></expr>;</expr_stmt> <expr_stmt><expr><name>bb</name> <operator>=</operator> <name>_bb</name></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <type><name>Diff</name></type> <name>__assign</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>__init</name><argument_list>(<argument><expr><name>_i</name></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <type><name>String</name></type> <name>a</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__string</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>aAsByteBuffer</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>__vector_as_bytebuffer</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>aInByteBuffer</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>__vector_in_bytebuffer</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>String</name></type> <name>b</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__string</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>bAsByteBuffer</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>__vector_as_bytebuffer</name><argument_list>(<argument><expr><literal>6</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>bInByteBuffer</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>__vector_in_bytebuffer</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><literal>6</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isNew</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><literal>0</literal><operator>!=</operator><call><name><name>bb</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>false</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>String</name></type> <name>isCode</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__string</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>isCodeAsByteBuffer</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>__vector_as_bytebuffer</name><argument_list>(<argument><expr><literal>10</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>isCodeInByteBuffer</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>__vector_in_bytebuffer</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><literal>10</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>String</name></type> <name>indexFrom</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__string</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>indexFromAsByteBuffer</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>__vector_as_bytebuffer</name><argument_list>(<argument><expr><literal>12</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>indexFromInByteBuffer</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>__vector_in_bytebuffer</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><literal>12</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>String</name></type> <name>indexTo</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>14</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__string</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>indexToAsByteBuffer</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>__vector_as_bytebuffer</name><argument_list>(<argument><expr><literal>14</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>indexToInByteBuffer</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>__vector_in_bytebuffer</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><literal>14</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>String</name></type> <name>mode</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__string</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>modeAsByteBuffer</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>__vector_as_bytebuffer</name><argument_list>(<argument><expr><literal>16</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>modeInByteBuffer</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>__vector_in_bytebuffer</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><literal>16</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Log_</name><operator>.</operator><name>Commit_</name><operator>.</operator><name>Diff_</name><operator>.</operator><name>Hunk</name></name></type> <name>hunk</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>hunk</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>fast_</name><operator>.</operator><name>Log_</name><operator>.</operator><name>Commit_</name><operator>.</operator><name>Diff_</name><operator>.</operator><name>Hunk</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Log_</name><operator>.</operator><name>Commit_</name><operator>.</operator><name>Diff_</name><operator>.</operator><name>Hunk</name></name></type> <name>hunk</name><parameter_list>(<parameter><decl><type><name><name>fast_</name><operator>.</operator><name>Log_</name><operator>.</operator><name>Commit_</name><operator>.</operator><name>Diff_</name><operator>.</operator><name>Hunk</name></name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>18</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><call><name>__vector</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>j</name> <operator>*</operator> <literal>4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>hunkLength</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>18</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__vector_len</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createDiff</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>aOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>bOffset</name></decl></parameter>,
      <parameter><decl><type><name>boolean</name></type> <name>is_new</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>is_codeOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>index_fromOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>index_toOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>modeOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>hunkOffset</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Diff</name><operator>.</operator><name>addHunk</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>hunkOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Diff</name><operator>.</operator><name>addMode</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>modeOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Diff</name><operator>.</operator><name>addIndexTo</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>index_toOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Diff</name><operator>.</operator><name>addIndexFrom</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>index_fromOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Diff</name><operator>.</operator><name>addIsCode</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>is_codeOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Diff</name><operator>.</operator><name>addB</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>bOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Diff</name><operator>.</operator><name>addA</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>aOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Diff</name><operator>.</operator><name>addIsNew</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>is_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>Diff</name><operator>.</operator><name>endDiff</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startDiff</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addA</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>aOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>0</literal></expr></argument>, <argument><expr><name>aOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addB</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>1</literal></expr></argument>, <argument><expr><name>bOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addIsNew</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isNew</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addBoolean</name></name><argument_list>(<argument><expr><literal>2</literal></expr></argument>, <argument><expr><name>isNew</name></expr></argument>, <argument><expr><literal>false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addIsCode</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>isCodeOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>3</literal></expr></argument>, <argument><expr><name>isCodeOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addIndexFrom</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indexFromOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name>indexFromOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addIndexTo</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indexToOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>5</literal></expr></argument>, <argument><expr><name>indexToOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addMode</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>modeOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>6</literal></expr></argument>, <argument><expr><name>modeOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addHunk</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hunkOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>7</literal></expr></argument>, <argument><expr><name>hunkOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createHunkVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>data</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal>1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal>0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block><expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for> <return>return <expr><call><name><name>builder</name><operator>.</operator><name>endVector</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startHunkVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numElems</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name>numElems</name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>endDiff</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>endObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>o</name></expr>;</return>
  }</block></function>
}</block></class>

</unit>

<unit xmlns="http://www.srcML.org/srcML/src" xmlns:java="http://www.srcML.org/srcML/java" revision="0.9.5" language="JAVA" filename="Users/yy66/Documents/github.com/yijunyu/demo-concodese/fast/src/main/java/fast_/Log_/Commit_/Diff_/Hunk.java"><comment>// automatically generated by the FlatBuffers compiler, do not modify</comment>

<package>package <name><name>fast_</name><operator>.</operator><name>Log_</name><operator>.</operator><name>Commit_</name><operator>.</operator><name>Diff_</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>flatbuffers</name><operator>.</operator><name>*</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal>"unused"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> <specifier>final</specifier> class <name>Hunk</name> <super><extends>extends <name>Table</name></extends></super> <block>{
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Hunk</name></type> <name>getRootAsHunk</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>getRootAsHunk</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Hunk</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Hunk</name></type> <name>getRootAsHunk</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>, <parameter><decl><type><name>Hunk</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>_bb</name><operator>.</operator><name>order</name></name><argument_list>(<argument><expr><name><name>ByteOrder</name><operator>.</operator><name>LITTLE_ENDIAN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><operator>(</operator><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>__init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>bb_pos</name> <operator>=</operator> <name>_i</name></expr>;</expr_stmt> <expr_stmt><expr><name>bb</name> <operator>=</operator> <name>_bb</name></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <type><name>Hunk</name></type> <name>__assign</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>__init</name><argument_list>(<argument><expr><name>_i</name></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <type><name>int</name></type> <name>fromLineno</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>fromColumn</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>toLineno</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>toColumn</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>String</name></type> <name>context</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__string</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>contextAsByteBuffer</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>__vector_as_bytebuffer</name><argument_list>(<argument><expr><literal>12</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>contextInByteBuffer</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>__vector_in_bytebuffer</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><literal>12</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Element</name></name></type> <name>element</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>element</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>fast_</name><operator>.</operator><name>Element</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Element</name></name></type> <name>element</name><parameter_list>(<parameter><decl><type><name><name>fast_</name><operator>.</operator><name>Element</name></name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>14</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><call><name>__vector</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>j</name> <operator>*</operator> <literal>4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>elementLength</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>14</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__vector_len</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Graph</name></name></type> <name>graph</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>graph</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>fast_</name><operator>.</operator><name>Graph</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Graph</name></name></type> <name>graph</name><parameter_list>(<parameter><decl><type><name><name>fast_</name><operator>.</operator><name>Graph</name></name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><call><name>__vector</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>j</name> <operator>*</operator> <literal>4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>graphLength</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__vector_len</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Log_</name><operator>.</operator><name>Commit_</name><operator>.</operator><name>Diff_</name><operator>.</operator><name>Hunk_</name><operator>.</operator><name>ModLine</name></name></type> <name>mod</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>mod</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>fast_</name><operator>.</operator><name>Log_</name><operator>.</operator><name>Commit_</name><operator>.</operator><name>Diff_</name><operator>.</operator><name>Hunk_</name><operator>.</operator><name>ModLine</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Log_</name><operator>.</operator><name>Commit_</name><operator>.</operator><name>Diff_</name><operator>.</operator><name>Hunk_</name><operator>.</operator><name>ModLine</name></name></type> <name>mod</name><parameter_list>(<parameter><decl><type><name><name>fast_</name><operator>.</operator><name>Log_</name><operator>.</operator><name>Commit_</name><operator>.</operator><name>Diff_</name><operator>.</operator><name>Hunk_</name><operator>.</operator><name>ModLine</name></name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>18</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><call><name>__vector</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>j</name> <operator>*</operator> <literal>4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>modLength</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>18</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__vector_len</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Slices</name></name></type> <name>slice</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>slice</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>fast_</name><operator>.</operator><name>Slices</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Slices</name></name></type> <name>slice</name><parameter_list>(<parameter><decl><type><name><name>fast_</name><operator>.</operator><name>Slices</name></name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createHunk</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>from_lineno</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>from_column</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>to_lineno</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>to_column</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>contextOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>elementOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>graphOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>modOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>sliceOffset</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Hunk</name><operator>.</operator><name>addSlice</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>sliceOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Hunk</name><operator>.</operator><name>addMod</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>modOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Hunk</name><operator>.</operator><name>addGraph</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>graphOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Hunk</name><operator>.</operator><name>addElement</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>elementOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Hunk</name><operator>.</operator><name>addContext</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>contextOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Hunk</name><operator>.</operator><name>addToColumn</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>to_column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Hunk</name><operator>.</operator><name>addToLineno</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>to_lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Hunk</name><operator>.</operator><name>addFromColumn</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>from_column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Hunk</name><operator>.</operator><name>addFromLineno</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>from_lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>Hunk</name><operator>.</operator><name>endHunk</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startHunk</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addFromLineno</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fromLineno</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addInt</name></name><argument_list>(<argument><expr><literal>0</literal></expr></argument>, <argument><expr><name>fromLineno</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addFromColumn</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fromColumn</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addInt</name></name><argument_list>(<argument><expr><literal>1</literal></expr></argument>, <argument><expr><name>fromColumn</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addToLineno</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>toLineno</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addInt</name></name><argument_list>(<argument><expr><literal>2</literal></expr></argument>, <argument><expr><name>toLineno</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addToColumn</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>toColumn</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addInt</name></name><argument_list>(<argument><expr><literal>3</literal></expr></argument>, <argument><expr><name>toColumn</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addContext</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>contextOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name>contextOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addElement</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>elementOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>5</literal></expr></argument>, <argument><expr><name>elementOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createElementVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>data</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal>1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal>0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block><expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for> <return>return <expr><call><name><name>builder</name><operator>.</operator><name>endVector</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startElementVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numElems</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name>numElems</name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addGraph</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>graphOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>6</literal></expr></argument>, <argument><expr><name>graphOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createGraphVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>data</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal>1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal>0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block><expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for> <return>return <expr><call><name><name>builder</name><operator>.</operator><name>endVector</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startGraphVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numElems</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name>numElems</name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addMod</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>modOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>7</literal></expr></argument>, <argument><expr><name>modOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createModVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>data</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal>1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal>0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block><expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for> <return>return <expr><call><name><name>builder</name><operator>.</operator><name>endVector</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startModVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numElems</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name>numElems</name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addSlice</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sliceOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>8</literal></expr></argument>, <argument><expr><name>sliceOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>endHunk</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>endObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>o</name></expr>;</return>
  }</block></function>
}</block></class>

</unit>

<unit xmlns="http://www.srcML.org/srcML/src" xmlns:java="http://www.srcML.org/srcML/java" revision="0.9.5" language="JAVA" filename="Users/yy66/Documents/github.com/yijunyu/demo-concodese/fast/src/main/java/fast_/Log_/Commit_/Diff_/Hunk_/ModLine.java"><comment>// automatically generated by the FlatBuffers compiler, do not modify</comment>

<package>package <name><name>fast_</name><operator>.</operator><name>Log_</name><operator>.</operator><name>Commit_</name><operator>.</operator><name>Diff_</name><operator>.</operator><name>Hunk_</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>flatbuffers</name><operator>.</operator><name>*</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal>"unused"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> <specifier>final</specifier> class <name>ModLine</name> <super><extends>extends <name>Table</name></extends></super> <block>{
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>ModLine</name></type> <name>getRootAsModLine</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>getRootAsModLine</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>ModLine</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>ModLine</name></type> <name>getRootAsModLine</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>, <parameter><decl><type><name>ModLine</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>_bb</name><operator>.</operator><name>order</name></name><argument_list>(<argument><expr><name><name>ByteOrder</name><operator>.</operator><name>LITTLE_ENDIAN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><operator>(</operator><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>__init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>bb_pos</name> <operator>=</operator> <name>_i</name></expr>;</expr_stmt> <expr_stmt><expr><name>bb</name> <operator>=</operator> <name>_bb</name></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <type><name>ModLine</name></type> <name>__assign</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>__init</name><argument_list>(<argument><expr><name>_i</name></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <type><name>String</name></type> <name>line</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__string</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>lineAsByteBuffer</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>__vector_as_bytebuffer</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>lineInByteBuffer</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>__vector_in_bytebuffer</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isAdd</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><literal>0</literal><operator>!=</operator><call><name><name>bb</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>false</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isDel</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><literal>0</literal><operator>!=</operator><call><name><name>bb</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>false</literal></expr></else></ternary></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createModLine</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>lineOffset</name></decl></parameter>,
      <parameter><decl><type><name>boolean</name></type> <name>is_add</name></decl></parameter>,
      <parameter><decl><type><name>boolean</name></type> <name>is_del</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ModLine</name><operator>.</operator><name>addLine</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>lineOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ModLine</name><operator>.</operator><name>addIsDel</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>is_del</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ModLine</name><operator>.</operator><name>addIsAdd</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>is_add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>ModLine</name><operator>.</operator><name>endModLine</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startModLine</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addLine</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lineOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>0</literal></expr></argument>, <argument><expr><name>lineOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addIsAdd</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isAdd</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addBoolean</name></name><argument_list>(<argument><expr><literal>1</literal></expr></argument>, <argument><expr><name>isAdd</name></expr></argument>, <argument><expr><literal>false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addIsDel</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isDel</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addBoolean</name></name><argument_list>(<argument><expr><literal>2</literal></expr></argument>, <argument><expr><name>isDel</name></expr></argument>, <argument><expr><literal>false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>endModLine</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>endObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>o</name></expr>;</return>
  }</block></function>
}</block></class>

</unit>

<unit xmlns="http://www.srcML.org/srcML/src" xmlns:java="http://www.srcML.org/srcML/java" revision="0.9.5" language="JAVA" filename="Users/yy66/Documents/github.com/yijunyu/demo-concodese/fast/src/main/java/fast_/Pairs.java"><comment>// automatically generated by the FlatBuffers compiler, do not modify</comment>

<package>package <name>fast_</name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>flatbuffers</name><operator>.</operator><name>*</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal>"unused"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> <specifier>final</specifier> class <name>Pairs</name> <super><extends>extends <name>Table</name></extends></super> <block>{
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Pairs</name></type> <name>getRootAsPairs</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>getRootAsPairs</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Pairs</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Pairs</name></type> <name>getRootAsPairs</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>, <parameter><decl><type><name>Pairs</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>_bb</name><operator>.</operator><name>order</name></name><argument_list>(<argument><expr><name><name>ByteOrder</name><operator>.</operator><name>LITTLE_ENDIAN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><operator>(</operator><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>__init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>bb_pos</name> <operator>=</operator> <name>_i</name></expr>;</expr_stmt> <expr_stmt><expr><name>bb</name> <operator>=</operator> <name>_bb</name></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <type><name>Pairs</name></type> <name>__assign</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>__init</name><argument_list>(<argument><expr><name>_i</name></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Pairs_</name><operator>.</operator><name>Pair</name></name></type> <name>pair</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>pair</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>fast_</name><operator>.</operator><name>Pairs_</name><operator>.</operator><name>Pair</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Pairs_</name><operator>.</operator><name>Pair</name></name></type> <name>pair</name><parameter_list>(<parameter><decl><type><name><name>fast_</name><operator>.</operator><name>Pairs_</name><operator>.</operator><name>Pair</name></name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><call><name>__vector</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>j</name> <operator>*</operator> <literal>4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>pairLength</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__vector_len</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createPairs</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>pairOffset</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Pairs</name><operator>.</operator><name>addPair</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>pairOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>Pairs</name><operator>.</operator><name>endPairs</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startPairs</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addPair</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pairOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>0</literal></expr></argument>, <argument><expr><name>pairOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createPairVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>data</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal>1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal>0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block><expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for> <return>return <expr><call><name><name>builder</name><operator>.</operator><name>endVector</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startPairVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numElems</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name>numElems</name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>endPairs</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>endObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>o</name></expr>;</return>
  }</block></function>
}</block></class>

</unit>

<unit xmlns="http://www.srcML.org/srcML/src" xmlns:java="http://www.srcML.org/srcML/java" revision="0.9.5" language="JAVA" filename="Users/yy66/Documents/github.com/yijunyu/demo-concodese/fast/src/main/java/fast_/Pairs_/Pair.java"><comment>// automatically generated by the FlatBuffers compiler, do not modify</comment>

<package>package <name><name>fast_</name><operator>.</operator><name>Pairs_</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>flatbuffers</name><operator>.</operator><name>*</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal>"unused"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> <specifier>final</specifier> class <name>Pair</name> <super><extends>extends <name>Table</name></extends></super> <block>{
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Pair</name></type> <name>getRootAsPair</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>getRootAsPair</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Pair</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Pair</name></type> <name>getRootAsPair</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>, <parameter><decl><type><name>Pair</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>_bb</name><operator>.</operator><name>order</name></name><argument_list>(<argument><expr><name><name>ByteOrder</name><operator>.</operator><name>LITTLE_ENDIAN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><operator>(</operator><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>__init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>bb_pos</name> <operator>=</operator> <name>_i</name></expr>;</expr_stmt> <expr_stmt><expr><name>bb</name> <operator>=</operator> <name>_bb</name></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <type><name>Pair</name></type> <name>__assign</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>__init</name><argument_list>(<argument><expr><name>_i</name></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Pairs_</name><operator>.</operator><name>Pair_</name><operator>.</operator><name>Diff</name></name></type> <name>left</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>left</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>fast_</name><operator>.</operator><name>Pairs_</name><operator>.</operator><name>Pair_</name><operator>.</operator><name>Diff</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Pairs_</name><operator>.</operator><name>Pair_</name><operator>.</operator><name>Diff</name></name></type> <name>left</name><parameter_list>(<parameter><decl><type><name><name>fast_</name><operator>.</operator><name>Pairs_</name><operator>.</operator><name>Pair_</name><operator>.</operator><name>Diff</name></name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Pairs_</name><operator>.</operator><name>Pair_</name><operator>.</operator><name>Diff</name></name></type> <name>right</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>right</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>fast_</name><operator>.</operator><name>Pairs_</name><operator>.</operator><name>Pair_</name><operator>.</operator><name>Diff</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Pairs_</name><operator>.</operator><name>Pair_</name><operator>.</operator><name>Diff</name></name></type> <name>right</name><parameter_list>(<parameter><decl><type><name><name>fast_</name><operator>.</operator><name>Pairs_</name><operator>.</operator><name>Pair_</name><operator>.</operator><name>Diff</name></name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>type</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createPair</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>leftOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>rightOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Pair</name><operator>.</operator><name>addType</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Pair</name><operator>.</operator><name>addRight</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>rightOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Pair</name><operator>.</operator><name>addLeft</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>leftOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>Pair</name><operator>.</operator><name>endPair</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startPair</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addLeft</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>leftOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>0</literal></expr></argument>, <argument><expr><name>leftOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addRight</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rightOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>1</literal></expr></argument>, <argument><expr><name>rightOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addType</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addInt</name></name><argument_list>(<argument><expr><literal>2</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>endPair</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>endObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>o</name></expr>;</return>
  }</block></function>
}</block></class>

</unit>

<unit xmlns="http://www.srcML.org/srcML/src" xmlns:java="http://www.srcML.org/srcML/java" revision="0.9.5" language="JAVA" filename="Users/yy66/Documents/github.com/yijunyu/demo-concodese/fast/src/main/java/fast_/Pairs_/Pair_/CloneType.java"><comment>// automatically generated by the FlatBuffers compiler, do not modify</comment>

<package>package <name><name>fast_</name><operator>.</operator><name>Pairs_</name><operator>.</operator><name>Pair_</name></name>;</package>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>CloneType</name> <block>{
  <constructor><specifier>private</specifier> <name>CloneType</name><parameter_list>()</parameter_list> <block>{ }</block></constructor>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>MAYBE</name> <init>= <expr><literal>0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>YES</name> <init>= <expr><literal>1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>NO</name> <init>= <expr><literal>2</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>names</name> <init>= <expr><block>{ <expr><literal>"MAYBE"</literal></expr>, <expr><literal>"YES"</literal></expr>, <expr><literal>"NO"</literal></expr>, }</block></expr></init></decl>;</decl_stmt>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name><name>names</name><index>[<expr><name>e</name></expr>]</index></name></expr>;</return> }</block></function>
}</block></class>

</unit>

<unit xmlns="http://www.srcML.org/srcML/src" xmlns:java="http://www.srcML.org/srcML/java" revision="0.9.5" language="JAVA" filename="Users/yy66/Documents/github.com/yijunyu/demo-concodese/fast/src/main/java/fast_/Pairs_/Pair_/Diff.java"><comment>// automatically generated by the FlatBuffers compiler, do not modify</comment>

<package>package <name><name>fast_</name><operator>.</operator><name>Pairs_</name><operator>.</operator><name>Pair_</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>flatbuffers</name><operator>.</operator><name>*</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal>"unused"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> <specifier>final</specifier> class <name>Diff</name> <super><extends>extends <name>Table</name></extends></super> <block>{
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Diff</name></type> <name>getRootAsDiff</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>getRootAsDiff</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Diff</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Diff</name></type> <name>getRootAsDiff</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>, <parameter><decl><type><name>Diff</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>_bb</name><operator>.</operator><name>order</name></name><argument_list>(<argument><expr><name><name>ByteOrder</name><operator>.</operator><name>LITTLE_ENDIAN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><operator>(</operator><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>__init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>bb_pos</name> <operator>=</operator> <name>_i</name></expr>;</expr_stmt> <expr_stmt><expr><name>bb</name> <operator>=</operator> <name>_bb</name></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <type><name>Diff</name></type> <name>__assign</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>__init</name><argument_list>(<argument><expr><name>_i</name></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <type><name>String</name></type> <name>project</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__string</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>projectAsByteBuffer</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>__vector_as_bytebuffer</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>projectInByteBuffer</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>__vector_in_bytebuffer</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>leftLine</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>leftColumn</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>rightLine</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>rightColumn</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Element</name></name></type> <name>oldCode</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>oldCode</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>fast_</name><operator>.</operator><name>Element</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Element</name></name></type> <name>oldCode</name><parameter_list>(<parameter><decl><type><name><name>fast_</name><operator>.</operator><name>Element</name></name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>14</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Element</name></name></type> <name>newCode</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>newCode</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>fast_</name><operator>.</operator><name>Element</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Element</name></name></type> <name>newCode</name><parameter_list>(<parameter><decl><type><name><name>fast_</name><operator>.</operator><name>Element</name></name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>String</name></type> <name>hash</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>18</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__string</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>hashAsByteBuffer</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>__vector_as_bytebuffer</name><argument_list>(<argument><expr><literal>18</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>hashInByteBuffer</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>__vector_in_bytebuffer</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><literal>18</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Slices</name></name></type> <name>slices</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>slices</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>fast_</name><operator>.</operator><name>Slices</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Slices</name></name></type> <name>slices</name><parameter_list>(<parameter><decl><type><name><name>fast_</name><operator>.</operator><name>Slices</name></name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createDiff</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>projectOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>left_line</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>left_column</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>right_line</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>right_column</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>old_codeOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>new_codeOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>hashOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>slicesOffset</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Diff</name><operator>.</operator><name>addSlices</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>slicesOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Diff</name><operator>.</operator><name>addHash</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>hashOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Diff</name><operator>.</operator><name>addNewCode</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>new_codeOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Diff</name><operator>.</operator><name>addOldCode</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>old_codeOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Diff</name><operator>.</operator><name>addRightColumn</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>right_column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Diff</name><operator>.</operator><name>addRightLine</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>right_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Diff</name><operator>.</operator><name>addLeftColumn</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>left_column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Diff</name><operator>.</operator><name>addLeftLine</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>left_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Diff</name><operator>.</operator><name>addProject</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>projectOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>Diff</name><operator>.</operator><name>endDiff</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startDiff</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addProject</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>projectOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>0</literal></expr></argument>, <argument><expr><name>projectOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addLeftLine</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>leftLine</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addInt</name></name><argument_list>(<argument><expr><literal>1</literal></expr></argument>, <argument><expr><name>leftLine</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addLeftColumn</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>leftColumn</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addInt</name></name><argument_list>(<argument><expr><literal>2</literal></expr></argument>, <argument><expr><name>leftColumn</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addRightLine</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rightLine</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addInt</name></name><argument_list>(<argument><expr><literal>3</literal></expr></argument>, <argument><expr><name>rightLine</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addRightColumn</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rightColumn</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addInt</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name>rightColumn</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addOldCode</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oldCodeOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>5</literal></expr></argument>, <argument><expr><name>oldCodeOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addNewCode</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>newCodeOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>6</literal></expr></argument>, <argument><expr><name>newCodeOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addHash</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hashOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>7</literal></expr></argument>, <argument><expr><name>hashOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addSlices</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slicesOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>8</literal></expr></argument>, <argument><expr><name>slicesOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>endDiff</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>endObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>o</name></expr>;</return>
  }</block></function>
}</block></class>

</unit>

<unit xmlns="http://www.srcML.org/srcML/src" xmlns:java="http://www.srcML.org/srcML/java" revision="0.9.5" language="JAVA" filename="Users/yy66/Documents/github.com/yijunyu/demo-concodese/fast/src/main/java/fast_/Python3Kind.java"><comment>// automatically generated by the FlatBuffers compiler, do not modify</comment>

<package>package <name>fast_</name>;</package>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>Python3Kind</name> <block>{
  <constructor><specifier>private</specifier> <name>Python3Kind</name><parameter_list>()</parameter_list> <block>{ }</block></constructor>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>single_input</name> <init>= <expr><literal>0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>file_input</name> <init>= <expr><literal>1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>eval_input</name> <init>= <expr><literal>2</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>decorator</name> <init>= <expr><literal>3</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>decorators</name> <init>= <expr><literal>4</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>decorated</name> <init>= <expr><literal>5</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>async_funcdef</name> <init>= <expr><literal>6</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>funcdef</name> <init>= <expr><literal>7</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>parameters</name> <init>= <expr><literal>8</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>typedargslist</name> <init>= <expr><literal>9</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>tfpdef</name> <init>= <expr><literal>10</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>varargslist</name> <init>= <expr><literal>11</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>vfpdef</name> <init>= <expr><literal>12</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>stmt</name> <init>= <expr><literal>13</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>simple_stmt</name> <init>= <expr><literal>14</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>small_stmt</name> <init>= <expr><literal>15</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>expr_stmt</name> <init>= <expr><literal>16</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>annassign</name> <init>= <expr><literal>17</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>testlist_star_expr</name> <init>= <expr><literal>18</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>augassign</name> <init>= <expr><literal>19</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>del_stmt</name> <init>= <expr><literal>20</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>pass_stmt</name> <init>= <expr><literal>21</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>flow_stmt</name> <init>= <expr><literal>22</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>break_stmt</name> <init>= <expr><literal>23</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>continue_stmt</name> <init>= <expr><literal>24</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>return_stmt</name> <init>= <expr><literal>25</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>yield_stmt</name> <init>= <expr><literal>26</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>raise_stmt</name> <init>= <expr><literal>27</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>import_stmt</name> <init>= <expr><literal>28</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>import_name</name> <init>= <expr><literal>29</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>import_from</name> <init>= <expr><literal>30</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>import_as_name</name> <init>= <expr><literal>31</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>dotted_as_name</name> <init>= <expr><literal>32</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>import_as_names</name> <init>= <expr><literal>33</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>dotted_as_names</name> <init>= <expr><literal>34</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>dotted_name</name> <init>= <expr><literal>35</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>global_stmt</name> <init>= <expr><literal>36</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>nonlocal_stmt</name> <init>= <expr><literal>37</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>assert_stmt</name> <init>= <expr><literal>38</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>compound_stmt</name> <init>= <expr><literal>39</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>async_stmt</name> <init>= <expr><literal>40</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>if_stmt</name> <init>= <expr><literal>41</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>while_stmt</name> <init>= <expr><literal>42</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>for_stmt</name> <init>= <expr><literal>43</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>try_stmt</name> <init>= <expr><literal>44</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>with_stmt</name> <init>= <expr><literal>45</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>with_item</name> <init>= <expr><literal>46</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>except_clause</name> <init>= <expr><literal>47</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>suite</name> <init>= <expr><literal>48</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>test</name> <init>= <expr><literal>49</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>test_nocond</name> <init>= <expr><literal>50</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>lambdef</name> <init>= <expr><literal>51</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>lambdef_nocond</name> <init>= <expr><literal>52</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>or_test</name> <init>= <expr><literal>53</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>and_test</name> <init>= <expr><literal>54</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>not_test</name> <init>= <expr><literal>55</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>comparison</name> <init>= <expr><literal>56</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>comp_op</name> <init>= <expr><literal>57</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>star_expr</name> <init>= <expr><literal>58</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>expr</name> <init>= <expr><literal>59</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>xor_expr</name> <init>= <expr><literal>60</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>and_expr</name> <init>= <expr><literal>61</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>shift_expr</name> <init>= <expr><literal>62</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>arith_expr</name> <init>= <expr><literal>63</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>term</name> <init>= <expr><literal>64</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>factor</name> <init>= <expr><literal>65</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>power</name> <init>= <expr><literal>66</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>atom_expr</name> <init>= <expr><literal>67</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>atom</name> <init>= <expr><literal>68</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>testlist_comp</name> <init>= <expr><literal>69</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>trailer</name> <init>= <expr><literal>70</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>subscriptlist</name> <init>= <expr><literal>71</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>subscript</name> <init>= <expr><literal>72</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>sliceop</name> <init>= <expr><literal>73</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>exprlist</name> <init>= <expr><literal>74</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>testlist</name> <init>= <expr><literal>75</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>dictorsetmaker</name> <init>= <expr><literal>76</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>classdef</name> <init>= <expr><literal>77</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>arglist</name> <init>= <expr><literal>78</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>argument</name> <init>= <expr><literal>79</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>comp_iter</name> <init>= <expr><literal>80</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>comp_for</name> <init>= <expr><literal>81</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>comp_if</name> <init>= <expr><literal>82</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>encoding_decl</name> <init>= <expr><literal>83</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>yield_expr</name> <init>= <expr><literal>84</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>yield_arg</name> <init>= <expr><literal>85</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>names</name> <init>= <expr><block>{ <expr><literal>"single_input"</literal></expr>, <expr><literal>"file_input"</literal></expr>, <expr><literal>"eval_input"</literal></expr>, <expr><literal>"decorator"</literal></expr>, <expr><literal>"decorators"</literal></expr>, <expr><literal>"decorated"</literal></expr>, <expr><literal>"async_funcdef"</literal></expr>, <expr><literal>"funcdef"</literal></expr>, <expr><literal>"parameters"</literal></expr>, <expr><literal>"typedargslist"</literal></expr>, <expr><literal>"tfpdef"</literal></expr>, <expr><literal>"varargslist"</literal></expr>, <expr><literal>"vfpdef"</literal></expr>, <expr><literal>"stmt"</literal></expr>, <expr><literal>"simple_stmt"</literal></expr>, <expr><literal>"small_stmt"</literal></expr>, <expr><literal>"expr_stmt"</literal></expr>, <expr><literal>"annassign"</literal></expr>, <expr><literal>"testlist_star_expr"</literal></expr>, <expr><literal>"augassign"</literal></expr>, <expr><literal>"del_stmt"</literal></expr>, <expr><literal>"pass_stmt"</literal></expr>, <expr><literal>"flow_stmt"</literal></expr>, <expr><literal>"break_stmt"</literal></expr>, <expr><literal>"continue_stmt"</literal></expr>, <expr><literal>"return_stmt"</literal></expr>, <expr><literal>"yield_stmt"</literal></expr>, <expr><literal>"raise_stmt"</literal></expr>, <expr><literal>"import_stmt"</literal></expr>, <expr><literal>"import_name"</literal></expr>, <expr><literal>"import_from"</literal></expr>, <expr><literal>"import_as_name"</literal></expr>, <expr><literal>"dotted_as_name"</literal></expr>, <expr><literal>"import_as_names"</literal></expr>, <expr><literal>"dotted_as_names"</literal></expr>, <expr><literal>"dotted_name"</literal></expr>, <expr><literal>"global_stmt"</literal></expr>, <expr><literal>"nonlocal_stmt"</literal></expr>, <expr><literal>"assert_stmt"</literal></expr>, <expr><literal>"compound_stmt"</literal></expr>, <expr><literal>"async_stmt"</literal></expr>, <expr><literal>"if_stmt"</literal></expr>, <expr><literal>"while_stmt"</literal></expr>, <expr><literal>"for_stmt"</literal></expr>, <expr><literal>"try_stmt"</literal></expr>, <expr><literal>"with_stmt"</literal></expr>, <expr><literal>"with_item"</literal></expr>, <expr><literal>"except_clause"</literal></expr>, <expr><literal>"suite"</literal></expr>, <expr><literal>"test"</literal></expr>, <expr><literal>"test_nocond"</literal></expr>, <expr><literal>"lambdef"</literal></expr>, <expr><literal>"lambdef_nocond"</literal></expr>, <expr><literal>"or_test"</literal></expr>, <expr><literal>"and_test"</literal></expr>, <expr><literal>"not_test"</literal></expr>, <expr><literal>"comparison"</literal></expr>, <expr><literal>"comp_op"</literal></expr>, <expr><literal>"star_expr"</literal></expr>, <expr><literal>"expr"</literal></expr>, <expr><literal>"xor_expr"</literal></expr>, <expr><literal>"and_expr"</literal></expr>, <expr><literal>"shift_expr"</literal></expr>, <expr><literal>"arith_expr"</literal></expr>, <expr><literal>"term"</literal></expr>, <expr><literal>"factor"</literal></expr>, <expr><literal>"power"</literal></expr>, <expr><literal>"atom_expr"</literal></expr>, <expr><literal>"atom"</literal></expr>, <expr><literal>"testlist_comp"</literal></expr>, <expr><literal>"trailer"</literal></expr>, <expr><literal>"subscriptlist"</literal></expr>, <expr><literal>"subscript"</literal></expr>, <expr><literal>"sliceop"</literal></expr>, <expr><literal>"exprlist"</literal></expr>, <expr><literal>"testlist"</literal></expr>, <expr><literal>"dictorsetmaker"</literal></expr>, <expr><literal>"classdef"</literal></expr>, <expr><literal>"arglist"</literal></expr>, <expr><literal>"argument"</literal></expr>, <expr><literal>"comp_iter"</literal></expr>, <expr><literal>"comp_for"</literal></expr>, <expr><literal>"comp_if"</literal></expr>, <expr><literal>"encoding_decl"</literal></expr>, <expr><literal>"yield_expr"</literal></expr>, <expr><literal>"yield_arg"</literal></expr>, }</block></expr></init></decl>;</decl_stmt>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name><name>names</name><index>[<expr><name>e</name></expr>]</index></name></expr>;</return> }</block></function>
}</block></class>

</unit>

<unit xmlns="http://www.srcML.org/srcML/src" xmlns:java="http://www.srcML.org/srcML/java" revision="0.9.5" language="JAVA" filename="Users/yy66/Documents/github.com/yijunyu/demo-concodese/fast/src/main/java/fast_/Slices.java"><comment>// automatically generated by the FlatBuffers compiler, do not modify</comment>

<package>package <name>fast_</name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>flatbuffers</name><operator>.</operator><name>*</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal>"unused"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> <specifier>final</specifier> class <name>Slices</name> <super><extends>extends <name>Table</name></extends></super> <block>{
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Slices</name></type> <name>getRootAsSlices</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>getRootAsSlices</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Slices</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Slices</name></type> <name>getRootAsSlices</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>, <parameter><decl><type><name>Slices</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>_bb</name><operator>.</operator><name>order</name></name><argument_list>(<argument><expr><name><name>ByteOrder</name><operator>.</operator><name>LITTLE_ENDIAN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><operator>(</operator><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>__init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>bb_pos</name> <operator>=</operator> <name>_i</name></expr>;</expr_stmt> <expr_stmt><expr><name>bb</name> <operator>=</operator> <name>_bb</name></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <type><name>Slices</name></type> <name>__assign</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>__init</name><argument_list>(<argument><expr><name>_i</name></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Slices_</name><operator>.</operator><name>Slice</name></name></type> <name>slice</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>slice</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>fast_</name><operator>.</operator><name>Slices_</name><operator>.</operator><name>Slice</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Slices_</name><operator>.</operator><name>Slice</name></name></type> <name>slice</name><parameter_list>(<parameter><decl><type><name><name>fast_</name><operator>.</operator><name>Slices_</name><operator>.</operator><name>Slice</name></name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><call><name>__vector</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>j</name> <operator>*</operator> <literal>4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>sliceLength</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__vector_len</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createSlices</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>sliceOffset</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Slices</name><operator>.</operator><name>addSlice</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>sliceOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>Slices</name><operator>.</operator><name>endSlices</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startSlices</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addSlice</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sliceOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>0</literal></expr></argument>, <argument><expr><name>sliceOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createSliceVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>data</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal>1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal>0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block><expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for> <return>return <expr><call><name><name>builder</name><operator>.</operator><name>endVector</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startSliceVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numElems</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name>numElems</name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>endSlices</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>endObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>o</name></expr>;</return>
  }</block></function>
}</block></class>

</unit>

<unit xmlns="http://www.srcML.org/srcML/src" xmlns:java="http://www.srcML.org/srcML/java" revision="0.9.5" language="JAVA" filename="Users/yy66/Documents/github.com/yijunyu/demo-concodese/fast/src/main/java/fast_/Slices_/Slice.java"><comment>// automatically generated by the FlatBuffers compiler, do not modify</comment>

<package>package <name><name>fast_</name><operator>.</operator><name>Slices_</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>flatbuffers</name><operator>.</operator><name>*</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal>"unused"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> <specifier>final</specifier> class <name>Slice</name> <super><extends>extends <name>Table</name></extends></super> <block>{
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Slice</name></type> <name>getRootAsSlice</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>getRootAsSlice</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Slice</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Slice</name></type> <name>getRootAsSlice</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>, <parameter><decl><type><name>Slice</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>_bb</name><operator>.</operator><name>order</name></name><argument_list>(<argument><expr><name><name>ByteOrder</name><operator>.</operator><name>LITTLE_ENDIAN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><operator>(</operator><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>__init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>bb_pos</name> <operator>=</operator> <name>_i</name></expr>;</expr_stmt> <expr_stmt><expr><name>bb</name> <operator>=</operator> <name>_bb</name></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <type><name>Slice</name></type> <name>__assign</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>__init</name><argument_list>(<argument><expr><name>_i</name></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Slices_</name><operator>.</operator><name>Slice_</name><operator>.</operator><name>SourceFile</name></name></type> <name>file</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>file</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>fast_</name><operator>.</operator><name>Slices_</name><operator>.</operator><name>Slice_</name><operator>.</operator><name>SourceFile</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Slices_</name><operator>.</operator><name>Slice_</name><operator>.</operator><name>SourceFile</name></name></type> <name>file</name><parameter_list>(<parameter><decl><type><name><name>fast_</name><operator>.</operator><name>Slices_</name><operator>.</operator><name>Slice_</name><operator>.</operator><name>SourceFile</name></name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><call><name>__vector</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>j</name> <operator>*</operator> <literal>4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>fileLength</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__vector_len</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>String</name></type> <name>hash</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__string</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>hashAsByteBuffer</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>__vector_as_bytebuffer</name><argument_list>(<argument><expr><literal>6</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>hashInByteBuffer</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>__vector_in_bytebuffer</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><literal>6</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createSlice</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>fileOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>hashOffset</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Slice</name><operator>.</operator><name>addHash</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>hashOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Slice</name><operator>.</operator><name>addFile</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>fileOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>Slice</name><operator>.</operator><name>endSlice</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startSlice</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addFile</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fileOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>0</literal></expr></argument>, <argument><expr><name>fileOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createFileVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>data</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal>1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal>0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block><expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for> <return>return <expr><call><name><name>builder</name><operator>.</operator><name>endVector</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startFileVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numElems</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name>numElems</name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addHash</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hashOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>1</literal></expr></argument>, <argument><expr><name>hashOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>endSlice</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>endObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>o</name></expr>;</return>
  }</block></function>
}</block></class>

</unit>

<unit xmlns="http://www.srcML.org/srcML/src" xmlns:java="http://www.srcML.org/srcML/java" revision="0.9.5" language="JAVA" filename="Users/yy66/Documents/github.com/yijunyu/demo-concodese/fast/src/main/java/fast_/Slices_/Slice_/ChangeType.java"><comment>// automatically generated by the FlatBuffers compiler, do not modify</comment>

<package>package <name><name>fast_</name><operator>.</operator><name>Slices_</name><operator>.</operator><name>Slice_</name></name>;</package>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>ChangeType</name> <block>{
  <constructor><specifier>private</specifier> <name>ChangeType</name><parameter_list>()</parameter_list> <block>{ }</block></constructor>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>UNCHANGED</name> <init>= <expr><literal>0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ADD</name> <init>= <expr><literal>1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DEL</name> <init>= <expr><literal>2</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>names</name> <init>= <expr><block>{ <expr><literal>"UNCHANGED"</literal></expr>, <expr><literal>"ADD"</literal></expr>, <expr><literal>"DEL"</literal></expr>, }</block></expr></init></decl>;</decl_stmt>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name><name>names</name><index>[<expr><name>e</name></expr>]</index></name></expr>;</return> }</block></function>
}</block></class>

</unit>

<unit xmlns="http://www.srcML.org/srcML/src" xmlns:java="http://www.srcML.org/srcML/java" revision="0.9.5" language="JAVA" filename="Users/yy66/Documents/github.com/yijunyu/demo-concodese/fast/src/main/java/fast_/Slices_/Slice_/SourceFile.java"><comment>// automatically generated by the FlatBuffers compiler, do not modify</comment>

<package>package <name><name>fast_</name><operator>.</operator><name>Slices_</name><operator>.</operator><name>Slice_</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>flatbuffers</name><operator>.</operator><name>*</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal>"unused"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> <specifier>final</specifier> class <name>SourceFile</name> <super><extends>extends <name>Table</name></extends></super> <block>{
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>SourceFile</name></type> <name>getRootAsSourceFile</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>getRootAsSourceFile</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>SourceFile</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>SourceFile</name></type> <name>getRootAsSourceFile</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>, <parameter><decl><type><name>SourceFile</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>_bb</name><operator>.</operator><name>order</name></name><argument_list>(<argument><expr><name><name>ByteOrder</name><operator>.</operator><name>LITTLE_ENDIAN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><operator>(</operator><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>__init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>bb_pos</name> <operator>=</operator> <name>_i</name></expr>;</expr_stmt> <expr_stmt><expr><name>bb</name> <operator>=</operator> <name>_bb</name></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <type><name>SourceFile</name></type> <name>__assign</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>__init</name><argument_list>(<argument><expr><name>_i</name></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Slices_</name><operator>.</operator><name>Slice_</name><operator>.</operator><name>SourceFile_</name><operator>.</operator><name>Function</name></name></type> <name>function</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>function</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>fast_</name><operator>.</operator><name>Slices_</name><operator>.</operator><name>Slice_</name><operator>.</operator><name>SourceFile_</name><operator>.</operator><name>Function</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Slices_</name><operator>.</operator><name>Slice_</name><operator>.</operator><name>SourceFile_</name><operator>.</operator><name>Function</name></name></type> <name>function</name><parameter_list>(<parameter><decl><type><name><name>fast_</name><operator>.</operator><name>Slices_</name><operator>.</operator><name>Slice_</name><operator>.</operator><name>SourceFile_</name><operator>.</operator><name>Function</name></name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><call><name>__vector</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>j</name> <operator>*</operator> <literal>4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>functionLength</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__vector_len</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>String</name></type> <name>name</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__string</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>nameAsByteBuffer</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>__vector_as_bytebuffer</name><argument_list>(<argument><expr><literal>6</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>nameInByteBuffer</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>__vector_in_bytebuffer</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><literal>6</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>type</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createSourceFile</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>functionOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>nameOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>SourceFile</name><operator>.</operator><name>addType</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>SourceFile</name><operator>.</operator><name>addName</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>nameOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>SourceFile</name><operator>.</operator><name>addFunction</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>functionOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>SourceFile</name><operator>.</operator><name>endSourceFile</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startSourceFile</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addFunction</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>functionOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>0</literal></expr></argument>, <argument><expr><name>functionOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createFunctionVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>data</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal>1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal>0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block><expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for> <return>return <expr><call><name><name>builder</name><operator>.</operator><name>endVector</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startFunctionVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numElems</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name>numElems</name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addName</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nameOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>1</literal></expr></argument>, <argument><expr><name>nameOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addType</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addInt</name></name><argument_list>(<argument><expr><literal>2</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>endSourceFile</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>endObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>o</name></expr>;</return>
  }</block></function>
}</block></class>

</unit>

<unit xmlns="http://www.srcML.org/srcML/src" xmlns:java="http://www.srcML.org/srcML/java" revision="0.9.5" language="JAVA" filename="Users/yy66/Documents/github.com/yijunyu/demo-concodese/fast/src/main/java/fast_/Slices_/Slice_/SourceFile_/Function.java"><comment>// automatically generated by the FlatBuffers compiler, do not modify</comment>

<package>package <name><name>fast_</name><operator>.</operator><name>Slices_</name><operator>.</operator><name>Slice_</name><operator>.</operator><name>SourceFile_</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>flatbuffers</name><operator>.</operator><name>*</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal>"unused"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> <specifier>final</specifier> class <name>Function</name> <super><extends>extends <name>Table</name></extends></super> <block>{
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Function</name></type> <name>getRootAsFunction</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>getRootAsFunction</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Function</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Function</name></type> <name>getRootAsFunction</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>, <parameter><decl><type><name>Function</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>_bb</name><operator>.</operator><name>order</name></name><argument_list>(<argument><expr><name><name>ByteOrder</name><operator>.</operator><name>LITTLE_ENDIAN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><operator>(</operator><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>__init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>bb_pos</name> <operator>=</operator> <name>_i</name></expr>;</expr_stmt> <expr_stmt><expr><name>bb</name> <operator>=</operator> <name>_bb</name></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <type><name>Function</name></type> <name>__assign</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>__init</name><argument_list>(<argument><expr><name>_i</name></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Slices_</name><operator>.</operator><name>Slice_</name><operator>.</operator><name>SourceFile_</name><operator>.</operator><name>Function_</name><operator>.</operator><name>Variable</name></name></type> <name>variable</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>variable</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>fast_</name><operator>.</operator><name>Slices_</name><operator>.</operator><name>Slice_</name><operator>.</operator><name>SourceFile_</name><operator>.</operator><name>Function_</name><operator>.</operator><name>Variable</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Slices_</name><operator>.</operator><name>Slice_</name><operator>.</operator><name>SourceFile_</name><operator>.</operator><name>Function_</name><operator>.</operator><name>Variable</name></name></type> <name>variable</name><parameter_list>(<parameter><decl><type><name><name>fast_</name><operator>.</operator><name>Slices_</name><operator>.</operator><name>Slice_</name><operator>.</operator><name>SourceFile_</name><operator>.</operator><name>Function_</name><operator>.</operator><name>Variable</name></name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><call><name>__vector</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>j</name> <operator>*</operator> <literal>4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>variableLength</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__vector_len</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>String</name></type> <name>name</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__string</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>nameAsByteBuffer</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>__vector_as_bytebuffer</name><argument_list>(<argument><expr><literal>6</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>nameInByteBuffer</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>__vector_in_bytebuffer</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><literal>6</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>type</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createFunction</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>variableOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>nameOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Function</name><operator>.</operator><name>addType</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Function</name><operator>.</operator><name>addName</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>nameOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Function</name><operator>.</operator><name>addVariable</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>variableOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>Function</name><operator>.</operator><name>endFunction</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startFunction</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addVariable</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>variableOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>0</literal></expr></argument>, <argument><expr><name>variableOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createVariableVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>data</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal>1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal>0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block><expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for> <return>return <expr><call><name><name>builder</name><operator>.</operator><name>endVector</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startVariableVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numElems</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name>numElems</name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addName</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nameOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>1</literal></expr></argument>, <argument><expr><name>nameOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addType</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addInt</name></name><argument_list>(<argument><expr><literal>2</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>endFunction</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>endObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>o</name></expr>;</return>
  }</block></function>
}</block></class>

</unit>

<unit xmlns="http://www.srcML.org/srcML/src" xmlns:java="http://www.srcML.org/srcML/java" revision="0.9.5" language="JAVA" filename="Users/yy66/Documents/github.com/yijunyu/demo-concodese/fast/src/main/java/fast_/Slices_/Slice_/SourceFile_/Function_/Variable.java"><comment>// automatically generated by the FlatBuffers compiler, do not modify</comment>

<package>package <name><name>fast_</name><operator>.</operator><name>Slices_</name><operator>.</operator><name>Slice_</name><operator>.</operator><name>SourceFile_</name><operator>.</operator><name>Function_</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>flatbuffers</name><operator>.</operator><name>*</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal>"unused"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> <specifier>final</specifier> class <name>Variable</name> <super><extends>extends <name>Table</name></extends></super> <block>{
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Variable</name></type> <name>getRootAsVariable</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>getRootAsVariable</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Variable</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Variable</name></type> <name>getRootAsVariable</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>, <parameter><decl><type><name>Variable</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>_bb</name><operator>.</operator><name>order</name></name><argument_list>(<argument><expr><name><name>ByteOrder</name><operator>.</operator><name>LITTLE_ENDIAN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><operator>(</operator><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>__init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>bb_pos</name> <operator>=</operator> <name>_i</name></expr>;</expr_stmt> <expr_stmt><expr><name>bb</name> <operator>=</operator> <name>_bb</name></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <type><name>Variable</name></type> <name>__assign</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>__init</name><argument_list>(<argument><expr><name>_i</name></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <type><name>String</name></type> <name>name</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__string</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>nameAsByteBuffer</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>__vector_as_bytebuffer</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>nameInByteBuffer</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>__vector_in_bytebuffer</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Slices_</name><operator>.</operator><name>Slice_</name><operator>.</operator><name>SourceFile_</name><operator>.</operator><name>Function_</name><operator>.</operator><name>Variable_</name><operator>.</operator><name>Position</name></name></type> <name>pos</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>pos</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>fast_</name><operator>.</operator><name>Slices_</name><operator>.</operator><name>Slice_</name><operator>.</operator><name>SourceFile_</name><operator>.</operator><name>Function_</name><operator>.</operator><name>Variable_</name><operator>.</operator><name>Position</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Slices_</name><operator>.</operator><name>Slice_</name><operator>.</operator><name>SourceFile_</name><operator>.</operator><name>Function_</name><operator>.</operator><name>Variable_</name><operator>.</operator><name>Position</name></name></type> <name>pos</name><parameter_list>(<parameter><decl><type><name><name>fast_</name><operator>.</operator><name>Slices_</name><operator>.</operator><name>Slice_</name><operator>.</operator><name>SourceFile_</name><operator>.</operator><name>Function_</name><operator>.</operator><name>Variable_</name><operator>.</operator><name>Position</name></name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>type</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Slices_</name><operator>.</operator><name>Slice_</name><operator>.</operator><name>SourceFile_</name><operator>.</operator><name>Function_</name><operator>.</operator><name>Variable_</name><operator>.</operator><name>Position</name></name></type> <name>defn</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>defn</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>fast_</name><operator>.</operator><name>Slices_</name><operator>.</operator><name>Slice_</name><operator>.</operator><name>SourceFile_</name><operator>.</operator><name>Function_</name><operator>.</operator><name>Variable_</name><operator>.</operator><name>Position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Slices_</name><operator>.</operator><name>Slice_</name><operator>.</operator><name>SourceFile_</name><operator>.</operator><name>Function_</name><operator>.</operator><name>Variable_</name><operator>.</operator><name>Position</name></name></type> <name>defn</name><parameter_list>(<parameter><decl><type><name><name>fast_</name><operator>.</operator><name>Slices_</name><operator>.</operator><name>Slice_</name><operator>.</operator><name>SourceFile_</name><operator>.</operator><name>Function_</name><operator>.</operator><name>Variable_</name><operator>.</operator><name>Position</name></name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><call><name>__vector</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>j</name> <operator>*</operator> <literal>4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>defnLength</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__vector_len</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Slices_</name><operator>.</operator><name>Slice_</name><operator>.</operator><name>SourceFile_</name><operator>.</operator><name>Function_</name><operator>.</operator><name>Variable_</name><operator>.</operator><name>Position</name></name></type> <name>use</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>use</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>fast_</name><operator>.</operator><name>Slices_</name><operator>.</operator><name>Slice_</name><operator>.</operator><name>SourceFile_</name><operator>.</operator><name>Function_</name><operator>.</operator><name>Variable_</name><operator>.</operator><name>Position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Slices_</name><operator>.</operator><name>Slice_</name><operator>.</operator><name>SourceFile_</name><operator>.</operator><name>Function_</name><operator>.</operator><name>Variable_</name><operator>.</operator><name>Position</name></name></type> <name>use</name><parameter_list>(<parameter><decl><type><name><name>fast_</name><operator>.</operator><name>Slices_</name><operator>.</operator><name>Slice_</name><operator>.</operator><name>SourceFile_</name><operator>.</operator><name>Function_</name><operator>.</operator><name>Variable_</name><operator>.</operator><name>Position</name></name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><call><name>__vector</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>j</name> <operator>*</operator> <literal>4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>useLength</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__vector_len</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>String</name></type> <name>dvar</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>14</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__string</name><argument_list>(<argument><expr><call><name>__vector</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>j</name> <operator>*</operator> <literal>4</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>dvarLength</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>14</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__vector_len</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>String</name></type> <name>alias</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__string</name><argument_list>(<argument><expr><call><name>__vector</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>j</name> <operator>*</operator> <literal>4</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>aliasLength</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__vector_len</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Slices_</name><operator>.</operator><name>Slice_</name><operator>.</operator><name>SourceFile_</name><operator>.</operator><name>Function_</name><operator>.</operator><name>Variable_</name><operator>.</operator><name>FunctionDecl</name></name></type> <name>cfunc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>cfunc</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>fast_</name><operator>.</operator><name>Slices_</name><operator>.</operator><name>Slice_</name><operator>.</operator><name>SourceFile_</name><operator>.</operator><name>Function_</name><operator>.</operator><name>Variable_</name><operator>.</operator><name>FunctionDecl</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name><name>fast_</name><operator>.</operator><name>Slices_</name><operator>.</operator><name>Slice_</name><operator>.</operator><name>SourceFile_</name><operator>.</operator><name>Function_</name><operator>.</operator><name>Variable_</name><operator>.</operator><name>FunctionDecl</name></name></type> <name>cfunc</name><parameter_list>(<parameter><decl><type><name><name>fast_</name><operator>.</operator><name>Slices_</name><operator>.</operator><name>Slice_</name><operator>.</operator><name>SourceFile_</name><operator>.</operator><name>Function_</name><operator>.</operator><name>Variable_</name><operator>.</operator><name>FunctionDecl</name></name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>18</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name>__indirect</name><argument_list>(<argument><expr><call><name>__vector</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>j</name> <operator>*</operator> <literal>4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>cfuncLength</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>18</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__vector_len</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createVariable</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>nameOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>posOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>defnOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>useOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>dvarOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>aliasOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>cfuncOffset</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Variable</name><operator>.</operator><name>addCfunc</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>cfuncOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Variable</name><operator>.</operator><name>addAlias</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>aliasOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Variable</name><operator>.</operator><name>addDvar</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>dvarOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Variable</name><operator>.</operator><name>addUse</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>useOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Variable</name><operator>.</operator><name>addDefn</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>defnOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Variable</name><operator>.</operator><name>addType</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Variable</name><operator>.</operator><name>addPos</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>posOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Variable</name><operator>.</operator><name>addName</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>nameOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>Variable</name><operator>.</operator><name>endVariable</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startVariable</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addName</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nameOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>0</literal></expr></argument>, <argument><expr><name>nameOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addPos</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>posOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>1</literal></expr></argument>, <argument><expr><name>posOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addType</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addInt</name></name><argument_list>(<argument><expr><literal>2</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addDefn</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defnOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>3</literal></expr></argument>, <argument><expr><name>defnOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createDefnVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>data</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal>1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal>0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block><expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for> <return>return <expr><call><name><name>builder</name><operator>.</operator><name>endVector</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startDefnVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numElems</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name>numElems</name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addUse</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>useOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name>useOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createUseVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>data</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal>1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal>0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block><expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for> <return>return <expr><call><name><name>builder</name><operator>.</operator><name>endVector</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startUseVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numElems</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name>numElems</name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addDvar</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dvarOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>5</literal></expr></argument>, <argument><expr><name>dvarOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createDvarVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>data</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal>1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal>0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block><expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for> <return>return <expr><call><name><name>builder</name><operator>.</operator><name>endVector</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startDvarVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numElems</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name>numElems</name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addAlias</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>aliasOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>6</literal></expr></argument>, <argument><expr><name>aliasOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createAliasVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>data</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal>1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal>0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block><expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for> <return>return <expr><call><name><name>builder</name><operator>.</operator><name>endVector</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startAliasVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numElems</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name>numElems</name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addCfunc</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cfuncOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>7</literal></expr></argument>, <argument><expr><name>cfuncOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createCfuncVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>data</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal>1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal>0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block><expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for> <return>return <expr><call><name><name>builder</name><operator>.</operator><name>endVector</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startCfuncVector</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numElems</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startVector</name></name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><name>numElems</name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>endVariable</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>endObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>o</name></expr>;</return>
  }</block></function>
}</block></class>

</unit>

<unit xmlns="http://www.srcML.org/srcML/src" xmlns:java="http://www.srcML.org/srcML/java" revision="0.9.5" language="JAVA" filename="Users/yy66/Documents/github.com/yijunyu/demo-concodese/fast/src/main/java/fast_/Slices_/Slice_/SourceFile_/Function_/Variable_/FunctionDecl.java"><comment>// automatically generated by the FlatBuffers compiler, do not modify</comment>

<package>package <name><name>fast_</name><operator>.</operator><name>Slices_</name><operator>.</operator><name>Slice_</name><operator>.</operator><name>SourceFile_</name><operator>.</operator><name>Function_</name><operator>.</operator><name>Variable_</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>flatbuffers</name><operator>.</operator><name>*</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal>"unused"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> <specifier>final</specifier> class <name>FunctionDecl</name> <super><extends>extends <name>Table</name></extends></super> <block>{
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>FunctionDecl</name></type> <name>getRootAsFunctionDecl</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>getRootAsFunctionDecl</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>FunctionDecl</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>FunctionDecl</name></type> <name>getRootAsFunctionDecl</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>, <parameter><decl><type><name>FunctionDecl</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>_bb</name><operator>.</operator><name>order</name></name><argument_list>(<argument><expr><name><name>ByteOrder</name><operator>.</operator><name>LITTLE_ENDIAN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><operator>(</operator><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>__init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>bb_pos</name> <operator>=</operator> <name>_i</name></expr>;</expr_stmt> <expr_stmt><expr><name>bb</name> <operator>=</operator> <name>_bb</name></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <type><name>FunctionDecl</name></type> <name>__assign</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>__init</name><argument_list>(<argument><expr><name>_i</name></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <type><name>String</name></type> <name>name</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__string</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>nameAsByteBuffer</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>__vector_as_bytebuffer</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>nameInByteBuffer</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>__vector_in_bytebuffer</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>String</name></type> <name>location</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__string</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>locationAsByteBuffer</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>__vector_as_bytebuffer</name><argument_list>(<argument><expr><literal>6</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>locationInByteBuffer</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>__vector_in_bytebuffer</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><literal>6</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createFunctionDecl</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>nameOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>locationOffset</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>FunctionDecl</name><operator>.</operator><name>addLocation</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>locationOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>FunctionDecl</name><operator>.</operator><name>addName</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>nameOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>FunctionDecl</name><operator>.</operator><name>endFunctionDecl</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startFunctionDecl</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addName</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nameOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>0</literal></expr></argument>, <argument><expr><name>nameOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addLocation</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>locationOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>1</literal></expr></argument>, <argument><expr><name>locationOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>endFunctionDecl</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>endObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>o</name></expr>;</return>
  }</block></function>
}</block></class>

</unit>

<unit xmlns="http://www.srcML.org/srcML/src" xmlns:java="http://www.srcML.org/srcML/java" revision="0.9.5" language="JAVA" filename="Users/yy66/Documents/github.com/yijunyu/demo-concodese/fast/src/main/java/fast_/Slices_/Slice_/SourceFile_/Function_/Variable_/Position.java"><comment>// automatically generated by the FlatBuffers compiler, do not modify</comment>

<package>package <name><name>fast_</name><operator>.</operator><name>Slices_</name><operator>.</operator><name>Slice_</name><operator>.</operator><name>SourceFile_</name><operator>.</operator><name>Function_</name><operator>.</operator><name>Variable_</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>flatbuffers</name><operator>.</operator><name>*</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal>"unused"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> <specifier>final</specifier> class <name>Position</name> <super><extends>extends <name>Table</name></extends></super> <block>{
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Position</name></type> <name>getRootAsPosition</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>getRootAsPosition</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Position</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Position</name></type> <name>getRootAsPosition</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>, <parameter><decl><type><name>Position</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>_bb</name><operator>.</operator><name>order</name></name><argument_list>(<argument><expr><name><name>ByteOrder</name><operator>.</operator><name>LITTLE_ENDIAN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><operator>(</operator><call><name><name>obj</name><operator>.</operator><name>__assign</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>_bb</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>__init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>bb_pos</name> <operator>=</operator> <name>_i</name></expr>;</expr_stmt> <expr_stmt><expr><name>bb</name> <operator>=</operator> <name>_bb</name></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <type><name>Position</name></type> <name>__assign</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_i</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>__init</name><argument_list>(<argument><expr><name>_i</name></expr></argument>, <argument><expr><name>_bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <type><name>String</name></type> <name>location</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__string</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>locationAsByteBuffer</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>__vector_as_bytebuffer</name><argument_list>(<argument><expr><literal>4</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>locationInByteBuffer</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>__vector_in_bytebuffer</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><literal>4</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>type</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name><name>bb</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>0</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>String</name></type> <name>deltaLocation</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>__offset</name><argument_list>(<argument><expr><literal>8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal>0</literal></expr> ?</condition><then> <expr><call><name>__string</name><argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>bb_pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal>null</literal></expr></else></ternary></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>deltaLocationAsByteBuffer</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>__vector_as_bytebuffer</name><argument_list>(<argument><expr><literal>8</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>public</specifier> <type><name>ByteBuffer</name></type> <name>deltaLocationInByteBuffer</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_bb</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>__vector_in_bytebuffer</name><argument_list>(<argument><expr><name>_bb</name></expr></argument>, <argument><expr><literal>8</literal></expr></argument>, <argument><expr><literal>1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>createPosition</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>locationOffset</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>delta_locationOffset</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Position</name><operator>.</operator><name>addDeltaLocation</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>delta_locationOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Position</name><operator>.</operator><name>addType</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Position</name><operator>.</operator><name>addLocation</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>locationOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>Position</name><operator>.</operator><name>endPosition</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startPosition</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startObject</name></name><argument_list>(<argument><expr><literal>3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addLocation</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>locationOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>0</literal></expr></argument>, <argument><expr><name>locationOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addType</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addInt</name></name><argument_list>(<argument><expr><literal>1</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addDeltaLocation</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>deltaLocationOffset</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addOffset</name></name><argument_list>(<argument><expr><literal>2</literal></expr></argument>, <argument><expr><name>deltaLocationOffset</name></expr></argument>, <argument><expr><literal>0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>endPosition</name><parameter_list>(<parameter><decl><type><name>FlatBufferBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>endObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>o</name></expr>;</return>
  }</block></function>
}</block></class>

</unit>

<unit xmlns="http://www.srcML.org/srcML/src" xmlns:java="http://www.srcML.org/srcML/java" revision="0.9.5" language="JAVA" filename="Users/yy66/Documents/github.com/yijunyu/demo-concodese/fast/src/main/java/fast_/SmaliKind.java"><comment>// automatically generated by the FlatBuffers compiler, do not modify</comment>

<package>package <name>fast_</name>;</package>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>SmaliKind</name> <block>{
  <constructor><specifier>private</specifier> <name>SmaliKind</name><parameter_list>()</parameter_list> <block>{ }</block></constructor>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>smali_file</name> <init>= <expr><literal>0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>class_spec</name> <init>= <expr><literal>1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>super_spec</name> <init>= <expr><literal>2</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>implements_spec</name> <init>= <expr><literal>3</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>source_spec</name> <init>= <expr><literal>4</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>access_list</name> <init>= <expr><literal>5</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>field</name> <init>= <expr><literal>6</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>method</name> <init>= <expr><literal>7</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>statements_and_directives</name> <init>= <expr><literal>8</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ordered_method_item</name> <init>= <expr><literal>9</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>registers_directive</name> <init>= <expr><literal>10</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>param_list_or_id</name> <init>= <expr><literal>11</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>simple_name</name> <init>= <expr><literal>12</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>member_name</name> <init>= <expr><literal>13</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>method_prototype</name> <init>= <expr><literal>14</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>param_list_or_id_primitive_type</name> <init>= <expr><literal>15</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>param_list</name> <init>= <expr><literal>16</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>array_descriptor</name> <init>= <expr><literal>17</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>type_descriptor</name> <init>= <expr><literal>18</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>nonvoid_type_descriptor</name> <init>= <expr><literal>19</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>reference_type_descriptor</name> <init>= <expr><literal>20</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>integer_literal</name> <init>= <expr><literal>21</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>float_literal</name> <init>= <expr><literal>22</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>double_literal</name> <init>= <expr><literal>23</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>literal</name> <init>= <expr><literal>24</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>parsed_integer_literal</name> <init>= <expr><literal>25</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>integral_literal</name> <init>= <expr><literal>26</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>fixed_32bit_literal</name> <init>= <expr><literal>27</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>fixed_literal</name> <init>= <expr><literal>28</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>array_literal</name> <init>= <expr><literal>29</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>annotation_element</name> <init>= <expr><literal>30</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>annotation</name> <init>= <expr><literal>31</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>subannotation</name> <init>= <expr><literal>32</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>enum_literal</name> <init>= <expr><literal>33</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>type_field_method_literal</name> <init>= <expr><literal>34</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>method_reference</name> <init>= <expr><literal>35</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>field_reference</name> <init>= <expr><literal>36</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>label</name> <init>= <expr><literal>37</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>label_ref</name> <init>= <expr><literal>38</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>register_list</name> <init>= <expr><literal>39</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>register_range</name> <init>= <expr><literal>40</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>verification_error_reference</name> <init>= <expr><literal>41</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>catch_directive</name> <init>= <expr><literal>42</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>catchall_directive</name> <init>= <expr><literal>43</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>parameter_directive</name> <init>= <expr><literal>44</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>debug_directive</name> <init>= <expr><literal>45</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>line_directive</name> <init>= <expr><literal>46</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>local_directive</name> <init>= <expr><literal>47</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>end_local_directive</name> <init>= <expr><literal>48</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>restart_local_directive</name> <init>= <expr><literal>49</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>prologue_directive</name> <init>= <expr><literal>50</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>epilogue_directive</name> <init>= <expr><literal>51</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>source_directive</name> <init>= <expr><literal>52</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>instruction_format12x</name> <init>= <expr><literal>53</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>instruction_format22s</name> <init>= <expr><literal>54</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>instruction_format31i</name> <init>= <expr><literal>55</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>instruction</name> <init>= <expr><literal>56</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>insn_format10t</name> <init>= <expr><literal>57</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>insn_format10x</name> <init>= <expr><literal>58</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>insn_format10x_odex</name> <init>= <expr><literal>59</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>insn_format11n</name> <init>= <expr><literal>60</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>insn_format11x</name> <init>= <expr><literal>61</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>insn_format12x</name> <init>= <expr><literal>62</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>insn_format20bc</name> <init>= <expr><literal>63</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>insn_format20t</name> <init>= <expr><literal>64</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>insn_format21c_field</name> <init>= <expr><literal>65</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>insn_format21c_field_odex</name> <init>= <expr><literal>66</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>insn_format21c_string</name> <init>= <expr><literal>67</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>insn_format21c_type</name> <init>= <expr><literal>68</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>insn_format21ih</name> <init>= <expr><literal>69</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>insn_format21lh</name> <init>= <expr><literal>70</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>insn_format21s</name> <init>= <expr><literal>71</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>insn_format21t</name> <init>= <expr><literal>72</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>insn_format22b</name> <init>= <expr><literal>73</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>insn_format22c_field</name> <init>= <expr><literal>74</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>insn_format22c_field_odex</name> <init>= <expr><literal>75</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>insn_format22c_type</name> <init>= <expr><literal>76</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>insn_format22cs_field</name> <init>= <expr><literal>77</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>insn_format22s</name> <init>= <expr><literal>78</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>insn_format22t</name> <init>= <expr><literal>79</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>insn_format22x</name> <init>= <expr><literal>80</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>insn_format23x</name> <init>= <expr><literal>81</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>insn_format30t</name> <init>= <expr><literal>82</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>insn_format31c</name> <init>= <expr><literal>83</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>insn_format31i</name> <init>= <expr><literal>84</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>insn_format31t</name> <init>= <expr><literal>85</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>insn_format32x</name> <init>= <expr><literal>86</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>insn_format35c_method</name> <init>= <expr><literal>87</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>insn_format35c_type</name> <init>= <expr><literal>88</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>insn_format35c_method_odex</name> <init>= <expr><literal>89</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>insn_format35mi_method</name> <init>= <expr><literal>90</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>insn_format35ms_method</name> <init>= <expr><literal>91</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>insn_format3rc_method</name> <init>= <expr><literal>92</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>insn_format3rc_method_odex</name> <init>= <expr><literal>93</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>insn_format3rc_type</name> <init>= <expr><literal>94</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>insn_format3rmi_method</name> <init>= <expr><literal>95</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>insn_format3rms_method</name> <init>= <expr><literal>96</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>insn_format45cc_method</name> <init>= <expr><literal>97</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>insn_format4rcc_method</name> <init>= <expr><literal>98</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>insn_format51l</name> <init>= <expr><literal>99</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>insn_array_data_directive</name> <init>= <expr><literal>100</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>insn_packed_switch_directive</name> <init>= <expr><literal>101</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>insn_sparse_switch_directive</name> <init>= <expr><literal>102</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>names</name> <init>= <expr><block>{ <expr><literal>"smali_file"</literal></expr>, <expr><literal>"class_spec"</literal></expr>, <expr><literal>"super_spec"</literal></expr>, <expr><literal>"implements_spec"</literal></expr>, <expr><literal>"source_spec"</literal></expr>, <expr><literal>"access_list"</literal></expr>, <expr><literal>"field"</literal></expr>, <expr><literal>"method"</literal></expr>, <expr><literal>"statements_and_directives"</literal></expr>, <expr><literal>"ordered_method_item"</literal></expr>, <expr><literal>"registers_directive"</literal></expr>, <expr><literal>"param_list_or_id"</literal></expr>, <expr><literal>"simple_name"</literal></expr>, <expr><literal>"member_name"</literal></expr>, <expr><literal>"method_prototype"</literal></expr>, <expr><literal>"param_list_or_id_primitive_type"</literal></expr>, <expr><literal>"param_list"</literal></expr>, <expr><literal>"array_descriptor"</literal></expr>, <expr><literal>"type_descriptor"</literal></expr>, <expr><literal>"nonvoid_type_descriptor"</literal></expr>, <expr><literal>"reference_type_descriptor"</literal></expr>, <expr><literal>"integer_literal"</literal></expr>, <expr><literal>"float_literal"</literal></expr>, <expr><literal>"double_literal"</literal></expr>, <expr><literal>"literal"</literal></expr>, <expr><literal>"parsed_integer_literal"</literal></expr>, <expr><literal>"integral_literal"</literal></expr>, <expr><literal>"fixed_32bit_literal"</literal></expr>, <expr><literal>"fixed_literal"</literal></expr>, <expr><literal>"array_literal"</literal></expr>, <expr><literal>"annotation_element"</literal></expr>, <expr><literal>"annotation"</literal></expr>, <expr><literal>"subannotation"</literal></expr>, <expr><literal>"enum_literal"</literal></expr>, <expr><literal>"type_field_method_literal"</literal></expr>, <expr><literal>"method_reference"</literal></expr>, <expr><literal>"field_reference"</literal></expr>, <expr><literal>"label"</literal></expr>, <expr><literal>"label_ref"</literal></expr>, <expr><literal>"register_list"</literal></expr>, <expr><literal>"register_range"</literal></expr>, <expr><literal>"verification_error_reference"</literal></expr>, <expr><literal>"catch_directive"</literal></expr>, <expr><literal>"catchall_directive"</literal></expr>, <expr><literal>"parameter_directive"</literal></expr>, <expr><literal>"debug_directive"</literal></expr>, <expr><literal>"line_directive"</literal></expr>, <expr><literal>"local_directive"</literal></expr>, <expr><literal>"end_local_directive"</literal></expr>, <expr><literal>"restart_local_directive"</literal></expr>, <expr><literal>"prologue_directive"</literal></expr>, <expr><literal>"epilogue_directive"</literal></expr>, <expr><literal>"source_directive"</literal></expr>, <expr><literal>"instruction_format12x"</literal></expr>, <expr><literal>"instruction_format22s"</literal></expr>, <expr><literal>"instruction_format31i"</literal></expr>, <expr><literal>"instruction"</literal></expr>, <expr><literal>"insn_format10t"</literal></expr>, <expr><literal>"insn_format10x"</literal></expr>, <expr><literal>"insn_format10x_odex"</literal></expr>, <expr><literal>"insn_format11n"</literal></expr>, <expr><literal>"insn_format11x"</literal></expr>, <expr><literal>"insn_format12x"</literal></expr>, <expr><literal>"insn_format20bc"</literal></expr>, <expr><literal>"insn_format20t"</literal></expr>, <expr><literal>"insn_format21c_field"</literal></expr>, <expr><literal>"insn_format21c_field_odex"</literal></expr>, <expr><literal>"insn_format21c_string"</literal></expr>, <expr><literal>"insn_format21c_type"</literal></expr>, <expr><literal>"insn_format21ih"</literal></expr>, <expr><literal>"insn_format21lh"</literal></expr>, <expr><literal>"insn_format21s"</literal></expr>, <expr><literal>"insn_format21t"</literal></expr>, <expr><literal>"insn_format22b"</literal></expr>, <expr><literal>"insn_format22c_field"</literal></expr>, <expr><literal>"insn_format22c_field_odex"</literal></expr>, <expr><literal>"insn_format22c_type"</literal></expr>, <expr><literal>"insn_format22cs_field"</literal></expr>, <expr><literal>"insn_format22s"</literal></expr>, <expr><literal>"insn_format22t"</literal></expr>, <expr><literal>"insn_format22x"</literal></expr>, <expr><literal>"insn_format23x"</literal></expr>, <expr><literal>"insn_format30t"</literal></expr>, <expr><literal>"insn_format31c"</literal></expr>, <expr><literal>"insn_format31i"</literal></expr>, <expr><literal>"insn_format31t"</literal></expr>, <expr><literal>"insn_format32x"</literal></expr>, <expr><literal>"insn_format35c_method"</literal></expr>, <expr><literal>"insn_format35c_type"</literal></expr>, <expr><literal>"insn_format35c_method_odex"</literal></expr>, <expr><literal>"insn_format35mi_method"</literal></expr>, <expr><literal>"insn_format35ms_method"</literal></expr>, <expr><literal>"insn_format3rc_method"</literal></expr>, <expr><literal>"insn_format3rc_method_odex"</literal></expr>, <expr><literal>"insn_format3rc_type"</literal></expr>, <expr><literal>"insn_format3rmi_method"</literal></expr>, <expr><literal>"insn_format3rms_method"</literal></expr>, <expr><literal>"insn_format45cc_method"</literal></expr>, <expr><literal>"insn_format4rcc_method"</literal></expr>, <expr><literal>"insn_format51l"</literal></expr>, <expr><literal>"insn_array_data_directive"</literal></expr>, <expr><literal>"insn_packed_switch_directive"</literal></expr>, <expr><literal>"insn_sparse_switch_directive"</literal></expr>, }</block></expr></init></decl>;</decl_stmt>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name><name>names</name><index>[<expr><name>e</name></expr>]</index></name></expr>;</return> }</block></function>
}</block></class>

</unit>

<unit xmlns="http://www.srcML.org/srcML/src" xmlns:java="http://www.srcML.org/srcML/java" revision="0.9.5" language="JAVA" filename="Users/yy66/Documents/github.com/yijunyu/demo-concodese/fast/src/main/java/fast_/SolidityKind.java"><comment>// automatically generated by the FlatBuffers compiler, do not modify</comment>

<package>package <name>fast_</name>;</package>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>SolidityKind</name> <block>{
  <constructor><specifier>private</specifier> <name>SolidityKind</name><parameter_list>()</parameter_list> <block>{ }</block></constructor>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>sourceunit</name> <init>= <expr><literal>0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>pragmadirective</name> <init>= <expr><literal>1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>pragmaname</name> <init>= <expr><literal>2</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>pragmavalue</name> <init>= <expr><literal>3</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>version</name> <init>= <expr><literal>4</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>versionoperator</name> <init>= <expr><literal>5</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>versionconstraint</name> <init>= <expr><literal>6</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>importdeclaration</name> <init>= <expr><literal>7</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>importdirective</name> <init>= <expr><literal>8</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>contractdefinition</name> <init>= <expr><literal>9</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>inheritancespecifier</name> <init>= <expr><literal>10</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>contractpart</name> <init>= <expr><literal>11</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>statevariabledeclaration</name> <init>= <expr><literal>12</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>usingfordeclaration</name> <init>= <expr><literal>13</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>structdefinition</name> <init>= <expr><literal>14</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>modifierdefinition</name> <init>= <expr><literal>15</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>modifierinvocation</name> <init>= <expr><literal>16</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>functiondefinition</name> <init>= <expr><literal>17</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>returnparameters</name> <init>= <expr><literal>18</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>modifierlist</name> <init>= <expr><literal>19</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>eventdefinition</name> <init>= <expr><literal>20</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>enumvalue</name> <init>= <expr><literal>21</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>enumdefinition</name> <init>= <expr><literal>22</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>indexedparameterlist</name> <init>= <expr><literal>23</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>indexedparameter</name> <init>= <expr><literal>24</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>parameterlist</name> <init>= <expr><literal>25</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>parameter</name> <init>= <expr><literal>26</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>typenamelist</name> <init>= <expr><literal>27</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>unnamedparameter</name> <init>= <expr><literal>28</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>variabledeclaration</name> <init>= <expr><literal>29</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>typename</name> <init>= <expr><literal>30</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>userdefinedtypename</name> <init>= <expr><literal>31</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>mapping</name> <init>= <expr><literal>32</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>functiontypename</name> <init>= <expr><literal>33</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>storagelocation</name> <init>= <expr><literal>34</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>statemutability</name> <init>= <expr><literal>35</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>block</name> <init>= <expr><literal>36</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>statement</name> <init>= <expr><literal>37</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>expressionstatement</name> <init>= <expr><literal>38</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ifstatement</name> <init>= <expr><literal>39</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>whilestatement</name> <init>= <expr><literal>40</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>simplestatement</name> <init>= <expr><literal>41</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>forstatement</name> <init>= <expr><literal>42</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>inlineassemblystatement</name> <init>= <expr><literal>43</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>dowhilestatement</name> <init>= <expr><literal>44</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>continuestatement</name> <init>= <expr><literal>45</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>breakstatement</name> <init>= <expr><literal>46</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>returnstatement</name> <init>= <expr><literal>47</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>throwstatement</name> <init>= <expr><literal>48</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>variabledeclarationstatement</name> <init>= <expr><literal>49</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>identifierlist</name> <init>= <expr><literal>50</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>elementarytypename</name> <init>= <expr><literal>51</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>expression</name> <init>= <expr><literal>52</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>primaryexpression</name> <init>= <expr><literal>53</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>expressionlist</name> <init>= <expr><literal>54</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>namevaluelist</name> <init>= <expr><literal>55</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>namevalue</name> <init>= <expr><literal>56</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>functioncallarguments</name> <init>= <expr><literal>57</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>assemblyblock</name> <init>= <expr><literal>58</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>assemblyitem</name> <init>= <expr><literal>59</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>assemblyexpression</name> <init>= <expr><literal>60</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>assemblycall</name> <init>= <expr><literal>61</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>assemblylocaldefinition</name> <init>= <expr><literal>62</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>assemblyassignment</name> <init>= <expr><literal>63</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>assemblyidentifierorlist</name> <init>= <expr><literal>64</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>assemblyidentifierlist</name> <init>= <expr><literal>65</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>assemblyrightassignment</name> <init>= <expr><literal>66</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>labeldefinition</name> <init>= <expr><literal>67</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>assemblyswitch</name> <init>= <expr><literal>68</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>assemblycase</name> <init>= <expr><literal>69</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>assemblyfunctiondefinition</name> <init>= <expr><literal>70</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>assemblyfor</name> <init>= <expr><literal>71</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>assemblyliteral</name> <init>= <expr><literal>72</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>subassembly</name> <init>= <expr><literal>73</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>datasize</name> <init>= <expr><literal>74</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>linkersymbol</name> <init>= <expr><literal>75</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>tupleexpression</name> <init>= <expr><literal>76</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>elementarytypenameexpression</name> <init>= <expr><literal>77</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>numberliteral</name> <init>= <expr><literal>78</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>identifier</name> <init>= <expr><literal>79</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>names</name> <init>= <expr><block>{ <expr><literal>"sourceunit"</literal></expr>, <expr><literal>"pragmadirective"</literal></expr>, <expr><literal>"pragmaname"</literal></expr>, <expr><literal>"pragmavalue"</literal></expr>, <expr><literal>"version"</literal></expr>, <expr><literal>"versionoperator"</literal></expr>, <expr><literal>"versionconstraint"</literal></expr>, <expr><literal>"importdeclaration"</literal></expr>, <expr><literal>"importdirective"</literal></expr>, <expr><literal>"contractdefinition"</literal></expr>, <expr><literal>"inheritancespecifier"</literal></expr>, <expr><literal>"contractpart"</literal></expr>, <expr><literal>"statevariabledeclaration"</literal></expr>, <expr><literal>"usingfordeclaration"</literal></expr>, <expr><literal>"structdefinition"</literal></expr>, <expr><literal>"modifierdefinition"</literal></expr>, <expr><literal>"modifierinvocation"</literal></expr>, <expr><literal>"functiondefinition"</literal></expr>, <expr><literal>"returnparameters"</literal></expr>, <expr><literal>"modifierlist"</literal></expr>, <expr><literal>"eventdefinition"</literal></expr>, <expr><literal>"enumvalue"</literal></expr>, <expr><literal>"enumdefinition"</literal></expr>, <expr><literal>"indexedparameterlist"</literal></expr>, <expr><literal>"indexedparameter"</literal></expr>, <expr><literal>"parameterlist"</literal></expr>, <expr><literal>"parameter"</literal></expr>, <expr><literal>"typenamelist"</literal></expr>, <expr><literal>"unnamedparameter"</literal></expr>, <expr><literal>"variabledeclaration"</literal></expr>, <expr><literal>"typename"</literal></expr>, <expr><literal>"userdefinedtypename"</literal></expr>, <expr><literal>"mapping"</literal></expr>, <expr><literal>"functiontypename"</literal></expr>, <expr><literal>"storagelocation"</literal></expr>, <expr><literal>"statemutability"</literal></expr>, <expr><literal>"block"</literal></expr>, <expr><literal>"statement"</literal></expr>, <expr><literal>"expressionstatement"</literal></expr>, <expr><literal>"ifstatement"</literal></expr>, <expr><literal>"whilestatement"</literal></expr>, <expr><literal>"simplestatement"</literal></expr>, <expr><literal>"forstatement"</literal></expr>, <expr><literal>"inlineassemblystatement"</literal></expr>, <expr><literal>"dowhilestatement"</literal></expr>, <expr><literal>"continuestatement"</literal></expr>, <expr><literal>"breakstatement"</literal></expr>, <expr><literal>"returnstatement"</literal></expr>, <expr><literal>"throwstatement"</literal></expr>, <expr><literal>"variabledeclarationstatement"</literal></expr>, <expr><literal>"identifierlist"</literal></expr>, <expr><literal>"elementarytypename"</literal></expr>, <expr><literal>"expression"</literal></expr>, <expr><literal>"primaryexpression"</literal></expr>, <expr><literal>"expressionlist"</literal></expr>, <expr><literal>"namevaluelist"</literal></expr>, <expr><literal>"namevalue"</literal></expr>, <expr><literal>"functioncallarguments"</literal></expr>, <expr><literal>"assemblyblock"</literal></expr>, <expr><literal>"assemblyitem"</literal></expr>, <expr><literal>"assemblyexpression"</literal></expr>, <expr><literal>"assemblycall"</literal></expr>, <expr><literal>"assemblylocaldefinition"</literal></expr>, <expr><literal>"assemblyassignment"</literal></expr>, <expr><literal>"assemblyidentifierorlist"</literal></expr>, <expr><literal>"assemblyidentifierlist"</literal></expr>, <expr><literal>"assemblyrightassignment"</literal></expr>, <expr><literal>"labeldefinition"</literal></expr>, <expr><literal>"assemblyswitch"</literal></expr>, <expr><literal>"assemblycase"</literal></expr>, <expr><literal>"assemblyfunctiondefinition"</literal></expr>, <expr><literal>"assemblyfor"</literal></expr>, <expr><literal>"assemblyliteral"</literal></expr>, <expr><literal>"subassembly"</literal></expr>, <expr><literal>"datasize"</literal></expr>, <expr><literal>"linkersymbol"</literal></expr>, <expr><literal>"tupleexpression"</literal></expr>, <expr><literal>"elementarytypenameexpression"</literal></expr>, <expr><literal>"numberliteral"</literal></expr>, <expr><literal>"identifier"</literal></expr>, }</block></expr></init></decl>;</decl_stmt>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name><name>names</name><index>[<expr><name>e</name></expr>]</index></name></expr>;</return> }</block></function>
}</block></class>

</unit>

<unit xmlns="http://www.srcML.org/srcML/src" xmlns:java="http://www.srcML.org/srcML/java" revision="0.9.5" language="JAVA" filename="Users/yy66/Documents/github.com/yijunyu/demo-concodese/fast/src/main/java/fast_/SrcmlKind.java"><comment>// automatically generated by the FlatBuffers compiler, do not modify</comment>

<package>package <name>fast_</name>;</package>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>SrcmlKind</name> <block>{
  <constructor><specifier>private</specifier> <name>SrcmlKind</name><parameter_list>()</parameter_list> <block>{ }</block></constructor>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>UNIT_KIND</name> <init>= <expr><literal>0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DECL</name> <init>= <expr><literal>1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DECL_STMT</name> <init>= <expr><literal>2</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INIT</name> <init>= <expr><literal>3</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>EXPR</name> <init>= <expr><literal>4</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>EXPR_STMT</name> <init>= <expr><literal>5</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>COMMENT</name> <init>= <expr><literal>6</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CALL</name> <init>= <expr><literal>7</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CONTROL</name> <init>= <expr><literal>8</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INCR</name> <init>= <expr><literal>9</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>NONE</name> <init>= <expr><literal>10</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>VARIABLE</name> <init>= <expr><literal>11</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>FUNCTION</name> <init>= <expr><literal>12</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>FUNCTION_DECL</name> <init>= <expr><literal>13</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CONSTRUCTOR</name> <init>= <expr><literal>14</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CONSTRUCTOR_DECL</name> <init>= <expr><literal>15</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DESTRUCTOR</name> <init>= <expr><literal>16</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DESTRUCTOR_DECL</name> <init>= <expr><literal>17</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>MACRO</name> <init>= <expr><literal>18</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>SINGLE_MACRO</name> <init>= <expr><literal>19</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>NULLOPERATOR</name> <init>= <expr><literal>20</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ENUM_DEFN</name> <init>= <expr><literal>21</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ENUM_DECL</name> <init>= <expr><literal>22</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>GLOBAL_ATTRIBUTE</name> <init>= <expr><literal>23</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>PROPERTY_ACCESSOR</name> <init>= <expr><literal>24</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>PROPERTY_ACCESSOR_DECL</name> <init>= <expr><literal>25</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>EXPRESSION</name> <init>= <expr><literal>26</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CLASS_DEFN</name> <init>= <expr><literal>27</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CLASS_DECL</name> <init>= <expr><literal>28</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>UNION_DEFN</name> <init>= <expr><literal>29</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>UNION_DECL</name> <init>= <expr><literal>30</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>STRUCT_DEFN</name> <init>= <expr><literal>31</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>STRUCT_DECL</name> <init>= <expr><literal>32</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INTERFACE_DEFN</name> <init>= <expr><literal>33</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INTERFACE_DECL</name> <init>= <expr><literal>34</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ACCESS_REGION</name> <init>= <expr><literal>35</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>USING</name> <init>= <expr><literal>36</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>OPERATOR_FUNCTION</name> <init>= <expr><literal>37</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>OPERATOR_FUNCTION_DECL</name> <init>= <expr><literal>38</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>EVENT</name> <init>= <expr><literal>39</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>PROPERTY</name> <init>= <expr><literal>40</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ANNOTATION_DEFN</name> <init>= <expr><literal>41</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>GLOBAL_TEMPLATE</name> <init>= <expr><literal>42</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>UNIT</name> <init>= <expr><literal>43</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>TART_ELEMENT_TOKEN</name> <init>= <expr><literal>44</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>NOP</name> <init>= <expr><literal>45</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>STRING</name> <init>= <expr><literal>46</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CHAR</name> <init>= <expr><literal>47</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>LITERAL</name> <init>= <expr><literal>48</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>BOOLEAN</name> <init>= <expr><literal>49</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>NULL2</name> <init>= <expr><literal>50</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>COMPLEX</name> <init>= <expr><literal>51</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>OPERATOR</name> <init>= <expr><literal>52</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>MODIFIER</name> <init>= <expr><literal>53</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>NAME</name> <init>= <expr><literal>54</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ONAME</name> <init>= <expr><literal>55</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CNAME</name> <init>= <expr><literal>56</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>TYPE</name> <init>= <expr><literal>57</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>TYPEPREV</name> <init>= <expr><literal>58</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CONDITION</name> <init>= <expr><literal>59</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>BLOCK</name> <init>= <expr><literal>60</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>PSEUDO_BLOCK</name> <init>= <expr><literal>61</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INDEX</name> <init>= <expr><literal>62</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ENUM</name> <init>= <expr><literal>63</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ENUM_DECLARATION</name> <init>= <expr><literal>64</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>IF_STATEMENT</name> <init>= <expr><literal>65</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>TERNARY</name> <init>= <expr><literal>66</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>THEN</name> <init>= <expr><literal>67</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ELSE</name> <init>= <expr><literal>68</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ELSEIF</name> <init>= <expr><literal>69</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>WHILE_STATEMENT</name> <init>= <expr><literal>70</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DO_STATEMENT</name> <init>= <expr><literal>71</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>FOR_STATEMENT</name> <init>= <expr><literal>72</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>FOREACH_STATEMENT</name> <init>= <expr><literal>73</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>FOR_CONTROL</name> <init>= <expr><literal>74</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>FOR_INITIALIZATION</name> <init>= <expr><literal>75</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>FOR_CONDITION</name> <init>= <expr><literal>76</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>FOR_INCREMENT</name> <init>= <expr><literal>77</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>FOR_LIKE_CONTROL</name> <init>= <expr><literal>78</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>EXPRESSION_STATEMENT</name> <init>= <expr><literal>79</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>FUNCTION_CALL</name> <init>= <expr><literal>80</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DECLARATION_STATEMENT</name> <init>= <expr><literal>81</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DECLARATION</name> <init>= <expr><literal>82</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DECLARATION_INITIALIZATION</name> <init>= <expr><literal>83</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DECLARATION_RANGE</name> <init>= <expr><literal>84</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>RANGE</name> <init>= <expr><literal>85</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>GOTO_STATEMENT</name> <init>= <expr><literal>86</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CONTINUE_STATEMENT</name> <init>= <expr><literal>87</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>BREAK_STATEMENT</name> <init>= <expr><literal>88</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>LABEL_STATEMENT</name> <init>= <expr><literal>89</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>LABEL</name> <init>= <expr><literal>90</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>SWITCH</name> <init>= <expr><literal>91</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CASE</name> <init>= <expr><literal>92</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DEFAULT</name> <init>= <expr><literal>93</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>FUNCTION_DEFINITION</name> <init>= <expr><literal>94</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>FUNCTION_DECLARATION</name> <init>= <expr><literal>95</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>LAMBDA</name> <init>= <expr><literal>96</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>FUNCTION_LAMBDA</name> <init>= <expr><literal>97</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>FUNCTION_SPECIFIER</name> <init>= <expr><literal>98</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>RETURN_STATEMENT</name> <init>= <expr><literal>99</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>PARAMETER_LIST</name> <init>= <expr><literal>100</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>PARAMETER</name> <init>= <expr><literal>101</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>KRPARAMETER_LIST</name> <init>= <expr><literal>102</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>KRPARAMETER</name> <init>= <expr><literal>103</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ARGUMENT_LIST</name> <init>= <expr><literal>104</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ARGUMENT</name> <init>= <expr><literal>105</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>PSEUDO_PARAMETER_LIST</name> <init>= <expr><literal>106</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INDEXER_PARAMETER_LIST</name> <init>= <expr><literal>107</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CLASS</name> <init>= <expr><literal>108</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CLASS_DECLARATION</name> <init>= <expr><literal>109</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>STRUCT</name> <init>= <expr><literal>110</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>STRUCT_DECLARATION</name> <init>= <expr><literal>111</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>UNION</name> <init>= <expr><literal>112</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>UNION_DECLARATION</name> <init>= <expr><literal>113</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DERIVATION_LIST</name> <init>= <expr><literal>114</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>PUBLIC_ACCESS</name> <init>= <expr><literal>115</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>PUBLIC_ACCESS_DEFAULT</name> <init>= <expr><literal>116</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>PRIVATE_ACCESS</name> <init>= <expr><literal>117</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>PRIVATE_ACCESS_DEFAULT</name> <init>= <expr><literal>118</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>PROTECTED_ACCESS</name> <init>= <expr><literal>119</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>PROTECTED_ACCESS_DEFAULT</name> <init>= <expr><literal>120</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>MEMBER_INIT_LIST</name> <init>= <expr><literal>121</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>MEMBER_INITIALIZATION_LIST</name> <init>= <expr><literal>122</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>MEMBER_INITIALIZATION</name> <init>= <expr><literal>123</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CONSTRUCTOR_DEFINITION</name> <init>= <expr><literal>124</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CONSTRUCTOR_DECLARATION</name> <init>= <expr><literal>125</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DESTRUCTOR_DEFINITION</name> <init>= <expr><literal>126</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DESTRUCTOR_DECLARATION</name> <init>= <expr><literal>127</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>FRIEND</name> <init>= <expr><literal>128</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CLASS_SPECIFIER</name> <init>= <expr><literal>129</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>TRY_BLOCK</name> <init>= <expr><literal>130</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CATCH_BLOCK</name> <init>= <expr><literal>131</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>FINALLY_BLOCK</name> <init>= <expr><literal>132</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>THROW_STATEMENT</name> <init>= <expr><literal>133</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>THROW_SPECIFIER</name> <init>= <expr><literal>134</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>THROW_SPECIFIER_JAVA</name> <init>= <expr><literal>135</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>TEMPLATE</name> <init>= <expr><literal>136</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>GENERIC_ARGUMENT</name> <init>= <expr><literal>137</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>GENERIC_ARGUMENT_LIST</name> <init>= <expr><literal>138</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>TEMPLATE_PARAMETER</name> <init>= <expr><literal>139</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>TEMPLATE_PARAMETER_LIST</name> <init>= <expr><literal>140</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>GENERIC_PARAMETER</name> <init>= <expr><literal>141</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>GENERIC_PARAMETER_LIST</name> <init>= <expr><literal>142</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>TYPEDEF</name> <init>= <expr><literal>143</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ASM</name> <init>= <expr><literal>144</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>MACRO_CALL</name> <init>= <expr><literal>145</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>SIZEOF_CALL</name> <init>= <expr><literal>146</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>EXTERN</name> <init>= <expr><literal>147</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>NAMESPACE</name> <init>= <expr><literal>148</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>USING_DIRECTIVE</name> <init>= <expr><literal>149</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DIRECTIVE</name> <init>= <expr><literal>150</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ATOMIC</name> <init>= <expr><literal>151</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>STATIC_ASSERT_STATEMENT</name> <init>= <expr><literal>152</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>GENERIC_SELECTION</name> <init>= <expr><literal>153</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>GENERIC_SELECTOR</name> <init>= <expr><literal>154</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>GENERIC_ASSOCIATION_LIST</name> <init>= <expr><literal>155</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>GENERIC_ASSOCIATION</name> <init>= <expr><literal>156</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ALIGNAS</name> <init>= <expr><literal>157</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DECLTYPE</name> <init>= <expr><literal>158</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CAPTURE</name> <init>= <expr><literal>159</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>LAMBDA_CAPTURE</name> <init>= <expr><literal>160</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>NOEXCEPT</name> <init>= <expr><literal>161</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>TYPENAME</name> <init>= <expr><literal>162</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ALIGNOF</name> <init>= <expr><literal>163</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>TYPEID</name> <init>= <expr><literal>164</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>SIZEOF_PACK</name> <init>= <expr><literal>165</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ENUM_CLASS</name> <init>= <expr><literal>166</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ENUM_CLASS_DECLARATION</name> <init>= <expr><literal>167</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>REF_QUALIFIER</name> <init>= <expr><literal>168</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>SIGNAL_ACCESS</name> <init>= <expr><literal>169</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>FOREVER_STATEMENT</name> <init>= <expr><literal>170</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>EMIT_STATEMENT</name> <init>= <expr><literal>171</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CPP_DIRECTIVE</name> <init>= <expr><literal>172</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CPP_FILENAME</name> <init>= <expr><literal>173</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>FILE</name> <init>= <expr><literal>174</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>NUMBER</name> <init>= <expr><literal>175</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CPP_NUMBER</name> <init>= <expr><literal>176</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CPP_LITERAL</name> <init>= <expr><literal>177</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CPP_MACRO_DEFN</name> <init>= <expr><literal>178</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CPP_MACRO_VALUE</name> <init>= <expr><literal>179</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ERROR</name> <init>= <expr><literal>180</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CPP_ERROR</name> <init>= <expr><literal>181</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CPP_WARNING</name> <init>= <expr><literal>182</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CPP_PRAGMA</name> <init>= <expr><literal>183</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CPP_INCLUDE</name> <init>= <expr><literal>184</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CPP_DEFINE</name> <init>= <expr><literal>185</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CPP_UNDEF</name> <init>= <expr><literal>186</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CPP_LINE</name> <init>= <expr><literal>187</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CPP_IF</name> <init>= <expr><literal>188</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CPP_IFDEF</name> <init>= <expr><literal>189</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CPP_IFNDEF</name> <init>= <expr><literal>190</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CPP_THEN</name> <init>= <expr><literal>191</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CPP_ELSE</name> <init>= <expr><literal>192</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CPP_ELIF</name> <init>= <expr><literal>193</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CPP_EMPTY</name> <init>= <expr><literal>194</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CPP_REGION</name> <init>= <expr><literal>195</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CPP_ENDREGION</name> <init>= <expr><literal>196</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>USING_STMT</name> <init>= <expr><literal>197</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ESCAPE</name> <init>= <expr><literal>198</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>VALUE</name> <init>= <expr><literal>199</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CPP_IMPORT</name> <init>= <expr><literal>200</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CPP_ENDIF</name> <init>= <expr><literal>201</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>MARKER</name> <init>= <expr><literal>202</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ERROR_PARSE</name> <init>= <expr><literal>203</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ERROR_MODE</name> <init>= <expr><literal>204</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>IMPLEMENTS</name> <init>= <expr><literal>205</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>EXTENDS</name> <init>= <expr><literal>206</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>IMPORT</name> <init>= <expr><literal>207</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>PACKAGE</name> <init>= <expr><literal>208</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ASSERT_STATEMENT</name> <init>= <expr><literal>209</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INTERFACE</name> <init>= <expr><literal>210</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INTERFACE_DECLARATION</name> <init>= <expr><literal>211</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>SYNCHRONIZED_STATEMENT</name> <init>= <expr><literal>212</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ANNOTATION</name> <init>= <expr><literal>213</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>STATIC_BLOCK</name> <init>= <expr><literal>214</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CHECKED_STATEMENT</name> <init>= <expr><literal>215</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>UNCHECKED_STATEMENT</name> <init>= <expr><literal>216</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ATTRIBUTE</name> <init>= <expr><literal>217</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>TARGET</name> <init>= <expr><literal>218</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>UNSAFE_STATEMENT</name> <init>= <expr><literal>219</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>LOCK_STATEMENT</name> <init>= <expr><literal>220</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>FIXED_STATEMENT</name> <init>= <expr><literal>221</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>TYPEOF</name> <init>= <expr><literal>222</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>USING_STATEMENT</name> <init>= <expr><literal>223</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>FUNCTION_DELEGATE</name> <init>= <expr><literal>224</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CONSTRAINT</name> <init>= <expr><literal>225</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>LINQ</name> <init>= <expr><literal>226</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>FROM</name> <init>= <expr><literal>227</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>WHERE</name> <init>= <expr><literal>228</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>SELECT</name> <init>= <expr><literal>229</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>LET</name> <init>= <expr><literal>230</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ORDERBY</name> <init>= <expr><literal>231</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>JOIN</name> <init>= <expr><literal>232</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>GROUP</name> <init>= <expr><literal>233</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>IN</name> <init>= <expr><literal>234</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ON</name> <init>= <expr><literal>235</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>EQUALS</name> <init>= <expr><literal>236</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>BY</name> <init>= <expr><literal>237</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INTO</name> <init>= <expr><literal>238</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>EMPTY</name> <init>= <expr><literal>239</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>EMPTY_STMT</name> <init>= <expr><literal>240</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>RECEIVER</name> <init>= <expr><literal>241</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>MESSAGE</name> <init>= <expr><literal>242</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>SELECTOR</name> <init>= <expr><literal>243</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>PROTOCOL_LIST</name> <init>= <expr><literal>244</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CATEGORY</name> <init>= <expr><literal>245</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>PROTOCOL</name> <init>= <expr><literal>246</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>REQUIRED_DEFAULT</name> <init>= <expr><literal>247</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>REQUIRED</name> <init>= <expr><literal>248</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>OPTIONAL</name> <init>= <expr><literal>249</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ATTRIBUTE_LIST</name> <init>= <expr><literal>250</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>SYNTHESIZE</name> <init>= <expr><literal>251</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DYNAMIC</name> <init>= <expr><literal>252</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ENCODE</name> <init>= <expr><literal>253</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>AUTORELEASEPOOL</name> <init>= <expr><literal>254</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>COMPATIBILITY_ALIAS</name> <init>= <expr><literal>255</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>NIL</name> <init>= <expr><literal>256</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CLASS_INTERFACE</name> <init>= <expr><literal>257</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CLASS_IMPLEMENTATION</name> <init>= <expr><literal>258</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>PROTOCOL_DECLARATION</name> <init>= <expr><literal>259</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CAST</name> <init>= <expr><literal>260</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CONST_CAST</name> <init>= <expr><literal>261</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DYNAMIC_CAST</name> <init>= <expr><literal>262</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>REINTERPRET_CAST</name> <init>= <expr><literal>263</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>STATIC_CAST</name> <init>= <expr><literal>264</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>POSITION</name> <init>= <expr><literal>265</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CUDA_ARGUMENT_LIST</name> <init>= <expr><literal>266</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>OMP_DIRECTIVE</name> <init>= <expr><literal>267</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>OMP_NAME</name> <init>= <expr><literal>268</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>OMP_CLAUSE</name> <init>= <expr><literal>269</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>OMP_ARGUMENT_LIST</name> <init>= <expr><literal>270</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>OMP_ARGUMENT</name> <init>= <expr><literal>271</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>OMP_EXPRESSION</name> <init>= <expr><literal>272</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>END_ELEMENT_TOKEN</name> <init>= <expr><literal>273</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>MAIN</name> <init>= <expr><literal>274</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>BREAK</name> <init>= <expr><literal>275</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CONTINUE</name> <init>= <expr><literal>276</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>WHILE</name> <init>= <expr><literal>277</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DO</name> <init>= <expr><literal>278</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>FOR</name> <init>= <expr><literal>279</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>IF</name> <init>= <expr><literal>280</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>GOTO</name> <init>= <expr><literal>281</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>VISUAL_CXX_ASM</name> <init>= <expr><literal>282</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>SIZEOF</name> <init>= <expr><literal>283</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>AUTO</name> <init>= <expr><literal>284</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>REGISTER</name> <init>= <expr><literal>285</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>RESTRICT</name> <init>= <expr><literal>286</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>IMAGINARY</name> <init>= <expr><literal>287</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>NORETURN</name> <init>= <expr><literal>288</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>STATIC_ASSERT</name> <init>= <expr><literal>289</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CRESTRICT</name> <init>= <expr><literal>290</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CXX_TRY</name> <init>= <expr><literal>291</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CXX_CATCH</name> <init>= <expr><literal>292</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CXX_CLASS</name> <init>= <expr><literal>293</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CONSTEXPR</name> <init>= <expr><literal>294</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>THREAD_LOCAL</name> <init>= <expr><literal>295</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>NULLPTR</name> <init>= <expr><literal>296</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>VOID</name> <init>= <expr><literal>297</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>RETURN</name> <init>= <expr><literal>298</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INCLUDE</name> <init>= <expr><literal>299</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DEFINE</name> <init>= <expr><literal>300</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ELIF</name> <init>= <expr><literal>301</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ENDIF</name> <init>= <expr><literal>302</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ERRORPREC</name> <init>= <expr><literal>303</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>WARNING</name> <init>= <expr><literal>304</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>IFDEF</name> <init>= <expr><literal>305</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>IFNDEF</name> <init>= <expr><literal>306</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>LINE</name> <init>= <expr><literal>307</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>PRAGMA</name> <init>= <expr><literal>308</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>UNDEF</name> <init>= <expr><literal>309</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INLINE</name> <init>= <expr><literal>310</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>MACRO_TYPE_NAME</name> <init>= <expr><literal>311</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>MACRO_CASE</name> <init>= <expr><literal>312</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>MACRO_LABEL</name> <init>= <expr><literal>313</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>SPECIFIER</name> <init>= <expr><literal>314</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>TRY</name> <init>= <expr><literal>315</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CATCH</name> <init>= <expr><literal>316</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>THROW</name> <init>= <expr><literal>317</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>THROWS</name> <init>= <expr><literal>318</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>PUBLIC</name> <init>= <expr><literal>319</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>PRIVATE</name> <init>= <expr><literal>320</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>PROTECTED</name> <init>= <expr><literal>321</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>VIRTUAL</name> <init>= <expr><literal>322</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>EXPLICIT</name> <init>= <expr><literal>323</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>FOREVER</name> <init>= <expr><literal>324</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>SIGNAL</name> <init>= <expr><literal>325</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>EMIT</name> <init>= <expr><literal>326</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>NEW</name> <init>= <expr><literal>327</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DELETE</name> <init>= <expr><literal>328</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>STATIC</name> <init>= <expr><literal>329</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CONST</name> <init>= <expr><literal>330</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>MUTABLE</name> <init>= <expr><literal>331</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>VOLATILE</name> <init>= <expr><literal>332</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>TRANSIENT</name> <init>= <expr><literal>333</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>FINALLY</name> <init>= <expr><literal>334</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>FINAL</name> <init>= <expr><literal>335</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ABSTRACT</name> <init>= <expr><literal>336</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>SUPER</name> <init>= <expr><literal>337</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>SYNCHRONIZED</name> <init>= <expr><literal>338</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>NATIVE</name> <init>= <expr><literal>339</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>STRICTFP</name> <init>= <expr><literal>340</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>NULLLITERAL</name> <init>= <expr><literal>341</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ASSERT</name> <init>= <expr><literal>342</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>FOREACH</name> <init>= <expr><literal>343</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>REF</name> <init>= <expr><literal>344</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>OUT</name> <init>= <expr><literal>345</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>LOCK</name> <init>= <expr><literal>346</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>IS</name> <init>= <expr><literal>347</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INTERNAL</name> <init>= <expr><literal>348</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>SEALED</name> <init>= <expr><literal>349</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>OVERRIDE</name> <init>= <expr><literal>350</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>IMPLICIT</name> <init>= <expr><literal>351</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>STACKALLOC</name> <init>= <expr><literal>352</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>AS</name> <init>= <expr><literal>353</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DELEGATE</name> <init>= <expr><literal>354</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>FIXED</name> <init>= <expr><literal>355</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CHECKED</name> <init>= <expr><literal>356</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>UNCHECKED</name> <init>= <expr><literal>357</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>REGION</name> <init>= <expr><literal>358</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ENDREGION</name> <init>= <expr><literal>359</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>UNSAFE</name> <init>= <expr><literal>360</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>READONLY</name> <init>= <expr><literal>361</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>GET</name> <init>= <expr><literal>362</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>SET</name> <init>= <expr><literal>363</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ADD</name> <init>= <expr><literal>364</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>REMOVE</name> <init>= <expr><literal>365</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>YIELD</name> <init>= <expr><literal>366</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>PARTIAL</name> <init>= <expr><literal>367</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>AWAIT</name> <init>= <expr><literal>368</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ASYNC</name> <init>= <expr><literal>369</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>THIS</name> <init>= <expr><literal>370</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>PARAMS</name> <init>= <expr><literal>371</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ALIAS</name> <init>= <expr><literal>372</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ASCENDING</name> <init>= <expr><literal>373</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DESCENDING</name> <init>= <expr><literal>374</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ATINTERFACE</name> <init>= <expr><literal>375</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ATIMPLEMENTATION</name> <init>= <expr><literal>376</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ATEND</name> <init>= <expr><literal>377</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ATPROTOCOL</name> <init>= <expr><literal>378</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ATREQUIRED</name> <init>= <expr><literal>379</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ATOPTIONAL</name> <init>= <expr><literal>380</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ATCLASS</name> <init>= <expr><literal>381</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>WEAK</name> <init>= <expr><literal>382</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>STRONG</name> <init>= <expr><literal>383</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>OMP_OMP</name> <init>= <expr><literal>384</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>SPECIAL_CHARS</name> <init>= <expr><literal>385</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>SLICE_DEFINE</name> <init>= <expr><literal>386</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>SLICE_USE</name> <init>= <expr><literal>387</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>names</name> <init>= <expr><block>{ <expr><literal>"UNIT_KIND"</literal></expr>, <expr><literal>"DECL"</literal></expr>, <expr><literal>"DECL_STMT"</literal></expr>, <expr><literal>"INIT"</literal></expr>, <expr><literal>"EXPR"</literal></expr>, <expr><literal>"EXPR_STMT"</literal></expr>, <expr><literal>"COMMENT"</literal></expr>, <expr><literal>"CALL"</literal></expr>, <expr><literal>"CONTROL"</literal></expr>, <expr><literal>"INCR"</literal></expr>, <expr><literal>"NONE"</literal></expr>, <expr><literal>"VARIABLE"</literal></expr>, <expr><literal>"FUNCTION"</literal></expr>, <expr><literal>"FUNCTION_DECL"</literal></expr>, <expr><literal>"CONSTRUCTOR"</literal></expr>, <expr><literal>"CONSTRUCTOR_DECL"</literal></expr>, <expr><literal>"DESTRUCTOR"</literal></expr>, <expr><literal>"DESTRUCTOR_DECL"</literal></expr>, <expr><literal>"MACRO"</literal></expr>, <expr><literal>"SINGLE_MACRO"</literal></expr>, <expr><literal>"NULLOPERATOR"</literal></expr>, <expr><literal>"ENUM_DEFN"</literal></expr>, <expr><literal>"ENUM_DECL"</literal></expr>, <expr><literal>"GLOBAL_ATTRIBUTE"</literal></expr>, <expr><literal>"PROPERTY_ACCESSOR"</literal></expr>, <expr><literal>"PROPERTY_ACCESSOR_DECL"</literal></expr>, <expr><literal>"EXPRESSION"</literal></expr>, <expr><literal>"CLASS_DEFN"</literal></expr>, <expr><literal>"CLASS_DECL"</literal></expr>, <expr><literal>"UNION_DEFN"</literal></expr>, <expr><literal>"UNION_DECL"</literal></expr>, <expr><literal>"STRUCT_DEFN"</literal></expr>, <expr><literal>"STRUCT_DECL"</literal></expr>, <expr><literal>"INTERFACE_DEFN"</literal></expr>, <expr><literal>"INTERFACE_DECL"</literal></expr>, <expr><literal>"ACCESS_REGION"</literal></expr>, <expr><literal>"USING"</literal></expr>, <expr><literal>"OPERATOR_FUNCTION"</literal></expr>, <expr><literal>"OPERATOR_FUNCTION_DECL"</literal></expr>, <expr><literal>"EVENT"</literal></expr>, <expr><literal>"PROPERTY"</literal></expr>, <expr><literal>"ANNOTATION_DEFN"</literal></expr>, <expr><literal>"GLOBAL_TEMPLATE"</literal></expr>, <expr><literal>"UNIT"</literal></expr>, <expr><literal>"TART_ELEMENT_TOKEN"</literal></expr>, <expr><literal>"NOP"</literal></expr>, <expr><literal>"STRING"</literal></expr>, <expr><literal>"CHAR"</literal></expr>, <expr><literal>"LITERAL"</literal></expr>, <expr><literal>"BOOLEAN"</literal></expr>, <expr><literal>"NULL2"</literal></expr>, <expr><literal>"COMPLEX"</literal></expr>, <expr><literal>"OPERATOR"</literal></expr>, <expr><literal>"MODIFIER"</literal></expr>, <expr><literal>"NAME"</literal></expr>, <expr><literal>"ONAME"</literal></expr>, <expr><literal>"CNAME"</literal></expr>, <expr><literal>"TYPE"</literal></expr>, <expr><literal>"TYPEPREV"</literal></expr>, <expr><literal>"CONDITION"</literal></expr>, <expr><literal>"BLOCK"</literal></expr>, <expr><literal>"PSEUDO_BLOCK"</literal></expr>, <expr><literal>"INDEX"</literal></expr>, <expr><literal>"ENUM"</literal></expr>, <expr><literal>"ENUM_DECLARATION"</literal></expr>, <expr><literal>"IF_STATEMENT"</literal></expr>, <expr><literal>"TERNARY"</literal></expr>, <expr><literal>"THEN"</literal></expr>, <expr><literal>"ELSE"</literal></expr>, <expr><literal>"ELSEIF"</literal></expr>, <expr><literal>"WHILE_STATEMENT"</literal></expr>, <expr><literal>"DO_STATEMENT"</literal></expr>, <expr><literal>"FOR_STATEMENT"</literal></expr>, <expr><literal>"FOREACH_STATEMENT"</literal></expr>, <expr><literal>"FOR_CONTROL"</literal></expr>, <expr><literal>"FOR_INITIALIZATION"</literal></expr>, <expr><literal>"FOR_CONDITION"</literal></expr>, <expr><literal>"FOR_INCREMENT"</literal></expr>, <expr><literal>"FOR_LIKE_CONTROL"</literal></expr>, <expr><literal>"EXPRESSION_STATEMENT"</literal></expr>, <expr><literal>"FUNCTION_CALL"</literal></expr>, <expr><literal>"DECLARATION_STATEMENT"</literal></expr>, <expr><literal>"DECLARATION"</literal></expr>, <expr><literal>"DECLARATION_INITIALIZATION"</literal></expr>, <expr><literal>"DECLARATION_RANGE"</literal></expr>, <expr><literal>"RANGE"</literal></expr>, <expr><literal>"GOTO_STATEMENT"</literal></expr>, <expr><literal>"CONTINUE_STATEMENT"</literal></expr>, <expr><literal>"BREAK_STATEMENT"</literal></expr>, <expr><literal>"LABEL_STATEMENT"</literal></expr>, <expr><literal>"LABEL"</literal></expr>, <expr><literal>"SWITCH"</literal></expr>, <expr><literal>"CASE"</literal></expr>, <expr><literal>"DEFAULT"</literal></expr>, <expr><literal>"FUNCTION_DEFINITION"</literal></expr>, <expr><literal>"FUNCTION_DECLARATION"</literal></expr>, <expr><literal>"LAMBDA"</literal></expr>, <expr><literal>"FUNCTION_LAMBDA"</literal></expr>, <expr><literal>"FUNCTION_SPECIFIER"</literal></expr>, <expr><literal>"RETURN_STATEMENT"</literal></expr>, <expr><literal>"PARAMETER_LIST"</literal></expr>, <expr><literal>"PARAMETER"</literal></expr>, <expr><literal>"KRPARAMETER_LIST"</literal></expr>, <expr><literal>"KRPARAMETER"</literal></expr>, <expr><literal>"ARGUMENT_LIST"</literal></expr>, <expr><literal>"ARGUMENT"</literal></expr>, <expr><literal>"PSEUDO_PARAMETER_LIST"</literal></expr>, <expr><literal>"INDEXER_PARAMETER_LIST"</literal></expr>, <expr><literal>"CLASS"</literal></expr>, <expr><literal>"CLASS_DECLARATION"</literal></expr>, <expr><literal>"STRUCT"</literal></expr>, <expr><literal>"STRUCT_DECLARATION"</literal></expr>, <expr><literal>"UNION"</literal></expr>, <expr><literal>"UNION_DECLARATION"</literal></expr>, <expr><literal>"DERIVATION_LIST"</literal></expr>, <expr><literal>"PUBLIC_ACCESS"</literal></expr>, <expr><literal>"PUBLIC_ACCESS_DEFAULT"</literal></expr>, <expr><literal>"PRIVATE_ACCESS"</literal></expr>, <expr><literal>"PRIVATE_ACCESS_DEFAULT"</literal></expr>, <expr><literal>"PROTECTED_ACCESS"</literal></expr>, <expr><literal>"PROTECTED_ACCESS_DEFAULT"</literal></expr>, <expr><literal>"MEMBER_INIT_LIST"</literal></expr>, <expr><literal>"MEMBER_INITIALIZATION_LIST"</literal></expr>, <expr><literal>"MEMBER_INITIALIZATION"</literal></expr>, <expr><literal>"CONSTRUCTOR_DEFINITION"</literal></expr>, <expr><literal>"CONSTRUCTOR_DECLARATION"</literal></expr>, <expr><literal>"DESTRUCTOR_DEFINITION"</literal></expr>, <expr><literal>"DESTRUCTOR_DECLARATION"</literal></expr>, <expr><literal>"FRIEND"</literal></expr>, <expr><literal>"CLASS_SPECIFIER"</literal></expr>, <expr><literal>"TRY_BLOCK"</literal></expr>, <expr><literal>"CATCH_BLOCK"</literal></expr>, <expr><literal>"FINALLY_BLOCK"</literal></expr>, <expr><literal>"THROW_STATEMENT"</literal></expr>, <expr><literal>"THROW_SPECIFIER"</literal></expr>, <expr><literal>"THROW_SPECIFIER_JAVA"</literal></expr>, <expr><literal>"TEMPLATE"</literal></expr>, <expr><literal>"GENERIC_ARGUMENT"</literal></expr>, <expr><literal>"GENERIC_ARGUMENT_LIST"</literal></expr>, <expr><literal>"TEMPLATE_PARAMETER"</literal></expr>, <expr><literal>"TEMPLATE_PARAMETER_LIST"</literal></expr>, <expr><literal>"GENERIC_PARAMETER"</literal></expr>, <expr><literal>"GENERIC_PARAMETER_LIST"</literal></expr>, <expr><literal>"TYPEDEF"</literal></expr>, <expr><literal>"ASM"</literal></expr>, <expr><literal>"MACRO_CALL"</literal></expr>, <expr><literal>"SIZEOF_CALL"</literal></expr>, <expr><literal>"EXTERN"</literal></expr>, <expr><literal>"NAMESPACE"</literal></expr>, <expr><literal>"USING_DIRECTIVE"</literal></expr>, <expr><literal>"DIRECTIVE"</literal></expr>, <expr><literal>"ATOMIC"</literal></expr>, <expr><literal>"STATIC_ASSERT_STATEMENT"</literal></expr>, <expr><literal>"GENERIC_SELECTION"</literal></expr>, <expr><literal>"GENERIC_SELECTOR"</literal></expr>, <expr><literal>"GENERIC_ASSOCIATION_LIST"</literal></expr>, <expr><literal>"GENERIC_ASSOCIATION"</literal></expr>, <expr><literal>"ALIGNAS"</literal></expr>, <expr><literal>"DECLTYPE"</literal></expr>, <expr><literal>"CAPTURE"</literal></expr>, <expr><literal>"LAMBDA_CAPTURE"</literal></expr>, <expr><literal>"NOEXCEPT"</literal></expr>, <expr><literal>"TYPENAME"</literal></expr>, <expr><literal>"ALIGNOF"</literal></expr>, <expr><literal>"TYPEID"</literal></expr>, <expr><literal>"SIZEOF_PACK"</literal></expr>, <expr><literal>"ENUM_CLASS"</literal></expr>, <expr><literal>"ENUM_CLASS_DECLARATION"</literal></expr>, <expr><literal>"REF_QUALIFIER"</literal></expr>, <expr><literal>"SIGNAL_ACCESS"</literal></expr>, <expr><literal>"FOREVER_STATEMENT"</literal></expr>, <expr><literal>"EMIT_STATEMENT"</literal></expr>, <expr><literal>"CPP_DIRECTIVE"</literal></expr>, <expr><literal>"CPP_FILENAME"</literal></expr>, <expr><literal>"FILE"</literal></expr>, <expr><literal>"NUMBER"</literal></expr>, <expr><literal>"CPP_NUMBER"</literal></expr>, <expr><literal>"CPP_LITERAL"</literal></expr>, <expr><literal>"CPP_MACRO_DEFN"</literal></expr>, <expr><literal>"CPP_MACRO_VALUE"</literal></expr>, <expr><literal>"ERROR"</literal></expr>, <expr><literal>"CPP_ERROR"</literal></expr>, <expr><literal>"CPP_WARNING"</literal></expr>, <expr><literal>"CPP_PRAGMA"</literal></expr>, <expr><literal>"CPP_INCLUDE"</literal></expr>, <expr><literal>"CPP_DEFINE"</literal></expr>, <expr><literal>"CPP_UNDEF"</literal></expr>, <expr><literal>"CPP_LINE"</literal></expr>, <expr><literal>"CPP_IF"</literal></expr>, <expr><literal>"CPP_IFDEF"</literal></expr>, <expr><literal>"CPP_IFNDEF"</literal></expr>, <expr><literal>"CPP_THEN"</literal></expr>, <expr><literal>"CPP_ELSE"</literal></expr>, <expr><literal>"CPP_ELIF"</literal></expr>, <expr><literal>"CPP_EMPTY"</literal></expr>, <expr><literal>"CPP_REGION"</literal></expr>, <expr><literal>"CPP_ENDREGION"</literal></expr>, <expr><literal>"USING_STMT"</literal></expr>, <expr><literal>"ESCAPE"</literal></expr>, <expr><literal>"VALUE"</literal></expr>, <expr><literal>"CPP_IMPORT"</literal></expr>, <expr><literal>"CPP_ENDIF"</literal></expr>, <expr><literal>"MARKER"</literal></expr>, <expr><literal>"ERROR_PARSE"</literal></expr>, <expr><literal>"ERROR_MODE"</literal></expr>, <expr><literal>"IMPLEMENTS"</literal></expr>, <expr><literal>"EXTENDS"</literal></expr>, <expr><literal>"IMPORT"</literal></expr>, <expr><literal>"PACKAGE"</literal></expr>, <expr><literal>"ASSERT_STATEMENT"</literal></expr>, <expr><literal>"INTERFACE"</literal></expr>, <expr><literal>"INTERFACE_DECLARATION"</literal></expr>, <expr><literal>"SYNCHRONIZED_STATEMENT"</literal></expr>, <expr><literal>"ANNOTATION"</literal></expr>, <expr><literal>"STATIC_BLOCK"</literal></expr>, <expr><literal>"CHECKED_STATEMENT"</literal></expr>, <expr><literal>"UNCHECKED_STATEMENT"</literal></expr>, <expr><literal>"ATTRIBUTE"</literal></expr>, <expr><literal>"TARGET"</literal></expr>, <expr><literal>"UNSAFE_STATEMENT"</literal></expr>, <expr><literal>"LOCK_STATEMENT"</literal></expr>, <expr><literal>"FIXED_STATEMENT"</literal></expr>, <expr><literal>"TYPEOF"</literal></expr>, <expr><literal>"USING_STATEMENT"</literal></expr>, <expr><literal>"FUNCTION_DELEGATE"</literal></expr>, <expr><literal>"CONSTRAINT"</literal></expr>, <expr><literal>"LINQ"</literal></expr>, <expr><literal>"FROM"</literal></expr>, <expr><literal>"WHERE"</literal></expr>, <expr><literal>"SELECT"</literal></expr>, <expr><literal>"LET"</literal></expr>, <expr><literal>"ORDERBY"</literal></expr>, <expr><literal>"JOIN"</literal></expr>, <expr><literal>"GROUP"</literal></expr>, <expr><literal>"IN"</literal></expr>, <expr><literal>"ON"</literal></expr>, <expr><literal>"EQUALS"</literal></expr>, <expr><literal>"BY"</literal></expr>, <expr><literal>"INTO"</literal></expr>, <expr><literal>"EMPTY"</literal></expr>, <expr><literal>"EMPTY_STMT"</literal></expr>, <expr><literal>"RECEIVER"</literal></expr>, <expr><literal>"MESSAGE"</literal></expr>, <expr><literal>"SELECTOR"</literal></expr>, <expr><literal>"PROTOCOL_LIST"</literal></expr>, <expr><literal>"CATEGORY"</literal></expr>, <expr><literal>"PROTOCOL"</literal></expr>, <expr><literal>"REQUIRED_DEFAULT"</literal></expr>, <expr><literal>"REQUIRED"</literal></expr>, <expr><literal>"OPTIONAL"</literal></expr>, <expr><literal>"ATTRIBUTE_LIST"</literal></expr>, <expr><literal>"SYNTHESIZE"</literal></expr>, <expr><literal>"DYNAMIC"</literal></expr>, <expr><literal>"ENCODE"</literal></expr>, <expr><literal>"AUTORELEASEPOOL"</literal></expr>, <expr><literal>"COMPATIBILITY_ALIAS"</literal></expr>, <expr><literal>"NIL"</literal></expr>, <expr><literal>"CLASS_INTERFACE"</literal></expr>, <expr><literal>"CLASS_IMPLEMENTATION"</literal></expr>, <expr><literal>"PROTOCOL_DECLARATION"</literal></expr>, <expr><literal>"CAST"</literal></expr>, <expr><literal>"CONST_CAST"</literal></expr>, <expr><literal>"DYNAMIC_CAST"</literal></expr>, <expr><literal>"REINTERPRET_CAST"</literal></expr>, <expr><literal>"STATIC_CAST"</literal></expr>, <expr><literal>"POSITION"</literal></expr>, <expr><literal>"CUDA_ARGUMENT_LIST"</literal></expr>, <expr><literal>"OMP_DIRECTIVE"</literal></expr>, <expr><literal>"OMP_NAME"</literal></expr>, <expr><literal>"OMP_CLAUSE"</literal></expr>, <expr><literal>"OMP_ARGUMENT_LIST"</literal></expr>, <expr><literal>"OMP_ARGUMENT"</literal></expr>, <expr><literal>"OMP_EXPRESSION"</literal></expr>, <expr><literal>"END_ELEMENT_TOKEN"</literal></expr>, <expr><literal>"MAIN"</literal></expr>, <expr><literal>"BREAK"</literal></expr>, <expr><literal>"CONTINUE"</literal></expr>, <expr><literal>"WHILE"</literal></expr>, <expr><literal>"DO"</literal></expr>, <expr><literal>"FOR"</literal></expr>, <expr><literal>"IF"</literal></expr>, <expr><literal>"GOTO"</literal></expr>, <expr><literal>"VISUAL_CXX_ASM"</literal></expr>, <expr><literal>"SIZEOF"</literal></expr>, <expr><literal>"AUTO"</literal></expr>, <expr><literal>"REGISTER"</literal></expr>, <expr><literal>"RESTRICT"</literal></expr>, <expr><literal>"IMAGINARY"</literal></expr>, <expr><literal>"NORETURN"</literal></expr>, <expr><literal>"STATIC_ASSERT"</literal></expr>, <expr><literal>"CRESTRICT"</literal></expr>, <expr><literal>"CXX_TRY"</literal></expr>, <expr><literal>"CXX_CATCH"</literal></expr>, <expr><literal>"CXX_CLASS"</literal></expr>, <expr><literal>"CONSTEXPR"</literal></expr>, <expr><literal>"THREAD_LOCAL"</literal></expr>, <expr><literal>"NULLPTR"</literal></expr>, <expr><literal>"VOID"</literal></expr>, <expr><literal>"RETURN"</literal></expr>, <expr><literal>"INCLUDE"</literal></expr>, <expr><literal>"DEFINE"</literal></expr>, <expr><literal>"ELIF"</literal></expr>, <expr><literal>"ENDIF"</literal></expr>, <expr><literal>"ERRORPREC"</literal></expr>, <expr><literal>"WARNING"</literal></expr>, <expr><literal>"IFDEF"</literal></expr>, <expr><literal>"IFNDEF"</literal></expr>, <expr><literal>"LINE"</literal></expr>, <expr><literal>"PRAGMA"</literal></expr>, <expr><literal>"UNDEF"</literal></expr>, <expr><literal>"INLINE"</literal></expr>, <expr><literal>"MACRO_TYPE_NAME"</literal></expr>, <expr><literal>"MACRO_CASE"</literal></expr>, <expr><literal>"MACRO_LABEL"</literal></expr>, <expr><literal>"SPECIFIER"</literal></expr>, <expr><literal>"TRY"</literal></expr>, <expr><literal>"CATCH"</literal></expr>, <expr><literal>"THROW"</literal></expr>, <expr><literal>"THROWS"</literal></expr>, <expr><literal>"PUBLIC"</literal></expr>, <expr><literal>"PRIVATE"</literal></expr>, <expr><literal>"PROTECTED"</literal></expr>, <expr><literal>"VIRTUAL"</literal></expr>, <expr><literal>"EXPLICIT"</literal></expr>, <expr><literal>"FOREVER"</literal></expr>, <expr><literal>"SIGNAL"</literal></expr>, <expr><literal>"EMIT"</literal></expr>, <expr><literal>"NEW"</literal></expr>, <expr><literal>"DELETE"</literal></expr>, <expr><literal>"STATIC"</literal></expr>, <expr><literal>"CONST"</literal></expr>, <expr><literal>"MUTABLE"</literal></expr>, <expr><literal>"VOLATILE"</literal></expr>, <expr><literal>"TRANSIENT"</literal></expr>, <expr><literal>"FINALLY"</literal></expr>, <expr><literal>"FINAL"</literal></expr>, <expr><literal>"ABSTRACT"</literal></expr>, <expr><literal>"SUPER"</literal></expr>, <expr><literal>"SYNCHRONIZED"</literal></expr>, <expr><literal>"NATIVE"</literal></expr>, <expr><literal>"STRICTFP"</literal></expr>, <expr><literal>"NULLLITERAL"</literal></expr>, <expr><literal>"ASSERT"</literal></expr>, <expr><literal>"FOREACH"</literal></expr>, <expr><literal>"REF"</literal></expr>, <expr><literal>"OUT"</literal></expr>, <expr><literal>"LOCK"</literal></expr>, <expr><literal>"IS"</literal></expr>, <expr><literal>"INTERNAL"</literal></expr>, <expr><literal>"SEALED"</literal></expr>, <expr><literal>"OVERRIDE"</literal></expr>, <expr><literal>"IMPLICIT"</literal></expr>, <expr><literal>"STACKALLOC"</literal></expr>, <expr><literal>"AS"</literal></expr>, <expr><literal>"DELEGATE"</literal></expr>, <expr><literal>"FIXED"</literal></expr>, <expr><literal>"CHECKED"</literal></expr>, <expr><literal>"UNCHECKED"</literal></expr>, <expr><literal>"REGION"</literal></expr>, <expr><literal>"ENDREGION"</literal></expr>, <expr><literal>"UNSAFE"</literal></expr>, <expr><literal>"READONLY"</literal></expr>, <expr><literal>"GET"</literal></expr>, <expr><literal>"SET"</literal></expr>, <expr><literal>"ADD"</literal></expr>, <expr><literal>"REMOVE"</literal></expr>, <expr><literal>"YIELD"</literal></expr>, <expr><literal>"PARTIAL"</literal></expr>, <expr><literal>"AWAIT"</literal></expr>, <expr><literal>"ASYNC"</literal></expr>, <expr><literal>"THIS"</literal></expr>, <expr><literal>"PARAMS"</literal></expr>, <expr><literal>"ALIAS"</literal></expr>, <expr><literal>"ASCENDING"</literal></expr>, <expr><literal>"DESCENDING"</literal></expr>, <expr><literal>"ATINTERFACE"</literal></expr>, <expr><literal>"ATIMPLEMENTATION"</literal></expr>, <expr><literal>"ATEND"</literal></expr>, <expr><literal>"ATPROTOCOL"</literal></expr>, <expr><literal>"ATREQUIRED"</literal></expr>, <expr><literal>"ATOPTIONAL"</literal></expr>, <expr><literal>"ATCLASS"</literal></expr>, <expr><literal>"WEAK"</literal></expr>, <expr><literal>"STRONG"</literal></expr>, <expr><literal>"OMP_OMP"</literal></expr>, <expr><literal>"SPECIAL_CHARS"</literal></expr>, <expr><literal>"SLICE_DEFINE"</literal></expr>, <expr><literal>"SLICE_USE"</literal></expr>, }</block></expr></init></decl>;</decl_stmt>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name><name>names</name><index>[<expr><name>e</name></expr>]</index></name></expr>;</return> }</block></function>
}</block></class>

</unit>

<unit xmlns="http://www.srcML.org/srcML/src" xmlns:java="http://www.srcML.org/srcML/java" revision="0.9.5" language="JAVA" filename="Users/yy66/Documents/github.com/yijunyu/demo-concodese/fast/src/main/java/uk/ac/open/fast/App.java"><package>package <name><name>uk</name><operator>.</operator><name>ac</name><operator>.</operator><name>open</name><operator>.</operator><name>fast</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>fast_</name><operator>.</operator><name>Element</name></name>;</import>
<import>import <name><name>uk</name><operator>.</operator><name>ac</name><operator>.</operator><name>open</name><operator>.</operator><name>crc</name><operator>.</operator><name>intt</name><operator>.</operator><name>IdentifierNameTokeniser</name></name>;</import>
<import>import <name><name>uk</name><operator>.</operator><name>ac</name><operator>.</operator><name>open</name><operator>.</operator><name>crc</name><operator>.</operator><name>intt</name><operator>.</operator><name>IdentifierNameTokeniserFactory</name></name>;</import>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>App</name> <block>{
    <constructor><specifier>private</specifier> <name>App</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment>/**
     * Interface to the fast utility.
     * 
     * @param args The arguments of the program.
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>callFast</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name>IdentifierNameTokeniserFactory</name></type> <name>factory</name> <init>= <expr><operator>new</operator> <call><name>IdentifierNameTokeniserFactory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name>IdentifierNameTokeniser</name></type> <name>tokeniser</name> <init>= <expr><call><name><name>factory</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <static>static <block>{
        <expr_stmt><expr><call><name><name>factory</name><operator>.</operator><name>setSeparatorCharacters</name></name><argument_list>(<argument><expr><literal>"._$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></static>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>identifierTerms</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>commentTerms</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getIdentifierTerms</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>identifierTerms</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getCommentTerms</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>commentTerms</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>callFast</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name><name>Runtime</name><operator>.</operator><name>getRuntime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>exec</name><argument_list>(<argument><expr><literal>"fast "</literal> <operator>+</operator> <name><name>args</name><index>[<expr><literal>0</literal></expr>]</index></name> <operator>+</operator> <literal>" /tmp/t.fbs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>FileInputStream</name></type> <name>in</name> <init>= <expr><operator>new</operator> <call><name>FileInputStream</name><argument_list>(<argument><expr><literal>"/tmp/t.fbs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>byteArray</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal>2048</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>buf</name> <init>= <expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><name>byteArray</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>getChannel</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>read</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment>//Data data = Data.getRootAsData(buf);</comment>
            <decl_stmt><decl><type><name>Element</name></type> <name>data</name> <init>= <expr><call><name><name>Element</name><operator>.</operator><name>getRootAsElement</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{
        }</block></catch></try>
    }</block></function>

}</block></class>
</unit>

<unit xmlns="http://www.srcML.org/srcML/src" xmlns:java="http://www.srcML.org/srcML/java" revision="0.9.5" language="JAVA" filename="Users/yy66/Documents/github.com/yijunyu/demo-concodese/fast/src/test/java/uk/ac/open/fast/AppTest.java"><package>package <name><name>uk</name><operator>.</operator><name>ac</name><operator>.</operator><name>open</name><operator>.</operator><name>fast</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>*</name></name>;</import>

<comment>/**
 * Unit test for simple App.
 */</comment>
<class><specifier>public</specifier> class <name>AppTest</name> <block>{
    <comment>/**
     * Rigorous Test.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>testApp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>App</name><operator>.</operator><name>main</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><literal>"/Users/yy66/Documents/github.com/yijunyu/demo-concodese/fast/src"</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal>true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>

</unit>
