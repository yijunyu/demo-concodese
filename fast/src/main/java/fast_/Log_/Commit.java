// automatically generated by the FlatBuffers compiler, do not modify

package fast_.Log_;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Commit extends Table {
  public static Commit getRootAsCommit(ByteBuffer _bb) { return getRootAsCommit(_bb, new Commit()); }
  public static Commit getRootAsCommit(ByteBuffer _bb, Commit obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public Commit __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String msg() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer msgAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer msgInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public String authorName() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer authorNameAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer authorNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  public String authorEmail() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer authorEmailAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer authorEmailInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  public long authorTime() { int o = __offset(12); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public String committerName() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer committerNameAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer committerNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  public String committerEmail() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer committerEmailAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer committerEmailInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  public long committerTime() { int o = __offset(18); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public fast_.Log_.Commit_.Diff diff(int j) { return diff(new fast_.Log_.Commit_.Diff(), j); }
  public fast_.Log_.Commit_.Diff diff(fast_.Log_.Commit_.Diff obj, int j) { int o = __offset(20); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int diffLength() { int o = __offset(20); return o != 0 ? __vector_len(o) : 0; }
  public fast_.Slices slice() { return slice(new fast_.Slices()); }
  public fast_.Slices slice(fast_.Slices obj) { int o = __offset(22); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createCommit(FlatBufferBuilder builder,
      int idOffset,
      int msgOffset,
      int author_nameOffset,
      int author_emailOffset,
      long author_time,
      int committer_nameOffset,
      int committer_emailOffset,
      long committer_time,
      int diffOffset,
      int sliceOffset) {
    builder.startObject(10);
    Commit.addCommitterTime(builder, committer_time);
    Commit.addAuthorTime(builder, author_time);
    Commit.addSlice(builder, sliceOffset);
    Commit.addDiff(builder, diffOffset);
    Commit.addCommitterEmail(builder, committer_emailOffset);
    Commit.addCommitterName(builder, committer_nameOffset);
    Commit.addAuthorEmail(builder, author_emailOffset);
    Commit.addAuthorName(builder, author_nameOffset);
    Commit.addMsg(builder, msgOffset);
    Commit.addId(builder, idOffset);
    return Commit.endCommit(builder);
  }

  public static void startCommit(FlatBufferBuilder builder) { builder.startObject(10); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addMsg(FlatBufferBuilder builder, int msgOffset) { builder.addOffset(1, msgOffset, 0); }
  public static void addAuthorName(FlatBufferBuilder builder, int authorNameOffset) { builder.addOffset(2, authorNameOffset, 0); }
  public static void addAuthorEmail(FlatBufferBuilder builder, int authorEmailOffset) { builder.addOffset(3, authorEmailOffset, 0); }
  public static void addAuthorTime(FlatBufferBuilder builder, long authorTime) { builder.addLong(4, authorTime, 0L); }
  public static void addCommitterName(FlatBufferBuilder builder, int committerNameOffset) { builder.addOffset(5, committerNameOffset, 0); }
  public static void addCommitterEmail(FlatBufferBuilder builder, int committerEmailOffset) { builder.addOffset(6, committerEmailOffset, 0); }
  public static void addCommitterTime(FlatBufferBuilder builder, long committerTime) { builder.addLong(7, committerTime, 0L); }
  public static void addDiff(FlatBufferBuilder builder, int diffOffset) { builder.addOffset(8, diffOffset, 0); }
  public static int createDiffVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startDiffVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addSlice(FlatBufferBuilder builder, int sliceOffset) { builder.addOffset(9, sliceOffset, 0); }
  public static int endCommit(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

