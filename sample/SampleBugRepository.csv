"Key";"Summary";"Description";"Issue Type";"Project artefacts effected"
"97651";"tree insert mark cheese ";"3.1RC1 - run the snippet below - the insert line is set to be under the &quot;root&quot; item - collapse the root item -&gt; problem 1: this makes most of the insert line go away, except for its pointy ends. This line should not go away because it belongs to the &quot;root&quot; item, not to the &quot;child&quot; item, but if it really wants to go away, then its end tips should not be left - press the button to the right of the Table: this does a Tree.redraw(), and note that the insert line reappears, so I guess it never really meant to go away -&gt; problem 2: now expand the root item again and its insert mark gets copied to below the child item in addition to its initial location. This is cheese, as can be seen by damaging part of this line with another window public static void main(String[] args) { final Display display = new Display(); final Shell shell = new Shell(display); shell.setBounds(10, 10, 300, 300); final Tree tree = new Tree(shell, SWT.NONE); tree.setBounds(10, 10, 200, 200); new TreeItem(tree, SWT.NONE).setText(&quot;pre-root&quot;); TreeItem root1 = new TreeItem(tree, SWT.NONE); root1.setText(&quot;root&quot;); TreeItem child = new TreeItem(root1, SWT.NONE); child.setText(&quot;child&quot;); Button button = new Button(shell, SWT.PUSH); button.setBounds(230,10,30,30); button.addSelectionListener(new SelectionAdapter() { public void widgetSelected(SelectionEvent e) { tree.redraw(); } }); root1.setExpanded(true); tree.setInsertMark(root1, false); shell.open(); while (!shell.isDisposed()) { if (!display.readAndDispatch()) display.sleep(); } display.dispose(); } ";"Defect";"TreeDragUnderEffect.java, Tree.java"
"104545";"Make default size of empty composites smaller ";"Could the following two constants in Widget.java be changed to something smaller? /* Default widths for widgets */ static final int DEFAULT_WIDTH = 64; static final int DEFAULT_HEIGHT = 64; Anything less than or equal to 16 would work for us, 0 would be OK too. I have run our tests (JFace, UI, RCP) and they run fine when the constants are 0. Background: When you write an RCP app and enable the cool bar, the cool bar will initially be empty, but 64x64 pixels in size. On Windows, you cannot see the border of the empty coolbar so the user gets a big empty space at the top of their window and might be confused. See also <span class="bz_closed"><a href="show_bug.cgi?id=70049" title="RESOLVED INVALID - [PerspectiveBar] Coolbar Default Height is Gigantic">Bug 70049</a></span>, where the same problem occurs in an RCP application that starts off with no open perspective and thus no cool bar items. ";"Defect";"CoolBar.java"
"88829";"Table.setColumnOrder() may not fire enough Move events ";"- start with five columns, all different widths - do Table.setColumnOrder(new int[] {4,1,2,3,0}); - SWT.Move events are fired for columns 0 and 4 because they swapped positions -&gt; but Move should have been fired for all of the columns since the width of the first displayed column changed, and therefore all of the other columns are auto-shifted accordingly ";"Defect";"Table.java"
"81834";"BIDI: StyledText does not convert European Number to Arabic Number ";"StyledText does not convert European Number(EN) to Arabic Number(AN) on WinXP. How to reproduce: 1. Change the user language to Arabic on &quot;Regional and Language Options&quot; panel on Windows. (do not specify &quot;-nl&quot; command line arguments.) 2. Create Shell with SWT.RIGHT_TO_LEFT flag. 3. add StyledText on the shell. 4. Set text &quot;012345 abc 012345&quot; in StyledText widget. 5. Open and run the shell. Result: All the numbers are still European Number characters on StyledText widget. Text widget displays the first &quot;012345&quot; as Arabic Numbers. This is reproducible on swt-I20041221-0800-win32. (also, in Eclipse3.0GA) Thanks, Hiro ";"Defect";"TextLayout.java, OS.java"
"93724";"Drag-and-drop creates signal names every time ";"Here is an example of some code in DragSource.java for GTK+: byte[] buffer = Converter.wcsToMbcs(null, &quot;drag_data_get&quot;, true); OS.g_signal_connect(control.handle, buffer, DragGetData.getAddress(), 0); buffer = Converter.wcsToMbcs(null, &quot;drag_end&quot;, true); OS.g_signal_connect(control.handle, buffer, DragEnd.getAddress(), 0); buffer = Converter.wcsToMbcs(null, &quot;drag_data_delete&quot;, true); OS.g_signal_connect(control.handle, buffer, DragDataDelete.getAddress(), 0); Rather than converting the names for the signals every time, these signal names should be defined in OS.java so that they can be only created once. ";"Defect";"DragSource.java, DropTarget.java"
"97745";"Table column header stays pressed if mouse button released elsewhere ";"3.1 RC1, Windows XP - open the tasks view - click on the &quot;Resource&quot; Column and release to sort the table. Note that the column header is inset while pressing down and then restores to normal look on release. - now press down on the &quot;Location&quot; column but drag the mouse off the view before releasing the mouse button. Problem: The &quot;Location&quot; column keeps its &quot;depressed&quot; look until another column is clicked. This can mislead one into thinking the table is sorted by the wrong column. Not sure if this is SWT or JFace... ";"Defect";"OS.java, Table.java, TableColumn.java"
