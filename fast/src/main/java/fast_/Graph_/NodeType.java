// automatically generated by the FlatBuffers compiler, do not modify

package fast_.Graph_;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class NodeType extends Table {
  public static NodeType getRootAsNodeType(ByteBuffer _bb) { return getRootAsNodeType(_bb, new NodeType()); }
  public static NodeType getRootAsNodeType(ByteBuffer _bb, NodeType obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public NodeType __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int node() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public String type() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer typeAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer typeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }

  public static int createNodeType(FlatBufferBuilder builder,
      int node,
      int typeOffset) {
    builder.startObject(2);
    NodeType.addType(builder, typeOffset);
    NodeType.addNode(builder, node);
    return NodeType.endNodeType(builder);
  }

  public static void startNodeType(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addNode(FlatBufferBuilder builder, int node) { builder.addInt(0, node, 0); }
  public static void addType(FlatBufferBuilder builder, int typeOffset) { builder.addOffset(1, typeOffset, 0); }
  public static int endNodeType(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

