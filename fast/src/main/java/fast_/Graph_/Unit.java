// automatically generated by the FlatBuffers compiler, do not modify

package fast_.Graph_;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Unit extends Table {
  public static Unit getRootAsUnit(ByteBuffer _bb) { return getRootAsUnit(_bb, new Unit()); }
  public static Unit getRootAsUnit(ByteBuffer _bb, Unit obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public Unit __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String filename() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer filenameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer filenameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public int slotTokenIdx() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public ContextGraph graph() { return graph(new ContextGraph()); }
  public ContextGraph graph(ContextGraph obj) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public int SlotDummyNode() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public SymbolCandidate symbolCandidate(int j) { return symbolCandidate(new SymbolCandidate(), j); }
  public SymbolCandidate symbolCandidate(SymbolCandidate obj, int j) { int o = __offset(12); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int symbolCandidateLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }

  public static int createUnit(FlatBufferBuilder builder,
      int filenameOffset,
      int slotTokenIdx,
      int graphOffset,
      int SlotDummyNode,
      int symbolCandidateOffset) {
    builder.startObject(5);
    Unit.addSymbolCandidate(builder, symbolCandidateOffset);
    Unit.addSlotDummyNode(builder, SlotDummyNode);
    Unit.addGraph(builder, graphOffset);
    Unit.addSlotTokenIdx(builder, slotTokenIdx);
    Unit.addFilename(builder, filenameOffset);
    return Unit.endUnit(builder);
  }

  public static void startUnit(FlatBufferBuilder builder) { builder.startObject(5); }
  public static void addFilename(FlatBufferBuilder builder, int filenameOffset) { builder.addOffset(0, filenameOffset, 0); }
  public static void addSlotTokenIdx(FlatBufferBuilder builder, int slotTokenIdx) { builder.addInt(1, slotTokenIdx, 0); }
  public static void addGraph(FlatBufferBuilder builder, int graphOffset) { builder.addOffset(2, graphOffset, 0); }
  public static void addSlotDummyNode(FlatBufferBuilder builder, int SlotDummyNode) { builder.addInt(3, SlotDummyNode, 0); }
  public static void addSymbolCandidate(FlatBufferBuilder builder, int symbolCandidateOffset) { builder.addOffset(4, symbolCandidateOffset, 0); }
  public static int createSymbolCandidateVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSymbolCandidateVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endUnit(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

